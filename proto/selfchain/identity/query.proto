syntax = "proto3";
package selfchain.identity;

option go_package = "selfchain/x/identity/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "selfchain/identity/params.proto";
import "selfchain/identity/did_document.proto";
import "selfchain/identity/credential.proto";
import "selfchain/identity/oauth.proto";
import "selfchain/identity/mfa.proto";
import "selfchain/identity/recovery.proto";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/selfchain/identity/params";
  }
  
  // DIDDocument queries a DID document by ID.
  rpc DIDDocument(QueryDIDDocumentRequest) returns (QueryDIDDocumentResponse) {
    option (google.api.http).get = "/selfchain/identity/did/{id}";
  }
  
  // Credential queries a credential by ID.
  rpc Credential(QueryCredentialRequest) returns (QueryCredentialResponse) {
    option (google.api.http).get = "/selfchain/identity/credential/{id}";
  }
  
  // SocialIdentity queries a social identity by DID and provider.
  rpc SocialIdentity(QuerySocialIdentityRequest) returns (QuerySocialIdentityResponse) {
    option (google.api.http).get = "/selfchain/identity/social/{did}/{provider}";
  }
  
  // LinkedDID queries the DID linked to a social identity.
  rpc LinkedDID(QueryLinkedDIDRequest) returns (QueryLinkedDIDResponse) {
    option (google.api.http).get = "/selfchain/identity/social/linked/{provider}/{social_id}";
  }
  
  // VerifyCredential verifies a credential.
  rpc VerifyCredential(QueryVerifyCredentialRequest) returns (QueryVerifyCredentialResponse) {
    option (google.api.http).get = "/selfchain/identity/credential/verify/{id}";
  }

  // MFAConfig queries the MFA configuration for a DID.
  rpc MFAConfig(QueryMFAConfigRequest) returns (QueryMFAConfigResponse) {
    option (google.api.http).get = "/selfchain/identity/mfa/config/{did}";
  }

  // MFAChallenge queries an MFA challenge by ID.
  rpc MFAChallenge(QueryMFAChallengeRequest) returns (QueryMFAChallengeResponse) {
    option (google.api.http).get = "/selfchain/identity/mfa/challenge/{id}";
  }

  // RecoverySession queries a recovery session by ID.
  rpc RecoverySession(QueryRecoverySessionRequest) returns (QueryRecoverySessionResponse) {
    option (google.api.http).get = "/selfchain/identity/recovery/session/{id}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryDIDDocumentRequest is request type for the Query/DIDDocument method.
message QueryDIDDocumentRequest {
  string id = 1;
}

// QueryDIDDocumentResponse is response type for the Query/DIDDocument method.
message QueryDIDDocumentResponse {
  DIDDocument document = 1 [(gogoproto.nullable) = false];
}

// QueryCredentialRequest is request type for the Query/Credential method.
message QueryCredentialRequest {
  string id = 1;
}

// QueryCredentialResponse is response type for the Query/Credential method.
message QueryCredentialResponse {
  Credential credential = 1 [(gogoproto.nullable) = false];
}

// QueryVerifyCredentialRequest is request type for the Query/VerifyCredential method.
message QueryVerifyCredentialRequest {
  string id = 1;
}

// QueryVerifyCredentialResponse is response type for the Query/VerifyCredential method.
message QueryVerifyCredentialResponse {
  VerificationStatus status = 1 [(gogoproto.nullable) = false];
}

// VerificationStatus represents the verification status of a credential.
message VerificationStatus {
  bool valid = 1;
  string reason = 2;
}

// QueryMFAConfigRequest is request type for the Query/MFAConfig method.
message QueryMFAConfigRequest {
  string did = 1;
}

// QueryMFAConfigResponse is response type for the Query/MFAConfig method.
message QueryMFAConfigResponse {
  MFAConfig config = 1 [(gogoproto.nullable) = false];
}

// QueryMFAChallengeRequest is request type for the Query/MFAChallenge method.
message QueryMFAChallengeRequest {
  string id = 1;
}

// QueryMFAChallengeResponse is response type for the Query/MFAChallenge method.
message QueryMFAChallengeResponse {
  MFAChallenge challenge = 1 [(gogoproto.nullable) = false];
}

// QueryRecoverySessionRequest is request type for the Query/RecoverySession method.
message QueryRecoverySessionRequest {
  string id = 1;
}

// QueryRecoverySessionResponse is response type for the Query/RecoverySession method.
message QueryRecoverySessionResponse {
  RecoverySession session = 1 [(gogoproto.nullable) = false];
}