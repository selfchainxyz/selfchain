syntax = "proto3";
package selfchain.identity;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "selfchain/identity/params.proto";
import "selfchain/identity/did_document.proto";
import "selfchain/identity/credential.proto";
import "selfchain/identity/oauth.proto";
import "selfchain/identity/mfa.proto";

option go_package = "selfchain/x/identity/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/selfchain/identity/params";
  }
  
  // Queries a list of DIDDocuments items.
  rpc DIDDocuments(QueryDIDDocumentsRequest) returns (QueryDIDDocumentsResponse) {
    option (google.api.http).get = "/selfchain/identity/did_documents/{did}";
  }

  // Queries a credential by ID
  rpc Credential(QueryCredentialRequest) returns (QueryCredentialResponse) {
    option (google.api.http).get = "/selfchain/identity/credential/{id}";
  }

  // Queries credentials by DID
  rpc CredentialsByDID(QueryCredentialsByDIDRequest) returns (QueryCredentialsByDIDResponse) {
    option (google.api.http).get = "/selfchain/identity/credentials/{did}";
  }

  // Queries a list of SocialIdentities items.
  rpc SocialIdentities(QuerySocialIdentitiesRequest) returns (QuerySocialIdentitiesResponse) {
    option (google.api.http).get = "/selfchain/identity/social_identities/{did}";
  }

  // Queries a social identity by provider and social ID.
  rpc SocialIdentityBySocialID(QuerySocialIdentityBySocialIDRequest) returns (QuerySocialIdentityBySocialIDResponse) {
    option (google.api.http).get = "/selfchain/identity/social_identity/{provider}/{social_id}";
  }

  // SocialIdentity queries a social identity by DID and provider
  rpc SocialIdentity(QuerySocialIdentityRequest) returns (QuerySocialIdentityResponse) {
    option (google.api.http).get = "/selfchain/identity/social_identity/{did}/{provider}";
  }

  // LinkedDID queries a DID linked to a social identity
  rpc LinkedDID(QueryLinkedDIDRequest) returns (QueryLinkedDIDResponse) {
    option (google.api.http).get = "/selfchain/identity/linked_did/{provider}/{social_id}";
  }

  // Queries MFA configuration.
  rpc MFAConfig(QueryMFAConfigRequest) returns (QueryMFAConfigResponse) {
    option (google.api.http).get = "/selfchain/identity/mfa_config/{did}";
  }

  // Queries MFA challenge.
  rpc MFAChallenge(QueryMFAChallengeRequest) returns (QueryMFAChallengeResponse) {
    option (google.api.http).get = "/selfchain/identity/mfa_challenge/{did}/{method}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryDIDDocumentsRequest is request type for the Query/DIDDocuments method.
message QueryDIDDocumentsRequest {
  string did = 1;
}

// QueryDIDDocumentsResponse is response type for the Query/DIDDocuments method.
message QueryDIDDocumentsResponse {
  DIDDocument document = 1;
}

// QueryCredentialRequest is request type for the Query/Credential method.
message QueryCredentialRequest {
  string id = 1;
}

// QueryCredentialResponse is response type for the Query/Credential method.
message QueryCredentialResponse {
  Credential credential = 1;
}

// QueryCredentialsByDIDRequest is request type for the Query/CredentialsByDID method.
message QueryCredentialsByDIDRequest {
  string did = 1;
}

// QueryCredentialsByDIDResponse is response type for the Query/CredentialsByDID method.
message QueryCredentialsByDIDResponse {
  repeated Credential credentials = 1;
}

// QuerySocialIdentitiesRequest is request type for the Query/SocialIdentities method.
message QuerySocialIdentitiesRequest {
  string did = 1;
}

// QuerySocialIdentitiesResponse is response type for the Query/SocialIdentities method.
message QuerySocialIdentitiesResponse {
  repeated SocialIdentity identities = 1;
}

// QuerySocialIdentityBySocialIDRequest is request type for the Query/SocialIdentityBySocialID method.
message QuerySocialIdentityBySocialIDRequest {
  string provider = 1;
  string social_id = 2;
}

// QuerySocialIdentityBySocialIDResponse is response type for the Query/SocialIdentityBySocialID method.
message QuerySocialIdentityBySocialIDResponse {
  SocialIdentity identity = 1;
}

// QuerySocialIdentityRequest is request type for the Query/SocialIdentity RPC method
message QuerySocialIdentityRequest {
  string did = 1;
  string provider = 2;
}

// QuerySocialIdentityResponse is response type for the Query/SocialIdentity RPC method
message QuerySocialIdentityResponse {
  string social_id = 1;
}

// QueryLinkedDIDRequest is request type for the Query/LinkedDID RPC method
message QueryLinkedDIDRequest {
  string provider = 1;
  string social_id = 2;
}

// QueryLinkedDIDResponse is response type for the Query/LinkedDID RPC method
message QueryLinkedDIDResponse {
  string did = 1;
}

// QueryMFAConfigRequest is request type for the Query/MFAConfig method.
message QueryMFAConfigRequest {
  string did = 1;
}

// QueryMFAConfigResponse is response type for the Query/MFAConfig method.
message QueryMFAConfigResponse {
  MFAConfig config = 1;
}

// QueryMFAChallengeRequest is request type for the Query/MFAChallenge method.
message QueryMFAChallengeRequest {
  string did = 1;
  string method = 2;
}

// QueryMFAChallengeResponse is response type for the Query/MFAChallenge method.
message QueryMFAChallengeResponse {
  MFAChallenge challenge = 1;
}
