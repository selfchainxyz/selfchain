syntax = "proto3";
package selfchain.keyless;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "selfchain/x/keyless/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateWallet creates a new keyless wallet
  rpc CreateWallet(MsgCreateWallet) returns (MsgCreateWalletResponse);
  
  // RecoverWallet recovers a wallet using recovery proof
  rpc RecoverWallet(MsgRecoverWallet) returns (MsgRecoverWalletResponse);
  
  // SignTransaction signs a transaction using the keyless wallet
  rpc SignTransaction(MsgSignTransaction) returns (MsgSignTransactionResponse);
}

// MsgCreateWallet defines the CreateWallet request type
message MsgCreateWallet {
  option (cosmos.msg.v1.signer) = "creator";
  
  string creator = 1;
  string pub_key = 2;
  string wallet_address = 3;
  string chain_id = 4;
}

// MsgCreateWalletResponse defines the CreateWallet response type
message MsgCreateWalletResponse {
  string wallet_address = 1;
}

// MsgRecoverWallet defines the RecoverWallet request type
message MsgRecoverWallet {
  option (cosmos.msg.v1.signer) = "creator";
  
  string creator = 1;
  string wallet_address = 2;
  string recovery_proof = 3;
  string new_pub_key = 4;
  string signature = 5;
}

// MsgRecoverWalletResponse defines the RecoverWallet response type
message MsgRecoverWalletResponse {
  string wallet_address = 1;
}

// MsgSignTransaction defines the SignTransaction request type
message MsgSignTransaction {
  option (cosmos.msg.v1.signer) = "creator";
  
  string creator = 1;
  string wallet_address = 2;
  string unsigned_tx = 3;
  string chain_id = 4;
}

// MsgSignTransactionResponse defines the SignTransaction response type
message MsgSignTransactionResponse {
  string signed_tx = 1;
}