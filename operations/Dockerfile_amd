Dockerfile_amdARG GO_VERSION="1.23"
ARG RUNNER_IMAGE="gcr.io/distroless/static-debian11"
ARG BUILD_TAGS="netgo,ledger,muslc"
ARG GIT_VERSION="mainnet-v2.0.0"
ARG GIT_COMMIT=""

# --------------------------------------------------------
# Builder
# --------------------------------------------------------

FROM golang:${GO_VERSION}-alpine as builder

ARG BUILD_TAGS
ARG GIT_VERSION
ARG GIT_COMMIT

RUN apk add --no-cache \
    ca-certificates \
    build-base \
    linux-headers \
    binutils-gold \
    git

WORKDIR /app

# Print version information (for build logs)
RUN echo "Building selfchaind version: ${GIT_VERSION}-${GIT_COMMIT}"

# Copy go.mod and go.sum
COPY ../go.mod go.sum* ./
RUN go mod download

# Copy source code
COPY .. .

# Cosmwasm - Download correct libwasmvm version
RUN ARCH=$(uname -m) && \
    wget https://github.com/CosmWasm/wasmvm/releases/download/v2.2.1/libwasmvm_muslc.$ARCH.a \
    -O /lib/libwasmvm_muslc.$ARCH.a && \
    cp /lib/libwasmvm_muslc.$ARCH.a /lib/libwasmvm_muslc.a

# Build selfchain binary
RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=1 \
    go build \
    -mod=readonly \
    -tags "${BUILD_TAGS}" \
    -ldflags \
    "-X github.com/cosmos/cosmos-sdk/version.Name="selfchain" \
    -X github.com/cosmos/cosmos-sdk/version.AppName="selfchaind" \
    -w -s -linkmode=external -extldflags '-Wl,-z,muldefs -static' \
     -X github.com/cosmos/cosmos-sdk/version.Version=${GIT_VERSION} \
     -X github.com/cosmos/cosmos-sdk/version.Commit=${GIT_COMMIT} \
     -X github.com/cosmos/cosmos-sdk/version.BuildTags=${BUILD_TAGS}" \
    -trimpath \
    -o /app/build/selfchaind-linux-amd64 \
    ./cmd/selfchaind/main.go

# Verify version is correctly embedded in binary
RUN /app/build/selfchaind-linux-amd64 version

# --------------------------------------------------------
# Runner
# --------------------------------------------------------

FROM alpine:latest
COPY --from=builder /app/build/selfchaind-linux-amd64 /usr/local/bin/selfchaind

# Print version when the container starts
CMD ["sh", "-c", "echo 'selfchaind version:' && selfchaind version && exec selfchaind $@"]



#docker buildx build --platform linux/amd64 --tag selfchain-builder-amd64:latest -f Dockerfile_amd .
#docker create --name temp-selfchain-container-amd64 selfchain-builder-amd64
#docker cp temp-selfchain-container-amd64:/usr/local/bin/selfchaind ./build/selfchaind-linux-amd64
#docker rm temp-selfchain-container-amd64

#docker buildx build --platform linux/arm64 --tag selfchain-builder-arm64:latest -f Dockerfile .
#docker create --name temp-selfchain-container-arm64 selfchain-builder-arm64
#docker cp temp-selfchain-container-arm64:/usr/local/bin/selfchaind ./build/selfchaind-linux-arm64
#docker rm temp-selfchain-container-arm64

#echo "Building selfchaind with Docker Buildx..."
#docker buildx build --platform linux/amd64 --tag selfchain-builder:latest .

## Extract the binary from the container
#echo "Extracting binary from container..."
#docker create --name temp-selfchain-container selfchain-builder
#docker cp temp-selfchain-container:/selfchaind-linux-amd64 ./build/
#docker rm temp-selfchain-container

#echo "Build completed successfully! Binary located at ./build/selfchaind-linux-amd64"