// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/selfvesting/vesting_positions.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VestingPositions struct {
	Beneficiary  string         `protobuf:"bytes,1,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	VestingInfos []*VestingInfo `protobuf:"bytes,2,rep,name=vestingInfos,proto3" json:"vestingInfos,omitempty"`
}

func (m *VestingPositions) Reset()         { *m = VestingPositions{} }
func (m *VestingPositions) String() string { return proto.CompactTextString(m) }
func (*VestingPositions) ProtoMessage()    {}
func (*VestingPositions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca20d6d5d07990a, []int{0}
}
func (m *VestingPositions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingPositions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingPositions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingPositions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingPositions.Merge(m, src)
}
func (m *VestingPositions) XXX_Size() int {
	return m.Size()
}
func (m *VestingPositions) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingPositions.DiscardUnknown(m)
}

var xxx_messageInfo_VestingPositions proto.InternalMessageInfo

func (m *VestingPositions) GetBeneficiary() string {
	if m != nil {
		return m.Beneficiary
	}
	return ""
}

func (m *VestingPositions) GetVestingInfos() []*VestingInfo {
	if m != nil {
		return m.VestingInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*VestingPositions)(nil), "selfchain.selfvesting.VestingPositions")
}

func init() {
	proto.RegisterFile("selfchain/selfvesting/vesting_positions.proto", fileDescriptor_0ca20d6d5d07990a)
}

var fileDescriptor_0ca20d6d5d07990a = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2d, 0x4e, 0xcd, 0x49,
	0x4b, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x07, 0xb1, 0xca, 0x52, 0x8b, 0x4b, 0x32, 0xf3, 0xd2, 0xf5,
	0xa1, 0x74, 0x7c, 0x41, 0x7e, 0x71, 0x66, 0x49, 0x66, 0x7e, 0x5e, 0xb1, 0x5e, 0x41, 0x51, 0x7e,
	0x49, 0xbe, 0x90, 0x28, 0x5c, 0xb9, 0x1e, 0x92, 0x72, 0x29, 0x0d, 0xfc, 0xa6, 0x64, 0xe6, 0xa5,
	0xe5, 0x43, 0x0c, 0x50, 0xaa, 0xe1, 0x12, 0x08, 0x83, 0x88, 0x06, 0xc0, 0x8c, 0x16, 0x52, 0xe0,
	0xe2, 0x4e, 0x4a, 0xcd, 0x4b, 0x4d, 0xcb, 0x4c, 0xce, 0x4c, 0x2c, 0xaa, 0x94, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x42, 0x16, 0x12, 0x72, 0xe3, 0xe2, 0x81, 0x9a, 0xe5, 0x99, 0x97, 0x96, 0x5f,
	0x2c, 0xc1, 0xa4, 0xc0, 0xac, 0xc1, 0x6d, 0xa4, 0xa4, 0x87, 0xd5, 0x35, 0x7a, 0x61, 0x08, 0xa5,
	0x41, 0x28, 0xfa, 0x9c, 0xcc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a,
	0x16, 0xe1, 0x83, 0x0a, 0x14, 0x3f, 0x94, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x5d, 0x6f,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x6e, 0x4d, 0xb0, 0x2f, 0x01, 0x00, 0x00,
}

func (m *VestingPositions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingPositions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingPositions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingInfos) > 0 {
		for iNdEx := len(m.VestingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVestingPositions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Beneficiary) > 0 {
		i -= len(m.Beneficiary)
		copy(dAtA[i:], m.Beneficiary)
		i = encodeVarintVestingPositions(dAtA, i, uint64(len(m.Beneficiary)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVestingPositions(dAtA []byte, offset int, v uint64) int {
	offset -= sovVestingPositions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VestingPositions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Beneficiary)
	if l > 0 {
		n += 1 + l + sovVestingPositions(uint64(l))
	}
	if len(m.VestingInfos) > 0 {
		for _, e := range m.VestingInfos {
			l = e.Size()
			n += 1 + l + sovVestingPositions(uint64(l))
		}
	}
	return n
}

func sovVestingPositions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVestingPositions(x uint64) (n int) {
	return sovVestingPositions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VestingPositions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingPositions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingPositions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingPositions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beneficiary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingPositions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingPositions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingPositions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beneficiary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingPositions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingPositions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingPositions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingInfos = append(m.VestingInfos, &VestingInfo{})
			if err := m.VestingInfos[len(m.VestingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestingPositions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingPositions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVestingPositions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVestingPositions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingPositions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingPositions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVestingPositions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVestingPositions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVestingPositions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVestingPositions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVestingPositions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVestingPositions = fmt.Errorf("proto: unexpected end of group")
)
