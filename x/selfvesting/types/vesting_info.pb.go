// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/selfvesting/vesting_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VestingInfo struct {
	StartTime     uint64 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Duration      uint64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Cliff         uint64 `protobuf:"varint,3,opt,name=cliff,proto3" json:"cliff,omitempty"`
	Amount        string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalClaimed  string `protobuf:"bytes,5,opt,name=totalClaimed,proto3" json:"totalClaimed,omitempty"`
	PeriodClaimed uint64 `protobuf:"varint,6,opt,name=periodClaimed,proto3" json:"periodClaimed,omitempty"`
}

func (m *VestingInfo) Reset()         { *m = VestingInfo{} }
func (m *VestingInfo) String() string { return proto.CompactTextString(m) }
func (*VestingInfo) ProtoMessage()    {}
func (*VestingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_db524d9bebced67f, []int{0}
}
func (m *VestingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingInfo.Merge(m, src)
}
func (m *VestingInfo) XXX_Size() int {
	return m.Size()
}
func (m *VestingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VestingInfo proto.InternalMessageInfo

func (m *VestingInfo) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *VestingInfo) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *VestingInfo) GetCliff() uint64 {
	if m != nil {
		return m.Cliff
	}
	return 0
}

func (m *VestingInfo) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *VestingInfo) GetTotalClaimed() string {
	if m != nil {
		return m.TotalClaimed
	}
	return ""
}

func (m *VestingInfo) GetPeriodClaimed() uint64 {
	if m != nil {
		return m.PeriodClaimed
	}
	return 0
}

func init() {
	proto.RegisterType((*VestingInfo)(nil), "selfchain.selfvesting.VestingInfo")
}

func init() {
	proto.RegisterFile("selfchain/selfvesting/vesting_info.proto", fileDescriptor_db524d9bebced67f)
}

var fileDescriptor_db524d9bebced67f = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x28, 0x4e, 0xcd, 0x49,
	0x4b, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x07, 0xb1, 0xca, 0x52, 0x8b, 0x4b, 0x32, 0xf3, 0xd2, 0xf5,
	0xa1, 0x74, 0x7c, 0x66, 0x5e, 0x5a, 0xbe, 0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x90, 0x28, 0x5c,
	0xa5, 0x1e, 0x92, 0x4a, 0xa5, 0xfd, 0x8c, 0x5c, 0xdc, 0x61, 0x10, 0xb6, 0x67, 0x5e, 0x5a, 0xbe,
	0x90, 0x0c, 0x17, 0x67, 0x71, 0x49, 0x62, 0x51, 0x49, 0x48, 0x66, 0x6e, 0xaa, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x4b, 0x10, 0x42, 0x40, 0x48, 0x8a, 0x8b, 0x23, 0xa5, 0xb4, 0x28, 0xb1, 0x24, 0x33,
	0x3f, 0x4f, 0x82, 0x09, 0x2c, 0x09, 0xe7, 0x0b, 0x89, 0x70, 0xb1, 0x26, 0xe7, 0x64, 0xa6, 0xa5,
	0x49, 0x30, 0x83, 0x25, 0x20, 0x1c, 0x21, 0x31, 0x2e, 0xb6, 0xc4, 0xdc, 0xfc, 0xd2, 0xbc, 0x12,
	0x09, 0x16, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x28, 0x4f, 0x48, 0x89, 0x8b, 0xa7, 0x24, 0xbf, 0x24,
	0x31, 0xc7, 0x39, 0x27, 0x31, 0x33, 0x37, 0x35, 0x45, 0x82, 0x15, 0x2c, 0x8b, 0x22, 0x26, 0xa4,
	0xc2, 0xc5, 0x5b, 0x90, 0x5a, 0x94, 0x99, 0x9f, 0x02, 0x53, 0xc4, 0x06, 0x36, 0x19, 0x55, 0xd0,
	0xc9, 0xfc, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0,
	0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x64, 0x11, 0x81, 0x53,
	0x81, 0x12, 0x3c, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0, 0x80, 0x31, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x8e, 0xfd, 0xfe, 0x44, 0x01, 0x00, 0x00,
}

func (m *VestingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeriodClaimed != 0 {
		i = encodeVarintVestingInfo(dAtA, i, uint64(m.PeriodClaimed))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TotalClaimed) > 0 {
		i -= len(m.TotalClaimed)
		copy(dAtA[i:], m.TotalClaimed)
		i = encodeVarintVestingInfo(dAtA, i, uint64(len(m.TotalClaimed)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintVestingInfo(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cliff != 0 {
		i = encodeVarintVestingInfo(dAtA, i, uint64(m.Cliff))
		i--
		dAtA[i] = 0x18
	}
	if m.Duration != 0 {
		i = encodeVarintVestingInfo(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != 0 {
		i = encodeVarintVestingInfo(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVestingInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovVestingInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VestingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovVestingInfo(uint64(m.StartTime))
	}
	if m.Duration != 0 {
		n += 1 + sovVestingInfo(uint64(m.Duration))
	}
	if m.Cliff != 0 {
		n += 1 + sovVestingInfo(uint64(m.Cliff))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovVestingInfo(uint64(l))
	}
	l = len(m.TotalClaimed)
	if l > 0 {
		n += 1 + l + sovVestingInfo(uint64(l))
	}
	if m.PeriodClaimed != 0 {
		n += 1 + sovVestingInfo(uint64(m.PeriodClaimed))
	}
	return n
}

func sovVestingInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVestingInfo(x uint64) (n int) {
	return sovVestingInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VestingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cliff", wireType)
			}
			m.Cliff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cliff |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalClaimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalClaimed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodClaimed", wireType)
			}
			m.PeriodClaimed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodClaimed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVestingInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVestingInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVestingInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVestingInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVestingInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVestingInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVestingInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVestingInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVestingInfo = fmt.Errorf("proto: unexpected end of group")
)
