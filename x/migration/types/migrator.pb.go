// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/migration/migrator.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Migrator struct {
	Migrator string `protobuf:"bytes,1,opt,name=migrator,proto3" json:"migrator,omitempty"`
	Exists   bool   `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *Migrator) Reset()         { *m = Migrator{} }
func (m *Migrator) String() string { return proto.CompactTextString(m) }
func (*Migrator) ProtoMessage()    {}
func (*Migrator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b2baa5ede9146c, []int{0}
}
func (m *Migrator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Migrator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Migrator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Migrator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Migrator.Merge(m, src)
}
func (m *Migrator) XXX_Size() int {
	return m.Size()
}
func (m *Migrator) XXX_DiscardUnknown() {
	xxx_messageInfo_Migrator.DiscardUnknown(m)
}

var xxx_messageInfo_Migrator proto.InternalMessageInfo

func (m *Migrator) GetMigrator() string {
	if m != nil {
		return m.Migrator
	}
	return ""
}

func (m *Migrator) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func init() {
	proto.RegisterType((*Migrator)(nil), "selfchain.migration.Migrator")
}

func init() {
	proto.RegisterFile("selfchain/migration/migrator.proto", fileDescriptor_a8b2baa5ede9146c)
}

var fileDescriptor_a8b2baa5ede9146c = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0x4e, 0xcd, 0x49,
	0x4b, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0xcf, 0xcd, 0x4c, 0x2f, 0x4a, 0x2c, 0xc9, 0xcc, 0x87, 0xb1,
	0xf2, 0x8b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0x6a, 0xf4, 0xe0, 0x6a, 0x94,
	0xec, 0xb8, 0x38, 0x7c, 0xa1, 0xca, 0x84, 0xa4, 0xb8, 0x38, 0x60, 0x5a, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0xe0, 0x7c, 0x21, 0x31, 0x2e, 0xb6, 0xd4, 0x8a, 0xcc, 0xe2, 0x92, 0x62, 0x09,
	0x26, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x28, 0xcf, 0xc9, 0xf4, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f,
	0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b,
	0x8f, 0xe5, 0x18, 0xa2, 0xa4, 0x11, 0x4e, 0xaa, 0x40, 0x72, 0x54, 0x49, 0x65, 0x41, 0x6a, 0x71,
	0x12, 0x1b, 0xd8, 0x49, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xab, 0xfb, 0xa2, 0xb8,
	0x00, 0x00, 0x00,
}

func (m *Migrator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Migrator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Migrator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Migrator) > 0 {
		i -= len(m.Migrator)
		copy(dAtA[i:], m.Migrator)
		i = encodeVarintMigrator(dAtA, i, uint64(len(m.Migrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMigrator(dAtA []byte, offset int, v uint64) int {
	offset -= sovMigrator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Migrator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Migrator)
	if l > 0 {
		n += 1 + l + sovMigrator(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	return n
}

func sovMigrator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMigrator(x uint64) (n int) {
	return sovMigrator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Migrator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigrator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Migrator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Migrator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Migrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMigrator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMigrator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMigrator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Migrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMigrator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMigrator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMigrator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMigrator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMigrator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMigrator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMigrator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMigrator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMigrator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMigrator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMigrator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMigrator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMigrator = fmt.Errorf("proto: unexpected end of group")
)
