// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	types "selfchain/x/keyless/types"

	mock "github.com/stretchr/testify/mock"
)

// TSSProtocol is an autogenerated mock type for the TSSProtocol type
type TSSProtocol struct {
	mock.Mock
}

// GenerateKeyShares provides a mock function with given fields: ctx, req
func (_m *TSSProtocol) GenerateKeyShares(ctx context.Context, req *types.KeyGenRequest) (*types.KeyGenResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GenerateKeyShares")
	}

	var r0 *types.KeyGenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.KeyGenRequest) (*types.KeyGenResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.KeyGenRequest) *types.KeyGenResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.KeyGenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.KeyGenRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateSigning provides a mock function with given fields: ctx, msg, walletID
func (_m *TSSProtocol) InitiateSigning(ctx context.Context, msg []byte, walletID string) (*types.SigningResponse, error) {
	ret := _m.Called(ctx, msg, walletID)

	if len(ret) == 0 {
		panic("no return value specified for InitiateSigning")
	}

	var r0 *types.SigningResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) (*types.SigningResponse, error)); ok {
		return rf(ctx, msg, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) *types.SigningResponse); ok {
		r0 = rf(ctx, msg, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SigningResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, msg, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessKeyGenRound provides a mock function with given fields: ctx, sessionID, partyData
func (_m *TSSProtocol) ProcessKeyGenRound(ctx context.Context, sessionID string, partyData *types.PartyData) error {
	ret := _m.Called(ctx, sessionID, partyData)

	if len(ret) == 0 {
		panic("no return value specified for ProcessKeyGenRound")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.PartyData) error); ok {
		r0 = rf(ctx, sessionID, partyData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTSSProtocol creates a new instance of TSSProtocol. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTSSProtocol(t interface {
	mock.TestingT
	Cleanup(func())
}) *TSSProtocol {
	mock := &TSSProtocol{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
