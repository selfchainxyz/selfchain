// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/wallet.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WalletStatus represents the status of a wallet
type WalletStatus int32

const (
	// WALLET_STATUS_UNSPECIFIED represents an unspecified wallet status
	WalletStatus_WALLET_STATUS_UNSPECIFIED WalletStatus = 0
	// WALLET_STATUS_ACTIVE represents an active wallet
	WalletStatus_WALLET_STATUS_ACTIVE WalletStatus = 1
	// WALLET_STATUS_INACTIVE represents an inactive wallet
	WalletStatus_WALLET_STATUS_INACTIVE WalletStatus = 2
	// WALLET_STATUS_RECOVERING represents a wallet in recovery process
	WalletStatus_WALLET_STATUS_RECOVERING WalletStatus = 3
	// WALLET_STATUS_ROTATING represents a wallet in key rotation process
	WalletStatus_WALLET_STATUS_ROTATING WalletStatus = 4
)

var WalletStatus_name = map[int32]string{
	0: "WALLET_STATUS_UNSPECIFIED",
	1: "WALLET_STATUS_ACTIVE",
	2: "WALLET_STATUS_INACTIVE",
	3: "WALLET_STATUS_RECOVERING",
	4: "WALLET_STATUS_ROTATING",
}

var WalletStatus_value = map[string]int32{
	"WALLET_STATUS_UNSPECIFIED": 0,
	"WALLET_STATUS_ACTIVE":      1,
	"WALLET_STATUS_INACTIVE":    2,
	"WALLET_STATUS_RECOVERING":  3,
	"WALLET_STATUS_ROTATING":    4,
}

func (x WalletStatus) String() string {
	return proto.EnumName(WalletStatus_name, int32(x))
}

func (WalletStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_26dddf90ae5a75d4, []int{0}
}

// Wallet represents a keyless wallet
type Wallet struct {
	Id            string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator       string       `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	PublicKey     string       `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	WalletAddress string       `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ChainId       string       `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Status        WalletStatus `protobuf:"varint,6,opt,name=status,proto3,enum=selfchain.keyless.WalletStatus" json:"status,omitempty"`
	KeyVersion    uint32       `protobuf:"varint,7,opt,name=key_version,json=keyVersion,proto3" json:"key_version,omitempty"`
	CreatedAt     *time.Time   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt     *time.Time   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	LastUsed      *time.Time   `protobuf:"bytes,10,opt,name=last_used,json=lastUsed,proto3,stdtime" json:"last_used,omitempty"`
	UsageCount    uint64       `protobuf:"varint,11,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
}

func (m *Wallet) Reset()         { *m = Wallet{} }
func (m *Wallet) String() string { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()    {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_26dddf90ae5a75d4, []int{0}
}
func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return m.Size()
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func (m *Wallet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Wallet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Wallet) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Wallet) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *Wallet) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Wallet) GetStatus() WalletStatus {
	if m != nil {
		return m.Status
	}
	return WalletStatus_WALLET_STATUS_UNSPECIFIED
}

func (m *Wallet) GetKeyVersion() uint32 {
	if m != nil {
		return m.KeyVersion
	}
	return 0
}

func (m *Wallet) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Wallet) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Wallet) GetLastUsed() *time.Time {
	if m != nil {
		return m.LastUsed
	}
	return nil
}

func (m *Wallet) GetUsageCount() uint64 {
	if m != nil {
		return m.UsageCount
	}
	return 0
}

func init() {
	proto.RegisterEnum("selfchain.keyless.WalletStatus", WalletStatus_name, WalletStatus_value)
	proto.RegisterType((*Wallet)(nil), "selfchain.keyless.Wallet")
}

func init() { proto.RegisterFile("selfchain/keyless/wallet.proto", fileDescriptor_26dddf90ae5a75d4) }

var fileDescriptor_26dddf90ae5a75d4 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6e, 0xd3, 0x40,
	0x18, 0x85, 0x33, 0x49, 0x48, 0x93, 0x3f, 0x34, 0x0a, 0xa3, 0x0a, 0x4d, 0x22, 0xea, 0x58, 0x48,
	0x48, 0x16, 0x0b, 0x5b, 0x6a, 0x17, 0xac, 0x10, 0x72, 0x83, 0x41, 0x16, 0x55, 0x8a, 0x1c, 0x27,
	0x95, 0xd8, 0x58, 0x4e, 0x66, 0x6a, 0xac, 0xb8, 0xb1, 0xe5, 0x19, 0x03, 0xbe, 0x45, 0x2f, 0xc0,
	0x7d, 0xd8, 0xd1, 0x25, 0x3b, 0x50, 0x72, 0x11, 0xe4, 0xb1, 0x53, 0x88, 0xba, 0xe9, 0xce, 0xf3,
	0xbe, 0xf7, 0x7e, 0xcf, 0xff, 0x34, 0xa0, 0x70, 0x16, 0x5d, 0x2d, 0x3f, 0xfb, 0xe1, 0xda, 0x58,
	0xb1, 0x3c, 0x62, 0x9c, 0x1b, 0x5f, 0xfd, 0x28, 0x62, 0x42, 0x4f, 0xd2, 0x58, 0xc4, 0xf8, 0xc9,
	0x1d, 0xd7, 0x2b, 0x3e, 0x3c, 0x0a, 0xe2, 0x20, 0x96, 0xd4, 0x28, 0xbe, 0x4a, 0xe3, 0x70, 0x14,
	0xc4, 0x71, 0x10, 0x31, 0x43, 0x9e, 0x16, 0xd9, 0x95, 0x21, 0xc2, 0x6b, 0xc6, 0x85, 0x7f, 0x9d,
	0x94, 0x86, 0xe7, 0x3f, 0x1b, 0xd0, 0xba, 0x94, 0xa3, 0x71, 0x0f, 0xea, 0x21, 0x25, 0x48, 0x45,
	0x5a, 0xc7, 0xa9, 0x87, 0x14, 0x13, 0x38, 0x58, 0xa6, 0xcc, 0x17, 0x71, 0x4a, 0xea, 0x52, 0xdc,
	0x1d, 0xf1, 0x31, 0x40, 0x92, 0x2d, 0xa2, 0x70, 0xe9, 0xad, 0x58, 0x4e, 0x1a, 0x12, 0x76, 0x4a,
	0xe5, 0x03, 0xcb, 0xf1, 0x0b, 0xe8, 0x95, 0xb7, 0xf5, 0x7c, 0x4a, 0x53, 0xc6, 0x39, 0x69, 0x4a,
	0xcb, 0x61, 0xa9, 0x9a, 0xa5, 0x88, 0x07, 0xd0, 0x96, 0x2b, 0x78, 0x21, 0x25, 0x8f, 0xaa, 0x1f,
	0x14, 0x67, 0x9b, 0xe2, 0x57, 0xd0, 0xe2, 0xc2, 0x17, 0x19, 0x27, 0x2d, 0x15, 0x69, 0xbd, 0x93,
	0x91, 0x7e, 0x6f, 0x61, 0xbd, 0xbc, 0xf5, 0x54, 0xda, 0x9c, 0xca, 0x8e, 0x47, 0xd0, 0x5d, 0xb1,
	0xdc, 0xfb, 0xc2, 0x52, 0x1e, 0xc6, 0x6b, 0x72, 0xa0, 0x22, 0xed, 0xd0, 0x81, 0x15, 0xcb, 0xe7,
	0xa5, 0x82, 0xdf, 0x00, 0xc8, 0x2d, 0x18, 0xf5, 0x7c, 0x41, 0xda, 0x2a, 0xd2, 0xba, 0x27, 0x43,
	0xbd, 0x6c, 0x49, 0xdf, 0xb5, 0xa4, 0xbb, 0xbb, 0x96, 0xce, 0x9a, 0x37, 0xbf, 0x47, 0xc8, 0xe9,
	0x54, 0x19, 0x53, 0x14, 0x03, 0xb2, 0x84, 0xee, 0x06, 0x74, 0x1e, 0x3a, 0xa0, 0xca, 0x98, 0x02,
	0xbf, 0x86, 0x4e, 0xe4, 0x73, 0xe1, 0x65, 0x9c, 0x51, 0x02, 0x0f, 0xcc, 0xb7, 0x8b, 0xc8, 0x8c,
	0x33, 0x5a, 0x6c, 0x98, 0x71, 0x3f, 0x60, 0xde, 0x32, 0xce, 0xd6, 0x82, 0x74, 0x55, 0xa4, 0x35,
	0x1d, 0x90, 0xd2, 0xb8, 0x50, 0x5e, 0x7e, 0x47, 0xf0, 0xf8, 0xff, 0x6e, 0xf0, 0x31, 0x0c, 0x2e,
	0xcd, 0xf3, 0x73, 0xcb, 0xf5, 0xa6, 0xae, 0xe9, 0xce, 0xa6, 0xde, 0x6c, 0x32, 0xfd, 0x68, 0x8d,
	0xed, 0x77, 0xb6, 0xf5, 0xb6, 0x5f, 0xc3, 0x04, 0x8e, 0xf6, 0xb1, 0x39, 0x76, 0xed, 0xb9, 0xd5,
	0x47, 0x78, 0x08, 0x4f, 0xf7, 0x89, 0x3d, 0xa9, 0x58, 0x1d, 0x3f, 0x03, 0xb2, 0xcf, 0x1c, 0x6b,
	0x7c, 0x31, 0xb7, 0x1c, 0x7b, 0xf2, 0xbe, 0xdf, 0xb8, 0x9f, 0x74, 0x2e, 0x5c, 0xd3, 0x2d, 0x58,
	0xf3, 0xec, 0xf4, 0xc7, 0x46, 0x41, 0xb7, 0x1b, 0x05, 0xfd, 0xd9, 0x28, 0xe8, 0x66, 0xab, 0xd4,
	0x6e, 0xb7, 0x4a, 0xed, 0xd7, 0x56, 0xa9, 0x7d, 0x1a, 0xfc, 0x7b, 0xf5, 0xdf, 0xee, 0xde, 0xbd,
	0xc8, 0x13, 0xc6, 0x17, 0x2d, 0xd9, 0xcc, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xcd,
	0x2a, 0xe7, 0x19, 0x03, 0x00, 0x00,
}

func (m *Wallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsageCount != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.UsageCount))
		i--
		dAtA[i] = 0x58
	}
	if m.LastUsed != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastUsed, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastUsed):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintWallet(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x52
	}
	if m.UpdatedAt != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.UpdatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintWallet(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedAt != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintWallet(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x42
	}
	if m.KeyVersion != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.KeyVersion))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWallet(dAtA []byte, offset int, v uint64) int {
	offset -= sovWallet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWallet(uint64(m.Status))
	}
	if m.KeyVersion != 0 {
		n += 1 + sovWallet(uint64(m.KeyVersion))
	}
	if m.CreatedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.LastUsed != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastUsed)
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.UsageCount != 0 {
		n += 1 + sovWallet(uint64(m.UsageCount))
	}
	return n
}

func sovWallet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWallet(x uint64) (n int) {
	return sovWallet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Wallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WalletStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyVersion", wireType)
			}
			m.KeyVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUsed == nil {
				m.LastUsed = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastUsed, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageCount", wireType)
			}
			m.UsageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWallet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWallet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWallet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWallet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWallet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWallet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWallet = fmt.Errorf("proto: unexpected end of group")
)
