// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/recovery.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecoveryStatus int32

const (
	RecoveryStatus_PENDING   RecoveryStatus = 0
	RecoveryStatus_COMPLETED RecoveryStatus = 1
	RecoveryStatus_FAILED    RecoveryStatus = 2
)

var RecoveryStatus_name = map[int32]string{
	0: "PENDING",
	1: "COMPLETED",
	2: "FAILED",
}

var RecoveryStatus_value = map[string]int32{
	"PENDING":   0,
	"COMPLETED": 1,
	"FAILED":    2,
}

func (x RecoveryStatus) String() string {
	return proto.EnumName(RecoveryStatus_name, int32(x))
}

func (RecoveryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7a4f73f4a14eb1f, []int{0}
}

type RecoveryInfo struct {
	Did             string         `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	RecoveryToken   string         `protobuf:"bytes,2,opt,name=recovery_token,json=recoveryToken,proto3" json:"recovery_token,omitempty"`
	RecoveryAddress string         `protobuf:"bytes,3,opt,name=recovery_address,json=recoveryAddress,proto3" json:"recovery_address,omitempty"`
	Status          RecoveryStatus `protobuf:"varint,4,opt,name=status,proto3,enum=selfchain.keyless.RecoveryStatus" json:"status,omitempty"`
	CreatedAt       int64          `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *RecoveryInfo) Reset()         { *m = RecoveryInfo{} }
func (m *RecoveryInfo) String() string { return proto.CompactTextString(m) }
func (*RecoveryInfo) ProtoMessage()    {}
func (*RecoveryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7a4f73f4a14eb1f, []int{0}
}
func (m *RecoveryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecoveryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecoveryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecoveryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoveryInfo.Merge(m, src)
}
func (m *RecoveryInfo) XXX_Size() int {
	return m.Size()
}
func (m *RecoveryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoveryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RecoveryInfo proto.InternalMessageInfo

func (m *RecoveryInfo) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *RecoveryInfo) GetRecoveryToken() string {
	if m != nil {
		return m.RecoveryToken
	}
	return ""
}

func (m *RecoveryInfo) GetRecoveryAddress() string {
	if m != nil {
		return m.RecoveryAddress
	}
	return ""
}

func (m *RecoveryInfo) GetStatus() RecoveryStatus {
	if m != nil {
		return m.Status
	}
	return RecoveryStatus_PENDING
}

func (m *RecoveryInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("selfchain.keyless.RecoveryStatus", RecoveryStatus_name, RecoveryStatus_value)
	proto.RegisterType((*RecoveryInfo)(nil), "selfchain.keyless.RecoveryInfo")
}

func init() { proto.RegisterFile("selfchain/keyless/recovery.proto", fileDescriptor_e7a4f73f4a14eb1f) }

var fileDescriptor_e7a4f73f4a14eb1f = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x4e, 0xcd, 0x49,
	0x4b, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0xcf, 0x4e, 0xad, 0xcc, 0x49, 0x2d, 0x2e, 0xd6, 0x2f, 0x4a,
	0x4d, 0xce, 0x2f, 0x4b, 0x2d, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x84, 0xab,
	0xd0, 0x83, 0xaa, 0x50, 0x3a, 0xc3, 0xc8, 0xc5, 0x13, 0x04, 0x55, 0xe5, 0x99, 0x97, 0x96, 0x2f,
	0x24, 0xc0, 0xc5, 0x9c, 0x92, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62, 0x0a,
	0xa9, 0x72, 0xf1, 0xc1, 0xcc, 0x89, 0x2f, 0xc9, 0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x02, 0x4b, 0xf2,
	0xc2, 0x44, 0x43, 0x40, 0x82, 0x42, 0x9a, 0x5c, 0x02, 0x70, 0x65, 0x89, 0x29, 0x29, 0x45, 0xa9,
	0xc5, 0xc5, 0x12, 0xcc, 0x60, 0x85, 0xfc, 0x30, 0x71, 0x47, 0x88, 0xb0, 0x90, 0x25, 0x17, 0x5b,
	0x71, 0x49, 0x62, 0x49, 0x69, 0xb1, 0x04, 0x8b, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0xa2, 0x1e, 0x86,
	0xc3, 0xf4, 0x60, 0x8e, 0x0a, 0x06, 0x2b, 0x0c, 0x82, 0x6a, 0x10, 0x92, 0xe5, 0xe2, 0x4a, 0x2e,
	0x4a, 0x4d, 0x2c, 0x49, 0x4d, 0x89, 0x4f, 0x2c, 0x91, 0x60, 0x55, 0x60, 0xd4, 0x60, 0x0e, 0xe2,
	0x84, 0x8a, 0x38, 0x96, 0x68, 0x59, 0x70, 0xf1, 0xa1, 0x6a, 0x14, 0xe2, 0xe6, 0x62, 0x0f, 0x70,
	0xf5, 0x73, 0xf1, 0xf4, 0x73, 0x17, 0x60, 0x10, 0xe2, 0xe5, 0xe2, 0x74, 0xf6, 0xf7, 0x0d, 0xf0,
	0x71, 0x0d, 0x71, 0x75, 0x11, 0x60, 0x14, 0xe2, 0xe2, 0x62, 0x73, 0x73, 0xf4, 0xf4, 0x71, 0x75,
	0x11, 0x60, 0x72, 0x32, 0x3e, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4,
	0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x49,
	0x44, 0xb8, 0x56, 0xc0, 0x43, 0xb6, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0x1c, 0xae, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x8a, 0xd6, 0xf6, 0x7b, 0x01, 0x00, 0x00,
}

func (m *RecoveryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoveryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecoveryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RecoveryAddress) > 0 {
		i -= len(m.RecoveryAddress)
		copy(dAtA[i:], m.RecoveryAddress)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.RecoveryAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecoveryToken) > 0 {
		i -= len(m.RecoveryToken)
		copy(dAtA[i:], m.RecoveryToken)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.RecoveryToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecovery(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecovery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecoveryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	l = len(m.RecoveryToken)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	l = len(m.RecoveryAddress)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRecovery(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovRecovery(uint64(m.CreatedAt))
	}
	return n
}

func sovRecovery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecovery(x uint64) (n int) {
	return sovRecovery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecoveryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoveryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoveryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoveryToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoveryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RecoveryStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecovery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecovery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecovery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecovery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecovery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecovery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecovery = fmt.Errorf("proto: unexpected end of group")
)
