// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/batch_sign.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BatchSignStatus represents the status of a batch signing operation
type BatchSignStatus int32

const (
	// Default unspecified status
	BatchSignStatus_BATCH_SIGN_STATUS_UNSPECIFIED BatchSignStatus = 0
	// Batch signing is in progress
	BatchSignStatus_BATCH_SIGN_STATUS_IN_PROGRESS BatchSignStatus = 1
	// Batch signing has completed successfully
	BatchSignStatus_BATCH_SIGN_STATUS_COMPLETED BatchSignStatus = 2
	// Batch signing has failed
	BatchSignStatus_BATCH_SIGN_STATUS_FAILED BatchSignStatus = 3
	// Batch signing has been cancelled
	BatchSignStatus_BATCH_SIGN_STATUS_CANCELLED BatchSignStatus = 4
)

var BatchSignStatus_name = map[int32]string{
	0: "BATCH_SIGN_STATUS_UNSPECIFIED",
	1: "BATCH_SIGN_STATUS_IN_PROGRESS",
	2: "BATCH_SIGN_STATUS_COMPLETED",
	3: "BATCH_SIGN_STATUS_FAILED",
	4: "BATCH_SIGN_STATUS_CANCELLED",
}

var BatchSignStatus_value = map[string]int32{
	"BATCH_SIGN_STATUS_UNSPECIFIED": 0,
	"BATCH_SIGN_STATUS_IN_PROGRESS": 1,
	"BATCH_SIGN_STATUS_COMPLETED":   2,
	"BATCH_SIGN_STATUS_FAILED":      3,
	"BATCH_SIGN_STATUS_CANCELLED":   4,
}

func (x BatchSignStatus) String() string {
	return proto.EnumName(BatchSignStatus_name, int32(x))
}

func (BatchSignStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_64e0acf83c0aaca3, []int{0}
}

// BatchSignStatusInfo represents the status information for a batch signing operation
type BatchSignStatusInfo struct {
	WalletAddress string          `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Messages      [][]byte        `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	Signatures    []string        `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Status        BatchSignStatus `protobuf:"varint,4,opt,name=status,proto3,enum=selfchain.keyless.BatchSignStatus" json:"status,omitempty"`
}

func (m *BatchSignStatusInfo) Reset()         { *m = BatchSignStatusInfo{} }
func (m *BatchSignStatusInfo) String() string { return proto.CompactTextString(m) }
func (*BatchSignStatusInfo) ProtoMessage()    {}
func (*BatchSignStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_64e0acf83c0aaca3, []int{0}
}
func (m *BatchSignStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchSignStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchSignStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchSignStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSignStatusInfo.Merge(m, src)
}
func (m *BatchSignStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *BatchSignStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSignStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSignStatusInfo proto.InternalMessageInfo

func (m *BatchSignStatusInfo) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *BatchSignStatusInfo) GetMessages() [][]byte {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *BatchSignStatusInfo) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *BatchSignStatusInfo) GetStatus() BatchSignStatus {
	if m != nil {
		return m.Status
	}
	return BatchSignStatus_BATCH_SIGN_STATUS_UNSPECIFIED
}

// MsgBatchSignRequest represents a request to sign multiple messages
type MsgBatchSignRequest struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	WalletAddress string   `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Messages      [][]byte `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	Parties       []string `protobuf:"bytes,4,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (m *MsgBatchSignRequest) Reset()         { *m = MsgBatchSignRequest{} }
func (m *MsgBatchSignRequest) String() string { return proto.CompactTextString(m) }
func (*MsgBatchSignRequest) ProtoMessage()    {}
func (*MsgBatchSignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64e0acf83c0aaca3, []int{1}
}
func (m *MsgBatchSignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchSignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchSignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchSignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchSignRequest.Merge(m, src)
}
func (m *MsgBatchSignRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchSignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchSignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchSignRequest proto.InternalMessageInfo

func (m *MsgBatchSignRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBatchSignRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *MsgBatchSignRequest) GetMessages() [][]byte {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *MsgBatchSignRequest) GetParties() []string {
	if m != nil {
		return m.Parties
	}
	return nil
}

// MsgBatchSignResponse represents the response to a batch sign request
type MsgBatchSignResponse struct {
}

func (m *MsgBatchSignResponse) Reset()         { *m = MsgBatchSignResponse{} }
func (m *MsgBatchSignResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBatchSignResponse) ProtoMessage()    {}
func (*MsgBatchSignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64e0acf83c0aaca3, []int{2}
}
func (m *MsgBatchSignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchSignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchSignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchSignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchSignResponse.Merge(m, src)
}
func (m *MsgBatchSignResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchSignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchSignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchSignResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("selfchain.keyless.BatchSignStatus", BatchSignStatus_name, BatchSignStatus_value)
	proto.RegisterType((*BatchSignStatusInfo)(nil), "selfchain.keyless.BatchSignStatusInfo")
	proto.RegisterType((*MsgBatchSignRequest)(nil), "selfchain.keyless.MsgBatchSignRequest")
	proto.RegisterType((*MsgBatchSignResponse)(nil), "selfchain.keyless.MsgBatchSignResponse")
}

func init() {
	proto.RegisterFile("selfchain/keyless/batch_sign.proto", fileDescriptor_64e0acf83c0aaca3)
}

var fileDescriptor_64e0acf83c0aaca3 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x6f, 0x94, 0x40,
	0x14, 0xc7, 0x99, 0xa5, 0x69, 0xed, 0xa4, 0x56, 0x9c, 0x1a, 0xc5, 0xaa, 0x88, 0x24, 0x26, 0xa4,
	0x07, 0x88, 0xf6, 0xd6, 0x1b, 0xcb, 0xd2, 0x4a, 0xb2, 0xa5, 0x1b, 0x86, 0x5e, 0xbc, 0x90, 0x29,
	0x9d, 0x52, 0x22, 0x0b, 0xc8, 0x9b, 0x55, 0x7b, 0xf5, 0x13, 0x78, 0xf6, 0x53, 0x78, 0x30, 0xf1,
	0x2b, 0x78, 0xec, 0xd1, 0xa3, 0xd9, 0x3d, 0xf8, 0x35, 0x0c, 0xdd, 0x5d, 0xd4, 0xdd, 0x9a, 0x9e,
	0xc8, 0x7b, 0xfc, 0xde, 0xbc, 0xdf, 0x3f, 0x79, 0xd8, 0x00, 0x9e, 0x9f, 0x25, 0xe7, 0x2c, 0x2b,
	0xec, 0x37, 0xfc, 0x22, 0xe7, 0x00, 0xf6, 0x09, 0x13, 0xc9, 0x79, 0x0c, 0x59, 0x5a, 0x58, 0x55,
	0x5d, 0x8a, 0x92, 0xdc, 0x6d, 0x19, 0x6b, 0xc6, 0x6c, 0x3f, 0x48, 0x4a, 0x18, 0x96, 0x60, 0x0f,
	0x21, 0xb5, 0xdf, 0xbd, 0x68, 0x3e, 0x53, 0xd6, 0xf8, 0x8a, 0xf0, 0x56, 0xb7, 0x79, 0x80, 0x66,
	0x69, 0x41, 0x05, 0x13, 0x23, 0xf0, 0x8b, 0xb3, 0x92, 0x3c, 0xc7, 0x9b, 0xef, 0x59, 0x9e, 0x73,
	0x11, 0xb3, 0xd3, 0xd3, 0x9a, 0x03, 0xa8, 0x48, 0x47, 0xe6, 0x7a, 0x78, 0x7b, 0xda, 0x75, 0xa6,
	0x4d, 0xb2, 0x8d, 0x6f, 0x0d, 0x39, 0x00, 0x4b, 0x39, 0xa8, 0x1d, 0x5d, 0x36, 0x37, 0xc2, 0xb6,
	0x26, 0x1a, 0xc6, 0x8d, 0x14, 0x13, 0xa3, 0x9a, 0x83, 0x2a, 0xeb, 0xb2, 0xb9, 0x1e, 0xfe, 0xd5,
	0x21, 0x7b, 0x78, 0x15, 0xae, 0x16, 0xaa, 0x2b, 0x3a, 0x32, 0x37, 0x5f, 0x1a, 0xd6, 0x92, 0xb7,
	0xb5, 0xa0, 0x16, 0xce, 0x26, 0x8c, 0xcf, 0x08, 0x6f, 0x1d, 0x42, 0xda, 0xfe, 0x0e, 0xf9, 0xdb,
	0x11, 0x07, 0x41, 0x54, 0xbc, 0x96, 0xd4, 0x9c, 0x89, 0xb2, 0x9e, 0xf9, 0xce, 0xcb, 0x6b, 0x02,
	0x75, 0x6e, 0x0a, 0x24, 0x2f, 0x04, 0x52, 0xf1, 0x5a, 0xc5, 0x6a, 0x91, 0xf1, 0xc6, 0xb8, 0x49,
	0x33, 0x2f, 0xf7, 0x36, 0x3e, 0xfe, 0xfa, 0xb2, 0x33, 0x5f, 0x65, 0xdc, 0xc7, 0xf7, 0xfe, 0x75,
	0x83, 0xaa, 0x2c, 0x80, 0xef, 0x7c, 0x43, 0xf8, 0xce, 0x42, 0x20, 0xf2, 0x0c, 0x3f, 0xe9, 0x3a,
	0x91, 0xfb, 0x2a, 0xa6, 0xfe, 0x41, 0x10, 0xd3, 0xc8, 0x89, 0x8e, 0x69, 0x7c, 0x1c, 0xd0, 0x81,
	0xe7, 0xfa, 0xfb, 0xbe, 0xd7, 0x53, 0xa4, 0xeb, 0x11, 0x3f, 0x88, 0x07, 0xe1, 0xd1, 0x41, 0xe8,
	0x51, 0xaa, 0x20, 0xf2, 0x14, 0x3f, 0x5a, 0x46, 0xdc, 0xa3, 0xc3, 0x41, 0xdf, 0x8b, 0xbc, 0x9e,
	0xd2, 0x21, 0x8f, 0xb1, 0xba, 0x0c, 0xec, 0x3b, 0x7e, 0xdf, 0xeb, 0x29, 0xf2, 0x7f, 0xc6, 0x9d,
	0xc0, 0xf5, 0xfa, 0x0d, 0xb0, 0xd2, 0xdd, 0xfd, 0x3e, 0xd6, 0xd0, 0xe5, 0x58, 0x43, 0x3f, 0xc7,
	0x1a, 0xfa, 0x34, 0xd1, 0xa4, 0xcb, 0x89, 0x26, 0xfd, 0x98, 0x68, 0xd2, 0xeb, 0x87, 0x7f, 0xee,
	0xf1, 0x43, 0x7b, 0x91, 0xe2, 0xa2, 0xe2, 0x70, 0xb2, 0x7a, 0x75, 0x61, 0xbb, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x26, 0x8d, 0xf7, 0x6d, 0xb3, 0x02, 0x00, 0x00,
}

func (m *BatchSignStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchSignStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchSignStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBatchSign(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintBatchSign(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintBatchSign(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintBatchSign(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBatchSignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchSignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchSignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parties[iNdEx])
			copy(dAtA[i:], m.Parties[iNdEx])
			i = encodeVarintBatchSign(dAtA, i, uint64(len(m.Parties[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintBatchSign(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintBatchSign(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBatchSign(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBatchSignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchSignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchSignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintBatchSign(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatchSign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BatchSignStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovBatchSign(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			l = len(b)
			n += 1 + l + sovBatchSign(uint64(l))
		}
	}
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 1 + l + sovBatchSign(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovBatchSign(uint64(m.Status))
	}
	return n
}

func (m *MsgBatchSignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBatchSign(uint64(l))
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovBatchSign(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			l = len(b)
			n += 1 + l + sovBatchSign(uint64(l))
		}
	}
	if len(m.Parties) > 0 {
		for _, s := range m.Parties {
			l = len(s)
			n += 1 + l + sovBatchSign(uint64(l))
		}
	}
	return n
}

func (m *MsgBatchSignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovBatchSign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBatchSign(x uint64) (n int) {
	return sovBatchSign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BatchSignStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatchSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchSignStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchSignStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchSign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatchSign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, make([]byte, postIndex-iNdEx))
			copy(m.Messages[len(m.Messages)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchSign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BatchSignStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatchSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatchSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchSignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatchSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchSignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchSignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchSign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchSign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatchSign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, make([]byte, postIndex-iNdEx))
			copy(m.Messages[len(m.Messages)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchSign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchSign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatchSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatchSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchSignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatchSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchSignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchSignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBatchSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatchSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatchSign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatchSign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatchSign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatchSign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBatchSign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBatchSign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBatchSign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatchSign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBatchSign = fmt.Errorf("proto: unexpected end of group")
)
