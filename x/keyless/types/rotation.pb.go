// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/rotation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// KeyRotation represents a key rotation operation for a wallet
type KeyRotation struct {
	WalletId    string     `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Version     uint64     `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	NewPubKey   string     `protobuf:"bytes,3,opt,name=new_pub_key,json=newPubKey,proto3" json:"new_pub_key,omitempty"`
	Status      string     `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt   *time.Time `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	CompletedAt *time.Time `protobuf:"bytes,6,opt,name=completed_at,json=completedAt,proto3,stdtime" json:"completed_at,omitempty"`
	Signature   string     `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *KeyRotation) Reset()         { *m = KeyRotation{} }
func (m *KeyRotation) String() string { return proto.CompactTextString(m) }
func (*KeyRotation) ProtoMessage()    {}
func (*KeyRotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82a5763159cea2e, []int{0}
}
func (m *KeyRotation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyRotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyRotation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyRotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyRotation.Merge(m, src)
}
func (m *KeyRotation) XXX_Size() int {
	return m.Size()
}
func (m *KeyRotation) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyRotation.DiscardUnknown(m)
}

var xxx_messageInfo_KeyRotation proto.InternalMessageInfo

func (m *KeyRotation) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *KeyRotation) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *KeyRotation) GetNewPubKey() string {
	if m != nil {
		return m.NewPubKey
	}
	return ""
}

func (m *KeyRotation) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *KeyRotation) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *KeyRotation) GetCompletedAt() *time.Time {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

func (m *KeyRotation) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterType((*KeyRotation)(nil), "selfchain.keyless.KeyRotation")
}

func init() { proto.RegisterFile("selfchain/keyless/rotation.proto", fileDescriptor_c82a5763159cea2e) }

var fileDescriptor_c82a5763159cea2e = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcf, 0x4e, 0xf2, 0x40,
	0x14, 0xc5, 0x19, 0x3e, 0x3e, 0xa0, 0x53, 0x37, 0x4e, 0x8c, 0x19, 0xd1, 0x0c, 0x8d, 0x2b, 0x56,
	0x6d, 0x22, 0x0f, 0x60, 0x60, 0x63, 0x0c, 0x1b, 0xd3, 0xb8, 0x72, 0xd3, 0x4c, 0xe1, 0x52, 0x1b,
	0x4a, 0xa7, 0xe9, 0xdc, 0x8a, 0x7d, 0x0b, 0x1e, 0xc2, 0x87, 0x61, 0xc9, 0xd2, 0x95, 0x1a, 0x78,
	0x11, 0x63, 0xff, 0xb9, 0x74, 0x37, 0xe7, 0xde, 0x73, 0xce, 0xfc, 0x92, 0x4b, 0x2d, 0x0d, 0xd1,
	0x72, 0xfe, 0x2c, 0xc3, 0xd8, 0x59, 0x41, 0x1e, 0x81, 0xd6, 0x4e, 0xaa, 0x50, 0x62, 0xa8, 0x62,
	0x3b, 0x49, 0x15, 0x2a, 0x76, 0xda, 0x38, 0xec, 0xca, 0x31, 0x38, 0x0b, 0x54, 0xa0, 0x8a, 0xad,
	0xf3, 0xf3, 0x2a, 0x8d, 0x83, 0x61, 0xa0, 0x54, 0x10, 0x81, 0x53, 0x28, 0x3f, 0x5b, 0x3a, 0x18,
	0xae, 0x41, 0xa3, 0x5c, 0x27, 0xa5, 0xe1, 0xfa, 0xad, 0x4d, 0xcd, 0x19, 0xe4, 0x6e, 0xd5, 0xcf,
	0x2e, 0xa9, 0xb1, 0x91, 0x51, 0x04, 0xe8, 0x85, 0x0b, 0x4e, 0x2c, 0x32, 0x32, 0xdc, 0x7e, 0x39,
	0xb8, 0x5f, 0x30, 0x4e, 0x7b, 0x2f, 0x90, 0xea, 0x50, 0xc5, 0xbc, 0x6d, 0x91, 0x51, 0xc7, 0xad,
	0x25, 0x13, 0xd4, 0x8c, 0x61, 0xe3, 0x25, 0x99, 0xef, 0xad, 0x20, 0xe7, 0xff, 0x8a, 0xa0, 0x11,
	0xc3, 0xe6, 0x21, 0xf3, 0x67, 0x90, 0xb3, 0x73, 0xda, 0xd5, 0x28, 0x31, 0xd3, 0xbc, 0x53, 0xac,
	0x2a, 0xc5, 0x6e, 0x29, 0x9d, 0xa7, 0x20, 0x11, 0x16, 0x9e, 0x44, 0xfe, 0xdf, 0x22, 0x23, 0xf3,
	0x66, 0x60, 0x97, 0xd0, 0x76, 0x0d, 0x6d, 0x3f, 0xd6, 0xd0, 0xd3, 0xce, 0xf6, 0x73, 0x48, 0x5c,
	0xa3, 0xca, 0x4c, 0x90, 0xdd, 0xd1, 0x93, 0xb9, 0x5a, 0x27, 0x11, 0x54, 0x15, 0xdd, 0x3f, 0x2b,
	0xfa, 0xbb, 0x8f, 0x21, 0x29, 0x6a, 0xcc, 0x26, 0x39, 0x41, 0x76, 0x45, 0x0d, 0x1d, 0x06, 0xb1,
	0xc4, 0x2c, 0x05, 0xde, 0x2b, 0xf9, 0x9b, 0xc1, 0x74, 0xbc, 0x3b, 0x08, 0xb2, 0x3f, 0x08, 0xf2,
	0x75, 0x10, 0x64, 0x7b, 0x14, 0xad, 0xfd, 0x51, 0xb4, 0xde, 0x8f, 0xa2, 0xf5, 0x74, 0xf1, 0x7b,
	0xac, 0xd7, 0xe6, 0x5c, 0x98, 0x27, 0xa0, 0xfd, 0x6e, 0xf1, 0xfb, 0xf8, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0xbb, 0xed, 0xec, 0x29, 0xd0, 0x01, 0x00, 0x00,
}

func (m *KeyRotation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyRotation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyRotation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintRotation(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CompletedAt != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CompletedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CompletedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintRotation(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintRotation(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintRotation(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewPubKey) > 0 {
		i -= len(m.NewPubKey)
		copy(dAtA[i:], m.NewPubKey)
		i = encodeVarintRotation(dAtA, i, uint64(len(m.NewPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Version != 0 {
		i = encodeVarintRotation(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WalletId) > 0 {
		i -= len(m.WalletId)
		copy(dAtA[i:], m.WalletId)
		i = encodeVarintRotation(dAtA, i, uint64(len(m.WalletId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRotation(dAtA []byte, offset int, v uint64) int {
	offset -= sovRotation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyRotation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletId)
	if l > 0 {
		n += 1 + l + sovRotation(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovRotation(uint64(m.Version))
	}
	l = len(m.NewPubKey)
	if l > 0 {
		n += 1 + l + sovRotation(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovRotation(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovRotation(uint64(l))
	}
	if m.CompletedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CompletedAt)
		n += 1 + l + sovRotation(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRotation(uint64(l))
	}
	return n
}

func sovRotation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRotation(x uint64) (n int) {
	return sovRotation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyRotation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRotation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyRotation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyRotation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRotation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRotation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRotation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRotation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRotation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRotation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRotation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRotation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRotation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRotation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRotation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRotation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRotation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRotation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRotation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRotation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CompletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRotation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRotation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRotation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRotation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRotation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRotation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRotation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRotation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRotation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRotation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRotation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRotation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRotation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRotation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRotation = fmt.Errorf("proto: unexpected end of group")
)
