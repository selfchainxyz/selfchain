// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Wallet limits
	MaxParties       uint32 `protobuf:"varint,1,opt,name=max_parties,json=maxParties,proto3" json:"max_parties,omitempty" yaml:"max_parties"`
	MaxThreshold     uint32 `protobuf:"varint,2,opt,name=max_threshold,json=maxThreshold,proto3" json:"max_threshold,omitempty" yaml:"max_threshold"`
	MaxSecurityLevel uint32 `protobuf:"varint,3,opt,name=max_security_level,json=maxSecurityLevel,proto3" json:"max_security_level,omitempty" yaml:"max_security_level"`
	MaxBatchSize     uint32 `protobuf:"varint,4,opt,name=max_batch_size,json=maxBatchSize,proto3" json:"max_batch_size,omitempty" yaml:"max_batch_size"`
	MaxMetadataSize  uint32 `protobuf:"varint,5,opt,name=max_metadata_size,json=maxMetadataSize,proto3" json:"max_metadata_size,omitempty" yaml:"max_metadata_size"`
	// Recovery settings
	MaxWalletsPerDid      uint32 `protobuf:"varint,6,opt,name=max_wallets_per_did,json=maxWalletsPerDid,proto3" json:"max_wallets_per_did,omitempty" yaml:"max_wallets_per_did"`
	MaxSharesPerWallet    uint32 `protobuf:"varint,7,opt,name=max_shares_per_wallet,json=maxSharesPerWallet,proto3" json:"max_shares_per_wallet,omitempty" yaml:"max_shares_per_wallet"`
	MinRecoveryThreshold  uint32 `protobuf:"varint,8,opt,name=min_recovery_threshold,json=minRecoveryThreshold,proto3" json:"min_recovery_threshold,omitempty" yaml:"min_recovery_threshold"`
	MaxRecoveryThreshold  uint32 `protobuf:"varint,9,opt,name=max_recovery_threshold,json=maxRecoveryThreshold,proto3" json:"max_recovery_threshold,omitempty" yaml:"max_recovery_threshold"`
	RecoveryWindowSeconds uint32 `protobuf:"varint,10,opt,name=recovery_window_seconds,json=recoveryWindowSeconds,proto3" json:"recovery_window_seconds,omitempty" yaml:"recovery_window_seconds"`
	MaxSigningAttempts    uint32 `protobuf:"varint,11,opt,name=max_signing_attempts,json=maxSigningAttempts,proto3" json:"max_signing_attempts,omitempty" yaml:"max_signing_attempts"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0ecc1f0b22d62f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxParties() uint32 {
	if m != nil {
		return m.MaxParties
	}
	return 0
}

func (m *Params) GetMaxThreshold() uint32 {
	if m != nil {
		return m.MaxThreshold
	}
	return 0
}

func (m *Params) GetMaxSecurityLevel() uint32 {
	if m != nil {
		return m.MaxSecurityLevel
	}
	return 0
}

func (m *Params) GetMaxBatchSize() uint32 {
	if m != nil {
		return m.MaxBatchSize
	}
	return 0
}

func (m *Params) GetMaxMetadataSize() uint32 {
	if m != nil {
		return m.MaxMetadataSize
	}
	return 0
}

func (m *Params) GetMaxWalletsPerDid() uint32 {
	if m != nil {
		return m.MaxWalletsPerDid
	}
	return 0
}

func (m *Params) GetMaxSharesPerWallet() uint32 {
	if m != nil {
		return m.MaxSharesPerWallet
	}
	return 0
}

func (m *Params) GetMinRecoveryThreshold() uint32 {
	if m != nil {
		return m.MinRecoveryThreshold
	}
	return 0
}

func (m *Params) GetMaxRecoveryThreshold() uint32 {
	if m != nil {
		return m.MaxRecoveryThreshold
	}
	return 0
}

func (m *Params) GetRecoveryWindowSeconds() uint32 {
	if m != nil {
		return m.RecoveryWindowSeconds
	}
	return 0
}

func (m *Params) GetMaxSigningAttempts() uint32 {
	if m != nil {
		return m.MaxSigningAttempts
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "selfchain.keyless.Params")
}

func init() { proto.RegisterFile("selfchain/keyless/params.proto", fileDescriptor_7a0ecc1f0b22d62f) }

var fileDescriptor_7a0ecc1f0b22d62f = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x5b, 0x18, 0x05, 0x3c, 0x06, 0xcc, 0x74, 0x23, 0x1d, 0x5b, 0x3c, 0x72, 0xe2, 0xb4,
	0x1e, 0x76, 0x40, 0x9a, 0x84, 0x10, 0x15, 0x07, 0x24, 0x98, 0x54, 0x52, 0xa4, 0x4a, 0xbb, 0x44,
	0x5e, 0xf3, 0xd1, 0x5a, 0xc4, 0x49, 0x64, 0x9b, 0x35, 0xd9, 0x53, 0x70, 0xe4, 0xc8, 0xe3, 0x70,
	0xdc, 0x91, 0x53, 0x84, 0xda, 0x37, 0xc8, 0x13, 0x20, 0xdb, 0x59, 0xd3, 0x75, 0xe5, 0x56, 0xff,
	0xff, 0xbf, 0xef, 0xa7, 0xf6, 0x73, 0x8d, 0x5c, 0x09, 0xd1, 0xd7, 0xd1, 0x84, 0xb2, 0xb8, 0xfb,
	0x0d, 0xf2, 0x08, 0xa4, 0xec, 0xa6, 0x54, 0x50, 0x2e, 0x8f, 0x52, 0x91, 0xa8, 0x04, 0x6f, 0x2f,
	0xfa, 0xa3, 0xaa, 0xdf, 0x6b, 0x8f, 0x93, 0x71, 0x62, 0xda, 0xae, 0xfe, 0x64, 0x41, 0x6f, 0xde,
	0x42, 0xad, 0xbe, 0x99, 0xc4, 0xaf, 0xd1, 0x26, 0xa7, 0x59, 0x90, 0x52, 0xa1, 0x18, 0x48, 0xa7,
	0x79, 0xd8, 0x7c, 0xb5, 0xd5, 0xdb, 0x2d, 0x0b, 0x82, 0x73, 0xca, 0xa3, 0x13, 0x6f, 0xa9, 0xf4,
	0x7c, 0xc4, 0x69, 0xd6, 0xb7, 0x07, 0xfc, 0x06, 0x6d, 0xe9, 0x4e, 0x4d, 0x04, 0xc8, 0x49, 0x12,
	0x85, 0xce, 0x1d, 0x33, 0xea, 0x94, 0x05, 0x69, 0xd7, 0xa3, 0x8b, 0xda, 0xf3, 0x1f, 0x71, 0x9a,
	0x7d, 0xb9, 0x3e, 0xe2, 0x8f, 0x08, 0xeb, 0x5e, 0xc2, 0xe8, 0xbb, 0x60, 0x2a, 0x0f, 0x22, 0xb8,
	0x80, 0xc8, 0xb9, 0x6b, 0x1c, 0x07, 0x65, 0x41, 0x3a, 0xb5, 0xe3, 0x26, 0xe3, 0xf9, 0x4f, 0x39,
	0xcd, 0x06, 0x55, 0xf6, 0x49, 0x47, 0xf8, 0x2d, 0x7a, 0xac, 0xc1, 0x73, 0xaa, 0x46, 0x93, 0x40,
	0xb2, 0x4b, 0x70, 0x36, 0x8c, 0xa8, 0x53, 0x16, 0x64, 0xa7, 0x16, 0xd5, 0xbd, 0xfd, 0x36, 0x3d,
	0x7d, 0x1e, 0xb0, 0x4b, 0xc0, 0x1f, 0xd0, 0xb6, 0x06, 0x38, 0x28, 0x1a, 0x52, 0x45, 0xad, 0xe3,
	0x9e, 0x71, 0xec, 0x97, 0x05, 0x71, 0x6a, 0xc7, 0x0d, 0xc4, 0xf3, 0x9f, 0x70, 0x9a, 0x9d, 0x56,
	0x91, 0x31, 0x9d, 0xa2, 0x67, 0x1a, 0x9b, 0xd2, 0x28, 0x02, 0x25, 0x83, 0x14, 0x44, 0x10, 0xb2,
	0xd0, 0x69, 0x19, 0x97, 0x5b, 0x16, 0x64, 0xaf, 0x76, 0xad, 0x40, 0xf6, 0x97, 0x0d, 0x6d, 0xd8,
	0x07, 0xf1, 0x9e, 0x85, 0x78, 0x80, 0x76, 0xcc, 0x0a, 0x26, 0x54, 0x80, 0x05, 0xed, 0x90, 0x73,
	0xdf, 0x08, 0x0f, 0xcb, 0x82, 0xec, 0x2f, 0x6d, 0x6a, 0x15, 0xf3, 0x7c, 0xbd, 0xe5, 0x81, 0x89,
	0xfb, 0x20, 0xac, 0x1b, 0x0f, 0xd1, 0x2e, 0x67, 0x71, 0x20, 0x60, 0x94, 0x5c, 0x80, 0xc8, 0x97,
	0xee, 0xf0, 0x81, 0xb1, 0xbe, 0x2c, 0x0b, 0x72, 0x50, 0x59, 0xd7, 0x72, 0x9e, 0xdf, 0xe6, 0x2c,
	0xf6, 0xab, 0xbc, 0xbe, 0x54, 0x2d, 0xa6, 0xd9, 0x3a, 0xf1, 0xc3, 0x5b, 0xe2, 0xb5, 0x9c, 0x16,
	0xd3, 0xec, 0xb6, 0xf8, 0x0c, 0x3d, 0x5f, 0xc0, 0x53, 0x16, 0x87, 0xc9, 0x54, 0xff, 0x2b, 0x92,
	0x38, 0x94, 0x0e, 0x32, 0x66, 0xaf, 0x2c, 0x88, 0x6b, 0xcd, 0xff, 0x01, 0x3d, 0x7f, 0xe7, 0xba,
	0x19, 0x9a, 0x62, 0x60, 0x73, 0xfc, 0x19, 0xb5, 0xcd, 0xee, 0xd8, 0x38, 0x66, 0xf1, 0x38, 0xa0,
	0x4a, 0x01, 0x4f, 0x95, 0x74, 0x36, 0x8d, 0x98, 0x94, 0x05, 0x79, 0xb1, 0xb4, 0xe1, 0x15, 0xaa,
	0x5a, 0xb0, 0x4d, 0xdf, 0x55, 0xe1, 0xc9, 0xc6, 0xcf, 0x5f, 0xa4, 0xd1, 0x3b, 0xfe, 0x3d, 0x73,
	0x9b, 0x57, 0x33, 0xb7, 0xf9, 0x77, 0xe6, 0x36, 0x7f, 0xcc, 0xdd, 0xc6, 0xd5, 0xdc, 0x6d, 0xfc,
	0x99, 0xbb, 0x8d, 0xb3, 0x4e, 0xfd, 0x90, 0xb3, 0xc5, 0x53, 0x56, 0x79, 0x0a, 0xf2, 0xbc, 0x65,
	0x5e, 0xe8, 0xf1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0xf3, 0x71, 0x71, 0xec, 0x03, 0x00,
	0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSigningAttempts != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSigningAttempts))
		i--
		dAtA[i] = 0x58
	}
	if m.RecoveryWindowSeconds != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RecoveryWindowSeconds))
		i--
		dAtA[i] = 0x50
	}
	if m.MaxRecoveryThreshold != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxRecoveryThreshold))
		i--
		dAtA[i] = 0x48
	}
	if m.MinRecoveryThreshold != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinRecoveryThreshold))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxSharesPerWallet != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSharesPerWallet))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxWalletsPerDid != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxWalletsPerDid))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxMetadataSize != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxMetadataSize))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxBatchSize != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxBatchSize))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxSecurityLevel != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSecurityLevel))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxThreshold != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxThreshold))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxParties != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxParties))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxParties != 0 {
		n += 1 + sovParams(uint64(m.MaxParties))
	}
	if m.MaxThreshold != 0 {
		n += 1 + sovParams(uint64(m.MaxThreshold))
	}
	if m.MaxSecurityLevel != 0 {
		n += 1 + sovParams(uint64(m.MaxSecurityLevel))
	}
	if m.MaxBatchSize != 0 {
		n += 1 + sovParams(uint64(m.MaxBatchSize))
	}
	if m.MaxMetadataSize != 0 {
		n += 1 + sovParams(uint64(m.MaxMetadataSize))
	}
	if m.MaxWalletsPerDid != 0 {
		n += 1 + sovParams(uint64(m.MaxWalletsPerDid))
	}
	if m.MaxSharesPerWallet != 0 {
		n += 1 + sovParams(uint64(m.MaxSharesPerWallet))
	}
	if m.MinRecoveryThreshold != 0 {
		n += 1 + sovParams(uint64(m.MinRecoveryThreshold))
	}
	if m.MaxRecoveryThreshold != 0 {
		n += 1 + sovParams(uint64(m.MaxRecoveryThreshold))
	}
	if m.RecoveryWindowSeconds != 0 {
		n += 1 + sovParams(uint64(m.RecoveryWindowSeconds))
	}
	if m.MaxSigningAttempts != 0 {
		n += 1 + sovParams(uint64(m.MaxSigningAttempts))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParties", wireType)
			}
			m.MaxParties = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxParties |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxThreshold", wireType)
			}
			m.MaxThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSecurityLevel", wireType)
			}
			m.MaxSecurityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSecurityLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBatchSize", wireType)
			}
			m.MaxBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBatchSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMetadataSize", wireType)
			}
			m.MaxMetadataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMetadataSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWalletsPerDid", wireType)
			}
			m.MaxWalletsPerDid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWalletsPerDid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSharesPerWallet", wireType)
			}
			m.MaxSharesPerWallet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSharesPerWallet |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRecoveryThreshold", wireType)
			}
			m.MinRecoveryThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinRecoveryThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecoveryThreshold", wireType)
			}
			m.MaxRecoveryThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRecoveryThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryWindowSeconds", wireType)
			}
			m.RecoveryWindowSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoveryWindowSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSigningAttempts", wireType)
			}
			m.MaxSigningAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSigningAttempts |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
