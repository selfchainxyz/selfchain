// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/network.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NetworkParams defines the parameters for network-specific signing operations
type NetworkParams struct {
	NetworkType      string         `protobuf:"bytes,1,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	ChainId          string         `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SigningAlgorithm string         `protobuf:"bytes,3,opt,name=signing_algorithm,json=signingAlgorithm,proto3" json:"signing_algorithm,omitempty"`
	CurveType        string         `protobuf:"bytes,4,opt,name=curve_type,json=curveType,proto3" json:"curve_type,omitempty"`
	AddressPrefix    string         `protobuf:"bytes,5,opt,name=address_prefix,json=addressPrefix,proto3" json:"address_prefix,omitempty"`
	CoinType         uint32         `protobuf:"varint,6,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	Decimals         uint32         `protobuf:"varint,7,opt,name=decimals,proto3" json:"decimals,omitempty"`
	SymbolName       string         `protobuf:"bytes,8,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	DisplayName      string         `protobuf:"bytes,9,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	SigningConfig    *SigningConfig `protobuf:"bytes,10,opt,name=signing_config,json=signingConfig,proto3" json:"signing_config,omitempty"`
}

func (m *NetworkParams) Reset()         { *m = NetworkParams{} }
func (m *NetworkParams) String() string { return proto.CompactTextString(m) }
func (*NetworkParams) ProtoMessage()    {}
func (*NetworkParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c830b3db207baaa, []int{0}
}
func (m *NetworkParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkParams.Merge(m, src)
}
func (m *NetworkParams) XXX_Size() int {
	return m.Size()
}
func (m *NetworkParams) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkParams.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkParams proto.InternalMessageInfo

func (m *NetworkParams) GetNetworkType() string {
	if m != nil {
		return m.NetworkType
	}
	return ""
}

func (m *NetworkParams) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *NetworkParams) GetSigningAlgorithm() string {
	if m != nil {
		return m.SigningAlgorithm
	}
	return ""
}

func (m *NetworkParams) GetCurveType() string {
	if m != nil {
		return m.CurveType
	}
	return ""
}

func (m *NetworkParams) GetAddressPrefix() string {
	if m != nil {
		return m.AddressPrefix
	}
	return ""
}

func (m *NetworkParams) GetCoinType() uint32 {
	if m != nil {
		return m.CoinType
	}
	return 0
}

func (m *NetworkParams) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *NetworkParams) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *NetworkParams) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NetworkParams) GetSigningConfig() *SigningConfig {
	if m != nil {
		return m.SigningConfig
	}
	return nil
}

// SigningConfig contains network-specific signing configuration
type SigningConfig struct {
	P2PkhPrefix   uint32 `protobuf:"varint,1,opt,name=p2pkh_prefix,json=p2pkhPrefix,proto3" json:"p2pkh_prefix,omitempty"`
	P2ShPrefix    uint32 `protobuf:"varint,2,opt,name=p2sh_prefix,json=p2shPrefix,proto3" json:"p2sh_prefix,omitempty"`
	Hrp           string `protobuf:"bytes,3,opt,name=hrp,proto3" json:"hrp,omitempty"`
	Base58Hasher  string `protobuf:"bytes,4,opt,name=base58_hasher,json=base58Hasher,proto3" json:"base58_hasher,omitempty"`
	ChainId       string `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	GasToken      string `protobuf:"bytes,6,opt,name=gas_token,json=gasToken,proto3" json:"gas_token,omitempty"`
	AddressPrefix string `protobuf:"bytes,7,opt,name=address_prefix,json=addressPrefix,proto3" json:"address_prefix,omitempty"`
	PubKeyPrefix  string `protobuf:"bytes,8,opt,name=pub_key_prefix,json=pubKeyPrefix,proto3" json:"pub_key_prefix,omitempty"`
}

func (m *SigningConfig) Reset()         { *m = SigningConfig{} }
func (m *SigningConfig) String() string { return proto.CompactTextString(m) }
func (*SigningConfig) ProtoMessage()    {}
func (*SigningConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c830b3db207baaa, []int{1}
}
func (m *SigningConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningConfig.Merge(m, src)
}
func (m *SigningConfig) XXX_Size() int {
	return m.Size()
}
func (m *SigningConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SigningConfig proto.InternalMessageInfo

func (m *SigningConfig) GetP2PkhPrefix() uint32 {
	if m != nil {
		return m.P2PkhPrefix
	}
	return 0
}

func (m *SigningConfig) GetP2ShPrefix() uint32 {
	if m != nil {
		return m.P2ShPrefix
	}
	return 0
}

func (m *SigningConfig) GetHrp() string {
	if m != nil {
		return m.Hrp
	}
	return ""
}

func (m *SigningConfig) GetBase58Hasher() string {
	if m != nil {
		return m.Base58Hasher
	}
	return ""
}

func (m *SigningConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SigningConfig) GetGasToken() string {
	if m != nil {
		return m.GasToken
	}
	return ""
}

func (m *SigningConfig) GetAddressPrefix() string {
	if m != nil {
		return m.AddressPrefix
	}
	return ""
}

func (m *SigningConfig) GetPubKeyPrefix() string {
	if m != nil {
		return m.PubKeyPrefix
	}
	return ""
}

// NetworkParty represents a network party
type NetworkParty struct {
	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address      string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey    string            `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	RegisteredAt *time.Time        `protobuf:"bytes,4,opt,name=registered_at,json=registeredAt,proto3,stdtime" json:"registered_at,omitempty"`
	Metadata     map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NetworkParty) Reset()         { *m = NetworkParty{} }
func (m *NetworkParty) String() string { return proto.CompactTextString(m) }
func (*NetworkParty) ProtoMessage()    {}
func (*NetworkParty) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c830b3db207baaa, []int{2}
}
func (m *NetworkParty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkParty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkParty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkParty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkParty.Merge(m, src)
}
func (m *NetworkParty) XXX_Size() int {
	return m.Size()
}
func (m *NetworkParty) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkParty.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkParty proto.InternalMessageInfo

func (m *NetworkParty) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkParty) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NetworkParty) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *NetworkParty) GetRegisteredAt() *time.Time {
	if m != nil {
		return m.RegisteredAt
	}
	return nil
}

func (m *NetworkParty) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// NetworkMessage represents a message between network parties
type NetworkMessage struct {
	Id       string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From     string            `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To       string            `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Data     []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	SentAt   *time.Time        `protobuf:"bytes,5,opt,name=sent_at,json=sentAt,proto3,stdtime" json:"sent_at,omitempty"`
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NetworkMessage) Reset()         { *m = NetworkMessage{} }
func (m *NetworkMessage) String() string { return proto.CompactTextString(m) }
func (*NetworkMessage) ProtoMessage()    {}
func (*NetworkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c830b3db207baaa, []int{3}
}
func (m *NetworkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkMessage.Merge(m, src)
}
func (m *NetworkMessage) XXX_Size() int {
	return m.Size()
}
func (m *NetworkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkMessage proto.InternalMessageInfo

func (m *NetworkMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *NetworkMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *NetworkMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NetworkMessage) GetSentAt() *time.Time {
	if m != nil {
		return m.SentAt
	}
	return nil
}

func (m *NetworkMessage) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkParams)(nil), "selfchain.keyless.NetworkParams")
	proto.RegisterType((*SigningConfig)(nil), "selfchain.keyless.SigningConfig")
	proto.RegisterType((*NetworkParty)(nil), "selfchain.keyless.NetworkParty")
	proto.RegisterMapType((map[string]string)(nil), "selfchain.keyless.NetworkParty.MetadataEntry")
	proto.RegisterType((*NetworkMessage)(nil), "selfchain.keyless.NetworkMessage")
	proto.RegisterMapType((map[string]string)(nil), "selfchain.keyless.NetworkMessage.MetadataEntry")
}

func init() { proto.RegisterFile("selfchain/keyless/network.proto", fileDescriptor_1c830b3db207baaa) }

var fileDescriptor_1c830b3db207baaa = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcd, 0x6e, 0xdb, 0x38,
	0x10, 0xc7, 0x23, 0x39, 0xfe, 0x1a, 0x5b, 0x46, 0x42, 0xe4, 0xa0, 0x38, 0x58, 0xdb, 0xeb, 0xdd,
	0x05, 0x0c, 0x2c, 0x56, 0x06, 0x1c, 0x2c, 0x90, 0xdd, 0x9e, 0x92, 0x22, 0x68, 0x83, 0x20, 0x41,
	0xe0, 0xe6, 0xd4, 0x8b, 0x40, 0x5b, 0xb4, 0x4c, 0x58, 0x12, 0x05, 0x91, 0x4e, 0xa3, 0x17, 0xe8,
	0xb5, 0x79, 0x81, 0x5e, 0xfb, 0x2c, 0x3d, 0xe6, 0xd8, 0x5b, 0x8b, 0xe4, 0x45, 0x0a, 0x7e, 0xc8,
	0x89, 0x91, 0x14, 0xe8, 0xa5, 0x37, 0xce, 0x9f, 0x3f, 0x72, 0x38, 0xff, 0x21, 0x09, 0x5d, 0x4e,
	0xa2, 0xd9, 0x74, 0x8e, 0x69, 0x32, 0x5c, 0x90, 0x3c, 0x22, 0x9c, 0x0f, 0x13, 0x22, 0xde, 0xb1,
	0x6c, 0xe1, 0xa5, 0x19, 0x13, 0x0c, 0x6d, 0xaf, 0x00, 0xcf, 0x00, 0xed, 0x9d, 0x90, 0x85, 0x4c,
	0xcd, 0x0e, 0xe5, 0x48, 0x83, 0xed, 0x6e, 0xc8, 0x58, 0x18, 0x91, 0xa1, 0x8a, 0x26, 0xcb, 0xd9,
	0x50, 0xd0, 0x98, 0x70, 0x81, 0xe3, 0x54, 0x03, 0xfd, 0xf7, 0x25, 0x70, 0xce, 0xf5, 0xde, 0x17,
	0x38, 0xc3, 0x31, 0x47, 0xbf, 0x43, 0xd3, 0x24, 0xf3, 0x45, 0x9e, 0x12, 0xd7, 0xea, 0x59, 0x83,
	0xfa, 0xb8, 0x61, 0xb4, 0xcb, 0x3c, 0x25, 0x68, 0x17, 0x6a, 0x2a, 0xb9, 0x4f, 0x03, 0xd7, 0x56,
	0xd3, 0x55, 0x15, 0x9f, 0x04, 0xe8, 0x6f, 0xd8, 0xe6, 0x34, 0x4c, 0x68, 0x12, 0xfa, 0x38, 0x0a,
	0x59, 0x46, 0xc5, 0x3c, 0x76, 0x4b, 0x8a, 0xd9, 0x32, 0x13, 0x87, 0x85, 0x8e, 0x7e, 0x03, 0x98,
	0x2e, 0xb3, 0x2b, 0xa2, 0x13, 0x6d, 0x2a, 0xaa, 0xae, 0x14, 0x95, 0xe6, 0x2f, 0x68, 0xe1, 0x20,
	0xc8, 0x08, 0xe7, 0x7e, 0x9a, 0x91, 0x19, 0xbd, 0x76, 0xcb, 0x0a, 0x71, 0x8c, 0x7a, 0xa1, 0x44,
	0xb4, 0x07, 0xf5, 0x29, 0xa3, 0x89, 0xde, 0xa4, 0xd2, 0xb3, 0x06, 0xce, 0xb8, 0x26, 0x05, 0xb5,
	0x47, 0x1b, 0x6a, 0x01, 0x99, 0xd2, 0x18, 0x47, 0xdc, 0xad, 0xea, 0xb9, 0x22, 0x46, 0x5d, 0x68,
	0xf0, 0x3c, 0x9e, 0xb0, 0xc8, 0x4f, 0x70, 0x4c, 0xdc, 0x9a, 0xda, 0x1c, 0xb4, 0x74, 0x8e, 0x63,
	0x22, 0xad, 0x08, 0x28, 0x4f, 0x23, 0x9c, 0x6b, 0xa2, 0xae, 0xad, 0x30, 0x9a, 0x42, 0x5e, 0x41,
	0xab, 0xa8, 0x77, 0xca, 0x92, 0x19, 0x0d, 0x5d, 0xe8, 0x59, 0x83, 0xc6, 0xa8, 0xe7, 0x3d, 0x69,
	0x91, 0xf7, 0x46, 0x83, 0x2f, 0x15, 0x37, 0x76, 0xf8, 0xe3, 0xb0, 0xff, 0xc1, 0x06, 0x67, 0x0d,
	0x90, 0xd9, 0xd3, 0x51, 0xba, 0x98, 0x17, 0xc5, 0x5b, 0xea, 0xf8, 0x0d, 0xa5, 0x99, 0xd2, 0xbb,
	0xd0, 0x48, 0x47, 0x7c, 0x45, 0xd8, 0x8a, 0x00, 0x29, 0x19, 0x60, 0x0b, 0x4a, 0xf3, 0x2c, 0x35,
	0x0d, 0x90, 0x43, 0xf4, 0x07, 0x38, 0x13, 0xcc, 0xc9, 0xbf, 0x07, 0xfe, 0x1c, 0xf3, 0x39, 0xc9,
	0x8c, 0xed, 0x4d, 0x2d, 0xbe, 0x56, 0xda, 0x5a, 0x83, 0xcb, 0xeb, 0x0d, 0xde, 0x83, 0x7a, 0x88,
	0xb9, 0x2f, 0xd8, 0x82, 0x24, 0xca, 0xed, 0xfa, 0xb8, 0x16, 0x62, 0x7e, 0x29, 0xe3, 0x67, 0x3a,
	0x56, 0x7d, 0xae, 0x63, 0x7f, 0x42, 0x2b, 0x5d, 0x4e, 0xfc, 0x05, 0xc9, 0x0b, 0x4c, 0x7b, 0xdf,
	0x4c, 0x97, 0x93, 0x53, 0x92, 0x6b, 0xaa, 0xff, 0xc9, 0x86, 0xe6, 0xc3, 0xd5, 0x14, 0x39, 0x6a,
	0x81, 0x4d, 0x03, 0x73, 0x1f, 0x6d, 0x1a, 0x20, 0x17, 0xaa, 0x66, 0xdf, 0xe2, 0x16, 0x9a, 0x50,
	0x5e, 0xac, 0x74, 0x39, 0x89, 0xe8, 0x54, 0xe6, 0x30, 0xd5, 0xd7, 0xb5, 0x72, 0x4a, 0x72, 0x74,
	0x0c, 0x4e, 0x46, 0x42, 0xca, 0x05, 0xc9, 0x48, 0xe0, 0x63, 0xa1, 0x3c, 0x68, 0x8c, 0xda, 0x9e,
	0x7e, 0x2d, 0x5e, 0xf1, 0x5a, 0xbc, 0xcb, 0xe2, 0xb5, 0x1c, 0x6d, 0xde, 0x7c, 0xed, 0x5a, 0xe3,
	0xe6, 0xc3, 0xb2, 0x43, 0x81, 0x4e, 0xa0, 0x16, 0x13, 0x81, 0x03, 0x2c, 0xb0, 0x5b, 0xee, 0x95,
	0x06, 0x8d, 0xd1, 0x3f, 0xcf, 0x74, 0xfd, 0x71, 0x09, 0xde, 0x99, 0xe1, 0x8f, 0x13, 0x91, 0xe5,
	0xe3, 0xd5, 0xf2, 0xf6, 0x0b, 0x70, 0xd6, 0xa6, 0x64, 0xe3, 0xe4, 0xd1, 0x75, 0xb1, 0x72, 0x88,
	0x76, 0xa0, 0x7c, 0x85, 0xa3, 0x25, 0x31, 0xb5, 0xea, 0xe0, 0x7f, 0xfb, 0xc0, 0xea, 0x7f, 0xb4,
	0xa1, 0x65, 0xb2, 0x9c, 0x11, 0xce, 0x71, 0x48, 0x9e, 0x58, 0x85, 0x60, 0x73, 0x96, 0xb1, 0xd8,
	0xac, 0x55, 0x63, 0xc9, 0x08, 0x66, 0xcc, 0xb1, 0x05, 0x93, 0x8c, 0x2a, 0x45, 0x9a, 0xd1, 0x1c,
	0xab, 0x31, 0xfa, 0x0f, 0xaa, 0x9c, 0x24, 0x42, 0x7a, 0x54, 0xfe, 0x49, 0x8f, 0x2a, 0x72, 0xc1,
	0xa1, 0x40, 0xa7, 0x8f, 0xdc, 0xa9, 0x28, 0x77, 0x86, 0x3f, 0x76, 0xc7, 0x9c, 0xfb, 0x97, 0xf8,
	0x73, 0xb4, 0xff, 0xf9, 0xae, 0x63, 0xdd, 0xde, 0x75, 0xac, 0x6f, 0x77, 0x1d, 0xeb, 0xe6, 0xbe,
	0xb3, 0x71, 0x7b, 0xdf, 0xd9, 0xf8, 0x72, 0xdf, 0xd9, 0x78, 0xbb, 0xfb, 0xf0, 0xd1, 0x5e, 0xaf,
	0xbe, 0x5a, 0xf9, 0x8f, 0xf0, 0x49, 0x45, 0x15, 0xb8, 0xff, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x93,
	0x35, 0xb0, 0xd2, 0x8c, 0x05, 0x00, 0x00,
}

func (m *NetworkParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SigningConfig != nil {
		{
			size, err := m.SigningConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SymbolName) > 0 {
		i -= len(m.SymbolName)
		copy(dAtA[i:], m.SymbolName)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.SymbolName)))
		i--
		dAtA[i] = 0x42
	}
	if m.Decimals != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x38
	}
	if m.CoinType != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AddressPrefix) > 0 {
		i -= len(m.AddressPrefix)
		copy(dAtA[i:], m.AddressPrefix)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.AddressPrefix)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CurveType) > 0 {
		i -= len(m.CurveType)
		copy(dAtA[i:], m.CurveType)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.CurveType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SigningAlgorithm) > 0 {
		i -= len(m.SigningAlgorithm)
		copy(dAtA[i:], m.SigningAlgorithm)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.SigningAlgorithm)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkType) > 0 {
		i -= len(m.NetworkType)
		copy(dAtA[i:], m.NetworkType)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.NetworkType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKeyPrefix) > 0 {
		i -= len(m.PubKeyPrefix)
		copy(dAtA[i:], m.PubKeyPrefix)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.PubKeyPrefix)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AddressPrefix) > 0 {
		i -= len(m.AddressPrefix)
		copy(dAtA[i:], m.AddressPrefix)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.AddressPrefix)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GasToken) > 0 {
		i -= len(m.GasToken)
		copy(dAtA[i:], m.GasToken)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.GasToken)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Base58Hasher) > 0 {
		i -= len(m.Base58Hasher)
		copy(dAtA[i:], m.Base58Hasher)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Base58Hasher)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hrp) > 0 {
		i -= len(m.Hrp)
		copy(dAtA[i:], m.Hrp)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Hrp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.P2ShPrefix != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.P2ShPrefix))
		i--
		dAtA[i] = 0x10
	}
	if m.P2PkhPrefix != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.P2PkhPrefix))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkParty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkParty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkParty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintNetwork(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNetwork(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNetwork(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RegisteredAt != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.RegisteredAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.RegisteredAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintNetwork(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintNetwork(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNetwork(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNetwork(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SentAt != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.SentAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.SentAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintNetwork(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkType)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.SigningAlgorithm)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.CurveType)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.AddressPrefix)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovNetwork(uint64(m.CoinType))
	}
	if m.Decimals != 0 {
		n += 1 + sovNetwork(uint64(m.Decimals))
	}
	l = len(m.SymbolName)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.SigningConfig != nil {
		l = m.SigningConfig.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *SigningConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.P2PkhPrefix != 0 {
		n += 1 + sovNetwork(uint64(m.P2PkhPrefix))
	}
	if m.P2ShPrefix != 0 {
		n += 1 + sovNetwork(uint64(m.P2ShPrefix))
	}
	l = len(m.Hrp)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Base58Hasher)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.GasToken)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.AddressPrefix)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.PubKeyPrefix)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *NetworkParty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.RegisteredAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.RegisteredAt)
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNetwork(uint64(len(k))) + 1 + len(v) + sovNetwork(uint64(len(v)))
			n += mapEntrySize + 1 + sovNetwork(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NetworkMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.SentAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.SentAt)
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNetwork(uint64(len(k))) + 1 + len(v) + sovNetwork(uint64(len(v)))
			n += mapEntrySize + 1 + sovNetwork(uint64(mapEntrySize))
		}
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurveType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurveType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SigningConfig == nil {
				m.SigningConfig = &SigningConfig{}
			}
			if err := m.SigningConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2PkhPrefix", wireType)
			}
			m.P2PkhPrefix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.P2PkhPrefix |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2ShPrefix", wireType)
			}
			m.P2ShPrefix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.P2ShPrefix |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hrp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hrp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base58Hasher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base58Hasher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeyPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeyPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkParty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkParty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkParty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisteredAt == nil {
				m.RegisteredAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.RegisteredAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetwork
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNetwork
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNetwork
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetwork
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNetwork
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthNetwork
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNetwork(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNetwork
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SentAt == nil {
				m.SentAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.SentAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetwork
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNetwork
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNetwork
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetwork
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNetwork
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthNetwork
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNetwork(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNetwork
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetwork = fmt.Errorf("proto: unexpected end of group")
)
