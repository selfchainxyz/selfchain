// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/signing.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SigningStatus represents the status of a signing operation
type SigningStatus int32

const (
	// Default unspecified status
	SigningStatus_SIGNING_STATUS_UNSPECIFIED SigningStatus = 0
	// Signing is in progress
	SigningStatus_SIGNING_STATUS_IN_PROGRESS SigningStatus = 1
	// Signing has completed successfully
	SigningStatus_SIGNING_STATUS_COMPLETED SigningStatus = 2
	// Signing has failed
	SigningStatus_SIGNING_STATUS_FAILED SigningStatus = 3
	// Signing has been cancelled
	SigningStatus_SIGNING_STATUS_CANCELLED SigningStatus = 4
)

var SigningStatus_name = map[int32]string{
	0: "SIGNING_STATUS_UNSPECIFIED",
	1: "SIGNING_STATUS_IN_PROGRESS",
	2: "SIGNING_STATUS_COMPLETED",
	3: "SIGNING_STATUS_FAILED",
	4: "SIGNING_STATUS_CANCELLED",
}

var SigningStatus_value = map[string]int32{
	"SIGNING_STATUS_UNSPECIFIED": 0,
	"SIGNING_STATUS_IN_PROGRESS": 1,
	"SIGNING_STATUS_COMPLETED":   2,
	"SIGNING_STATUS_FAILED":      3,
	"SIGNING_STATUS_CANCELLED":   4,
}

func (x SigningStatus) String() string {
	return proto.EnumName(SigningStatus_name, int32(x))
}

func (SigningStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e905cf789c28ada5, []int{0}
}

// SigningInput represents the input data for TSS signing
type SigningInput struct {
	Message    []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	PartyShare []byte `protobuf:"bytes,2,opt,name=party_share,json=partyShare,proto3" json:"party_share,omitempty" json:"party_share"`
	PublicKey  []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" json:"public_key"`
	KeyVersion uint32 `protobuf:"varint,4,opt,name=key_version,json=keyVersion,proto3" json:"key_version,omitempty" json:"key_version"`
	WalletId   string `protobuf:"bytes,5,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty" json:"wallet_id"`
	ChainId    string `protobuf:"bytes,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" json:"chain_id"`
}

func (m *SigningInput) Reset()         { *m = SigningInput{} }
func (m *SigningInput) String() string { return proto.CompactTextString(m) }
func (*SigningInput) ProtoMessage()    {}
func (*SigningInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_e905cf789c28ada5, []int{0}
}
func (m *SigningInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningInput.Merge(m, src)
}
func (m *SigningInput) XXX_Size() int {
	return m.Size()
}
func (m *SigningInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningInput.DiscardUnknown(m)
}

var xxx_messageInfo_SigningInput proto.InternalMessageInfo

func (m *SigningInput) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SigningInput) GetPartyShare() []byte {
	if m != nil {
		return m.PartyShare
	}
	return nil
}

func (m *SigningInput) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SigningInput) GetKeyVersion() uint32 {
	if m != nil {
		return m.KeyVersion
	}
	return 0
}

func (m *SigningInput) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *SigningInput) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// SigningOutput represents the output from TSS signing
type SigningOutput struct {
	Signature  []byte    `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	PublicKey  []byte    `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" json:"public_key"`
	SignedAt   time.Time `protobuf:"bytes,3,opt,name=signed_at,json=signedAt,proto3,stdtime" json:"signed_at" json:"signed_at"`
	KeyVersion uint32    `protobuf:"varint,4,opt,name=key_version,json=keyVersion,proto3" json:"key_version,omitempty" json:"key_version"`
}

func (m *SigningOutput) Reset()         { *m = SigningOutput{} }
func (m *SigningOutput) String() string { return proto.CompactTextString(m) }
func (*SigningOutput) ProtoMessage()    {}
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_e905cf789c28ada5, []int{1}
}
func (m *SigningOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningOutput.Merge(m, src)
}
func (m *SigningOutput) XXX_Size() int {
	return m.Size()
}
func (m *SigningOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SigningOutput proto.InternalMessageInfo

func (m *SigningOutput) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SigningOutput) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SigningOutput) GetSignedAt() time.Time {
	if m != nil {
		return m.SignedAt
	}
	return time.Time{}
}

func (m *SigningOutput) GetKeyVersion() uint32 {
	if m != nil {
		return m.KeyVersion
	}
	return 0
}

// SigningSession represents an active signing session
type SigningSession struct {
	SessionId string        `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" json:"session_id"`
	WalletId  string        `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty" json:"wallet_id"`
	Message   []byte        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Status    SigningStatus `protobuf:"varint,4,opt,name=status,proto3,enum=selfchain.keyless.SigningStatus" json:"status,omitempty"`
	Parties   []string      `protobuf:"bytes,5,rep,name=parties,proto3" json:"parties,omitempty"`
	CreatedAt time.Time     `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at" json:"created_at"`
	UpdatedAt time.Time     `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at" json:"updated_at"`
}

func (m *SigningSession) Reset()         { *m = SigningSession{} }
func (m *SigningSession) String() string { return proto.CompactTextString(m) }
func (*SigningSession) ProtoMessage()    {}
func (*SigningSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_e905cf789c28ada5, []int{2}
}
func (m *SigningSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningSession.Merge(m, src)
}
func (m *SigningSession) XXX_Size() int {
	return m.Size()
}
func (m *SigningSession) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningSession.DiscardUnknown(m)
}

var xxx_messageInfo_SigningSession proto.InternalMessageInfo

func (m *SigningSession) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SigningSession) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *SigningSession) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SigningSession) GetStatus() SigningStatus {
	if m != nil {
		return m.Status
	}
	return SigningStatus_SIGNING_STATUS_UNSPECIFIED
}

func (m *SigningSession) GetParties() []string {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *SigningSession) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *SigningSession) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("selfchain.keyless.SigningStatus", SigningStatus_name, SigningStatus_value)
	proto.RegisterType((*SigningInput)(nil), "selfchain.keyless.SigningInput")
	proto.RegisterType((*SigningOutput)(nil), "selfchain.keyless.SigningOutput")
	proto.RegisterType((*SigningSession)(nil), "selfchain.keyless.SigningSession")
}

func init() { proto.RegisterFile("selfchain/keyless/signing.proto", fileDescriptor_e905cf789c28ada5) }

var fileDescriptor_e905cf789c28ada5 = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0x8e, 0x13, 0x08, 0x78, 0xf9, 0x69, 0x70, 0xa1, 0x32, 0x11, 0xb5, 0x23, 0x9f, 0xa2, 0x1e,
	0x1c, 0x15, 0x90, 0x5a, 0xf5, 0x96, 0x80, 0x41, 0x56, 0x69, 0x40, 0xeb, 0x50, 0x55, 0xbd, 0x58,
	0x86, 0x2c, 0xc6, 0x8d, 0xb1, 0x2d, 0xef, 0xba, 0xad, 0xdf, 0x82, 0x7b, 0xef, 0x7d, 0x81, 0xbe,
	0x04, 0x47, 0x8e, 0x3d, 0xa5, 0x15, 0xbc, 0x41, 0xfa, 0x02, 0xd5, 0xee, 0xda, 0x71, 0x48, 0x91,
	0x4a, 0x7b, 0x9b, 0x6f, 0xbf, 0xf9, 0x66, 0x3d, 0xdf, 0x8c, 0x17, 0xa8, 0x18, 0xf9, 0x67, 0xa7,
	0xe7, 0x8e, 0x17, 0xb4, 0x06, 0x28, 0xf5, 0x11, 0xc6, 0x2d, 0xec, 0xb9, 0x81, 0x17, 0xb8, 0x7a,
	0x14, 0x87, 0x24, 0x94, 0x56, 0xc6, 0x09, 0x7a, 0x96, 0x50, 0x5f, 0x75, 0x43, 0x37, 0x64, 0x6c,
	0x8b, 0x46, 0x3c, 0xb1, 0xae, 0xba, 0x61, 0xe8, 0xfa, 0xa8, 0xc5, 0xd0, 0x49, 0x72, 0xd6, 0x22,
	0xde, 0x05, 0xc2, 0xc4, 0xb9, 0x88, 0x78, 0x82, 0xf6, 0xad, 0x0c, 0x16, 0x2d, 0x5e, 0xdb, 0x0c,
	0xa2, 0x84, 0x48, 0x32, 0x98, 0xbb, 0x40, 0x18, 0x3b, 0x2e, 0x92, 0x85, 0x86, 0xd0, 0x5c, 0x84,
	0x39, 0x94, 0x5e, 0x80, 0x85, 0xc8, 0x89, 0x49, 0x6a, 0xe3, 0x73, 0x27, 0x46, 0x72, 0x99, 0xb2,
	0x9d, 0x27, 0xa3, 0xa1, 0x2a, 0x7d, 0xc0, 0x61, 0xf0, 0x4a, 0x9b, 0x20, 0x35, 0x08, 0x18, 0xb2,
	0x28, 0x90, 0xb6, 0x01, 0x88, 0x92, 0x13, 0xdf, 0x3b, 0xb5, 0x07, 0x28, 0x95, 0x2b, 0x4c, 0xb7,
	0x36, 0x1a, 0xaa, 0x2b, 0x99, 0x6e, 0xcc, 0x69, 0x50, 0xe4, 0xe0, 0x35, 0x4a, 0xe9, 0x75, 0x03,
	0x94, 0xda, 0x1f, 0x51, 0x8c, 0xbd, 0x30, 0x90, 0x67, 0x1a, 0x42, 0x73, 0x69, 0xf2, 0xba, 0x09,
	0x52, 0x83, 0x60, 0x80, 0xd2, 0xb7, 0x1c, 0x48, 0xcf, 0x81, 0xf8, 0xc9, 0xf1, 0x7d, 0x44, 0x6c,
	0xaf, 0x2f, 0xcf, 0x36, 0x84, 0xa6, 0xd8, 0x59, 0x1d, 0x0d, 0xd5, 0x1a, 0x97, 0x8d, 0x29, 0x0d,
	0xce, 0xf3, 0xd8, 0xec, 0x4b, 0x3a, 0x98, 0x67, 0x6e, 0x52, 0x45, 0x95, 0x29, 0x1e, 0x8f, 0x86,
	0xea, 0x23, 0xae, 0xc8, 0x19, 0x0d, 0xce, 0xb1, 0xd0, 0xec, 0x6b, 0xbf, 0x04, 0xb0, 0x94, 0xb9,
	0x76, 0x98, 0x10, 0x6a, 0xdb, 0x06, 0x10, 0xe9, 0x88, 0x1c, 0x92, 0xc4, 0xb9, 0x71, 0xc5, 0xc1,
	0x94, 0x03, 0xe5, 0x07, 0x3a, 0x70, 0xcc, 0x6b, 0xa2, 0xbe, 0xed, 0x10, 0x66, 0xdb, 0xc2, 0x66,
	0x5d, 0xe7, 0x03, 0xd5, 0xf3, 0x81, 0xea, 0xbd, 0x7c, 0xa0, 0x9d, 0x8d, 0xab, 0xa1, 0x5a, 0x2a,
	0x1a, 0x1d, 0x4b, 0xb5, 0xcb, 0x1f, 0xaa, 0x00, 0xe7, 0x39, 0x6e, 0x93, 0xff, 0x36, 0x56, 0xfb,
	0x52, 0x01, 0xcb, 0x59, 0xd7, 0x16, 0xc2, 0xcc, 0xeb, 0x6d, 0x00, 0x30, 0x0f, 0xa9, 0x75, 0x02,
	0xb3, 0x6e, 0xa2, 0xb1, 0x82, 0xd3, 0xa0, 0x98, 0x01, 0xb3, 0x7f, 0x77, 0x42, 0xe5, 0x07, 0x4d,
	0x68, 0x62, 0x2d, 0x2b, 0x77, 0xd7, 0xf2, 0x25, 0xa8, 0x62, 0xe2, 0x90, 0x04, 0xb3, 0x4e, 0x96,
	0x37, 0x1b, 0xfa, 0x1f, 0x3f, 0x87, 0x9e, 0x7f, 0x35, 0xcb, 0x83, 0x59, 0x3e, 0xad, 0x49, 0xb7,
	0xd4, 0x43, 0x58, 0x9e, 0x6d, 0x54, 0x9a, 0x22, 0xcc, 0xa1, 0xf4, 0x0e, 0x80, 0xd3, 0x18, 0x39,
	0x84, 0x5b, 0x5f, 0xfd, 0xab, 0xf5, 0x4f, 0x33, 0xeb, 0xb3, 0xb6, 0x0b, 0x2d, 0xf7, 0x5e, 0xcc,
	0x0e, 0xda, 0x84, 0x56, 0x4e, 0xa2, 0x7e, 0x5e, 0x79, 0xee, 0x5f, 0x2b, 0x17, 0xda, 0xac, 0x72,
	0x76, 0xd0, 0x26, 0xcf, 0xbe, 0x16, 0x3b, 0xc9, 0xfb, 0x94, 0x14, 0x50, 0xb7, 0xcc, 0xfd, 0xae,
	0xd9, 0xdd, 0xb7, 0xad, 0x5e, 0xbb, 0x77, 0x6c, 0xd9, 0xc7, 0x5d, 0xeb, 0xc8, 0xd8, 0x31, 0xf7,
	0x4c, 0x63, 0xb7, 0x56, 0xba, 0x87, 0x37, 0xbb, 0xf6, 0x11, 0x3c, 0xdc, 0x87, 0x86, 0x65, 0xd5,
	0x04, 0x69, 0x03, 0xc8, 0x53, 0xfc, 0xce, 0xe1, 0x9b, 0xa3, 0x03, 0xa3, 0x67, 0xec, 0xd6, 0xca,
	0xd2, 0x3a, 0x58, 0x9b, 0x62, 0xf7, 0xda, 0xe6, 0x81, 0xb1, 0x5b, 0xab, 0xdc, 0x27, 0x6c, 0x77,
	0x77, 0x8c, 0x03, 0xca, 0xce, 0x74, 0xb6, 0xae, 0x6e, 0x14, 0xe1, 0xfa, 0x46, 0x11, 0x7e, 0xde,
	0x28, 0xc2, 0xe5, 0xad, 0x52, 0xba, 0xbe, 0x55, 0x4a, 0xdf, 0x6f, 0x95, 0xd2, 0xfb, 0xf5, 0xe2,
	0xdd, 0xfb, 0x3c, 0x7e, 0xf9, 0x48, 0x1a, 0x21, 0x7c, 0x52, 0x65, 0xde, 0x6c, 0xfd, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x1b, 0xf9, 0xb7, 0x29, 0x1b, 0x05, 0x00, 0x00,
}

func (m *SigningInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.WalletId) > 0 {
		i -= len(m.WalletId)
		copy(dAtA[i:], m.WalletId)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.WalletId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.KeyVersion != 0 {
		i = encodeVarintSigning(dAtA, i, uint64(m.KeyVersion))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PartyShare) > 0 {
		i -= len(m.PartyShare)
		copy(dAtA[i:], m.PartyShare)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.PartyShare)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyVersion != 0 {
		i = encodeVarintSigning(dAtA, i, uint64(m.KeyVersion))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.SignedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SignedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSigning(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintSigning(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x3a
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintSigning(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parties[iNdEx])
			copy(dAtA[i:], m.Parties[iNdEx])
			i = encodeVarintSigning(dAtA, i, uint64(len(m.Parties[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintSigning(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WalletId) > 0 {
		i -= len(m.WalletId)
		copy(dAtA[i:], m.WalletId)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.WalletId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSigning(dAtA []byte, offset int, v uint64) int {
	offset -= sovSigning(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SigningInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	l = len(m.PartyShare)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	if m.KeyVersion != 0 {
		n += 1 + sovSigning(uint64(m.KeyVersion))
	}
	l = len(m.WalletId)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	return n
}

func (m *SigningOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SignedAt)
	n += 1 + l + sovSigning(uint64(l))
	if m.KeyVersion != 0 {
		n += 1 + sovSigning(uint64(m.KeyVersion))
	}
	return n
}

func (m *SigningSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	l = len(m.WalletId)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSigning(uint64(m.Status))
	}
	if len(m.Parties) > 0 {
		for _, s := range m.Parties {
			l = len(s)
			n += 1 + l + sovSigning(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovSigning(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovSigning(uint64(l))
	return n
}

func sovSigning(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSigning(x uint64) (n int) {
	return sovSigning(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigningInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyShare = append(m.PartyShare[:0], dAtA[iNdEx:postIndex]...)
			if m.PartyShare == nil {
				m.PartyShare = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyVersion", wireType)
			}
			m.KeyVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.SignedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyVersion", wireType)
			}
			m.KeyVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSigning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SigningStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSigning(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSigning
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSigning
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSigning
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSigning
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSigning        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSigning          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSigning = fmt.Errorf("proto: unexpected end of group")
)
