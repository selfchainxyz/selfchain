// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/keygen.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SecurityLevel defines the security requirements
type SecurityLevel int32

const (
	SecurityLevel_SECURITY_LEVEL_UNSPECIFIED SecurityLevel = 0
	SecurityLevel_SECURITY_LEVEL_STANDARD    SecurityLevel = 1
	SecurityLevel_SECURITY_LEVEL_HIGH        SecurityLevel = 2
	SecurityLevel_SECURITY_LEVEL_ENTERPRISE  SecurityLevel = 3
)

var SecurityLevel_name = map[int32]string{
	0: "SECURITY_LEVEL_UNSPECIFIED",
	1: "SECURITY_LEVEL_STANDARD",
	2: "SECURITY_LEVEL_HIGH",
	3: "SECURITY_LEVEL_ENTERPRISE",
}

var SecurityLevel_value = map[string]int32{
	"SECURITY_LEVEL_UNSPECIFIED": 0,
	"SECURITY_LEVEL_STANDARD":    1,
	"SECURITY_LEVEL_HIGH":        2,
	"SECURITY_LEVEL_ENTERPRISE":  3,
}

func (x SecurityLevel) String() string {
	return proto.EnumName(SecurityLevel_name, int32(x))
}

func (SecurityLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_855858f207a4fe63, []int{0}
}

// BackupStatus represents the current backup state of key shares
type BackupStatus int32

const (
	BackupStatus_BACKUP_STATUS_UNSPECIFIED BackupStatus = 0
	BackupStatus_BACKUP_STATUS_NONE        BackupStatus = 1
	BackupStatus_BACKUP_STATUS_PENDING     BackupStatus = 2
	BackupStatus_BACKUP_STATUS_COMPLETED   BackupStatus = 3
	BackupStatus_BACKUP_STATUS_FAILED      BackupStatus = 4
)

var BackupStatus_name = map[int32]string{
	0: "BACKUP_STATUS_UNSPECIFIED",
	1: "BACKUP_STATUS_NONE",
	2: "BACKUP_STATUS_PENDING",
	3: "BACKUP_STATUS_COMPLETED",
	4: "BACKUP_STATUS_FAILED",
}

var BackupStatus_value = map[string]int32{
	"BACKUP_STATUS_UNSPECIFIED": 0,
	"BACKUP_STATUS_NONE":        1,
	"BACKUP_STATUS_PENDING":     2,
	"BACKUP_STATUS_COMPLETED":   3,
	"BACKUP_STATUS_FAILED":      4,
}

func (x BackupStatus) String() string {
	return proto.EnumName(BackupStatus_name, int32(x))
}

func (BackupStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_855858f207a4fe63, []int{1}
}

// KeyMetadata tracks key status and usage
type KeyMetadata struct {
	CreatedAt     time.Time     `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	LastRotated   time.Time     `protobuf:"bytes,2,opt,name=last_rotated,json=lastRotated,proto3,stdtime" json:"last_rotated"`
	LastUsed      time.Time     `protobuf:"bytes,3,opt,name=last_used,json=lastUsed,proto3,stdtime" json:"last_used"`
	UsageCount    uint64        `protobuf:"varint,4,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
	BackupStatus  BackupStatus  `protobuf:"varint,5,opt,name=backup_status,json=backupStatus,proto3,enum=selfchain.keyless.BackupStatus" json:"backup_status,omitempty"`
	SecurityLevel SecurityLevel `protobuf:"varint,6,opt,name=security_level,json=securityLevel,proto3,enum=selfchain.keyless.SecurityLevel" json:"security_level,omitempty"`
}

func (m *KeyMetadata) Reset()         { *m = KeyMetadata{} }
func (m *KeyMetadata) String() string { return proto.CompactTextString(m) }
func (*KeyMetadata) ProtoMessage()    {}
func (*KeyMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_855858f207a4fe63, []int{0}
}
func (m *KeyMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyMetadata.Merge(m, src)
}
func (m *KeyMetadata) XXX_Size() int {
	return m.Size()
}
func (m *KeyMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_KeyMetadata proto.InternalMessageInfo

func (m *KeyMetadata) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *KeyMetadata) GetLastRotated() time.Time {
	if m != nil {
		return m.LastRotated
	}
	return time.Time{}
}

func (m *KeyMetadata) GetLastUsed() time.Time {
	if m != nil {
		return m.LastUsed
	}
	return time.Time{}
}

func (m *KeyMetadata) GetUsageCount() uint64 {
	if m != nil {
		return m.UsageCount
	}
	return 0
}

func (m *KeyMetadata) GetBackupStatus() BackupStatus {
	if m != nil {
		return m.BackupStatus
	}
	return BackupStatus_BACKUP_STATUS_UNSPECIFIED
}

func (m *KeyMetadata) GetSecurityLevel() SecurityLevel {
	if m != nil {
		return m.SecurityLevel
	}
	return SecurityLevel_SECURITY_LEVEL_UNSPECIFIED
}

// EncryptedShare represents an encrypted key share with metadata
type EncryptedShare struct {
	EncryptedData string    `protobuf:"bytes,1,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	KeyId         string    `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Version       uint32    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt     time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *EncryptedShare) Reset()         { *m = EncryptedShare{} }
func (m *EncryptedShare) String() string { return proto.CompactTextString(m) }
func (*EncryptedShare) ProtoMessage()    {}
func (*EncryptedShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_855858f207a4fe63, []int{1}
}
func (m *EncryptedShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptedShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptedShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptedShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedShare.Merge(m, src)
}
func (m *EncryptedShare) XXX_Size() int {
	return m.Size()
}
func (m *EncryptedShare) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedShare.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedShare proto.InternalMessageInfo

func (m *EncryptedShare) GetEncryptedData() string {
	if m != nil {
		return m.EncryptedData
	}
	return ""
}

func (m *EncryptedShare) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *EncryptedShare) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *EncryptedShare) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

// PartyData represents TSS party data
type PartyData struct {
	PartyId          string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PublicKey        []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PartyShare       []byte `protobuf:"bytes,3,opt,name=party_share,json=partyShare,proto3" json:"party_share,omitempty"`
	VerificationData []byte `protobuf:"bytes,4,opt,name=verification_data,json=verificationData,proto3" json:"verification_data,omitempty"`
	ChainId          string `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Status           string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *PartyData) Reset()         { *m = PartyData{} }
func (m *PartyData) String() string { return proto.CompactTextString(m) }
func (*PartyData) ProtoMessage()    {}
func (*PartyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_855858f207a4fe63, []int{2}
}
func (m *PartyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyData.Merge(m, src)
}
func (m *PartyData) XXX_Size() int {
	return m.Size()
}
func (m *PartyData) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyData.DiscardUnknown(m)
}

var xxx_messageInfo_PartyData proto.InternalMessageInfo

func (m *PartyData) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *PartyData) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PartyData) GetPartyShare() []byte {
	if m != nil {
		return m.PartyShare
	}
	return nil
}

func (m *PartyData) GetVerificationData() []byte {
	if m != nil {
		return m.VerificationData
	}
	return nil
}

func (m *PartyData) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *PartyData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// KeyGenRequest represents a request to generate new key shares
type KeyGenRequest struct {
	WalletId      string        `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	ChainId       string        `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SecurityLevel SecurityLevel `protobuf:"varint,3,opt,name=security_level,json=securityLevel,proto3,enum=selfchain.keyless.SecurityLevel" json:"security_level,omitempty"`
}

func (m *KeyGenRequest) Reset()         { *m = KeyGenRequest{} }
func (m *KeyGenRequest) String() string { return proto.CompactTextString(m) }
func (*KeyGenRequest) ProtoMessage()    {}
func (*KeyGenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_855858f207a4fe63, []int{3}
}
func (m *KeyGenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyGenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyGenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyGenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyGenRequest.Merge(m, src)
}
func (m *KeyGenRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyGenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyGenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyGenRequest proto.InternalMessageInfo

func (m *KeyGenRequest) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *KeyGenRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *KeyGenRequest) GetSecurityLevel() SecurityLevel {
	if m != nil {
		return m.SecurityLevel
	}
	return SecurityLevel_SECURITY_LEVEL_UNSPECIFIED
}

// KeyGenResponse represents the response from key generation
type KeyGenResponse struct {
	WalletId  string       `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	PublicKey []byte       `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Metadata  *KeyMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *KeyGenResponse) Reset()         { *m = KeyGenResponse{} }
func (m *KeyGenResponse) String() string { return proto.CompactTextString(m) }
func (*KeyGenResponse) ProtoMessage()    {}
func (*KeyGenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_855858f207a4fe63, []int{4}
}
func (m *KeyGenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyGenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyGenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyGenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyGenResponse.Merge(m, src)
}
func (m *KeyGenResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeyGenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyGenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyGenResponse proto.InternalMessageInfo

func (m *KeyGenResponse) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *KeyGenResponse) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *KeyGenResponse) GetMetadata() *KeyMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterEnum("selfchain.keyless.SecurityLevel", SecurityLevel_name, SecurityLevel_value)
	proto.RegisterEnum("selfchain.keyless.BackupStatus", BackupStatus_name, BackupStatus_value)
	proto.RegisterType((*KeyMetadata)(nil), "selfchain.keyless.KeyMetadata")
	proto.RegisterType((*EncryptedShare)(nil), "selfchain.keyless.EncryptedShare")
	proto.RegisterType((*PartyData)(nil), "selfchain.keyless.PartyData")
	proto.RegisterType((*KeyGenRequest)(nil), "selfchain.keyless.KeyGenRequest")
	proto.RegisterType((*KeyGenResponse)(nil), "selfchain.keyless.KeyGenResponse")
}

func init() { proto.RegisterFile("selfchain/keyless/keygen.proto", fileDescriptor_855858f207a4fe63) }

var fileDescriptor_855858f207a4fe63 = []byte{
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0xd5, 0x5a, 0xb2, 0x22, 0x8d, 0x25, 0x81, 0xd9, 0xe6, 0x43, 0x76, 0x10, 0xca, 0x30, 0x50,
	0xc0, 0x48, 0x01, 0x19, 0x48, 0x6e, 0xbd, 0xc9, 0x22, 0xa3, 0x10, 0x56, 0x14, 0x61, 0x29, 0x15,
	0x68, 0x2f, 0x04, 0x45, 0x8e, 0x15, 0x42, 0x34, 0xc9, 0x72, 0x97, 0x6e, 0x79, 0xef, 0xa1, 0xa7,
	0xc2, 0xb7, 0xfe, 0x8a, 0xfe, 0x8d, 0x22, 0xc7, 0x1c, 0x7b, 0x6a, 0x0b, 0xfb, 0x8f, 0x14, 0xbb,
	0x94, 0x1c, 0x49, 0x09, 0x1a, 0xc4, 0x27, 0x69, 0xde, 0x7b, 0xf3, 0xf8, 0x38, 0xc3, 0x5d, 0xd0,
	0x39, 0x86, 0xe7, 0xde, 0x5b, 0x37, 0x88, 0x4e, 0x16, 0x98, 0x87, 0xc8, 0xb9, 0xfc, 0x9d, 0x63,
	0xd4, 0x4d, 0xd2, 0x58, 0xc4, 0xf4, 0xfe, 0x2d, 0xdf, 0x5d, 0xf2, 0x07, 0x0f, 0xe6, 0xf1, 0x3c,
	0x56, 0xec, 0x89, 0xfc, 0x57, 0x08, 0x0f, 0x3a, 0xf3, 0x38, 0x9e, 0x87, 0x78, 0xa2, 0xaa, 0x59,
	0x76, 0x7e, 0x22, 0x82, 0x0b, 0xe4, 0xc2, 0xbd, 0x48, 0x0a, 0xc1, 0xd1, 0x6f, 0x65, 0xd8, 0x3b,
	0xc3, 0xfc, 0x35, 0x0a, 0xd7, 0x77, 0x85, 0x4b, 0xfb, 0x00, 0x5e, 0x8a, 0xae, 0x40, 0xdf, 0x71,
	0x45, 0x9b, 0x1c, 0x92, 0xe3, 0xbd, 0xe7, 0x07, 0xdd, 0xc2, 0xa5, 0xbb, 0x72, 0xe9, 0x4e, 0x56,
	0x2e, 0xa7, 0xb5, 0x77, 0x7f, 0x77, 0x4a, 0x57, 0xff, 0x74, 0x08, 0xab, 0x2f, 0xfb, 0x7a, 0x82,
	0x0e, 0xa0, 0x11, 0xba, 0x5c, 0x38, 0x69, 0x2c, 0x24, 0xd2, 0xde, 0xf9, 0x02, 0x9b, 0x3d, 0xd9,
	0xc9, 0x8a, 0x46, 0xda, 0x83, 0xba, 0x32, 0xca, 0x38, 0xfa, 0xed, 0xf2, 0x17, 0xb8, 0xd4, 0x64,
	0xdb, 0x94, 0xa3, 0x4f, 0x3b, 0xb0, 0x97, 0x71, 0x77, 0x8e, 0x8e, 0x17, 0x67, 0x91, 0x68, 0x57,
	0x0e, 0xc9, 0x71, 0x85, 0x81, 0x82, 0xfa, 0x12, 0xa1, 0x06, 0x34, 0x67, 0xae, 0xb7, 0xc8, 0x12,
	0x87, 0x0b, 0x57, 0x64, 0xbc, 0xbd, 0x7b, 0x48, 0x8e, 0x5b, 0xcf, 0x3b, 0xdd, 0x8f, 0x66, 0xdc,
	0x3d, 0x55, 0x3a, 0x5b, 0xc9, 0x58, 0x63, 0xb6, 0x56, 0xd1, 0x01, 0xb4, 0x38, 0x7a, 0x59, 0x1a,
	0x88, 0xdc, 0x09, 0xf1, 0x12, 0xc3, 0x76, 0x55, 0xd9, 0x1c, 0x7e, 0xc2, 0xc6, 0x5e, 0x0a, 0x87,
	0x52, 0xc7, 0x9a, 0x7c, 0xbd, 0x3c, 0xfa, 0x83, 0x40, 0xcb, 0x8c, 0xbc, 0x34, 0x4f, 0x04, 0xfa,
	0xf6, 0x5b, 0x37, 0x45, 0xfa, 0x35, 0xb4, 0x70, 0x85, 0x38, 0x72, 0x4b, 0x6a, 0x2f, 0x75, 0xd6,
	0xbc, 0x45, 0x0d, 0xb9, 0xba, 0x87, 0x50, 0x5d, 0x60, 0xee, 0x04, 0xc5, 0xbc, 0xeb, 0x6c, 0x77,
	0x81, 0xb9, 0xe5, 0xd3, 0x36, 0xdc, 0xbb, 0xc4, 0x94, 0x07, 0x71, 0xa4, 0x26, 0xd8, 0x64, 0xab,
	0x72, 0x6b, 0xd7, 0x95, 0x3b, 0xed, 0xfa, 0xe8, 0x4f, 0x02, 0xf5, 0xb1, 0x9b, 0x8a, 0x5c, 0x65,
	0xd8, 0x87, 0x5a, 0x22, 0x0b, 0x99, 0xa2, 0x08, 0x79, 0x4f, 0xd5, 0x96, 0x4f, 0x9f, 0x02, 0x24,
	0xd9, 0x2c, 0x0c, 0x3c, 0x67, 0x81, 0xb9, 0x8a, 0xd8, 0x60, 0xf5, 0x02, 0x39, 0xc3, 0x5c, 0xee,
	0xa9, 0xe8, 0xe4, 0xf2, 0x9d, 0x55, 0xd4, 0x06, 0x03, 0x05, 0x15, 0x53, 0xf8, 0x06, 0xee, 0x5f,
	0x62, 0x1a, 0x9c, 0x07, 0x9e, 0x2b, 0x82, 0x38, 0x2a, 0x06, 0x51, 0x51, 0x32, 0x6d, 0x9d, 0x58,
	0xe5, 0x50, 0x33, 0x97, 0x39, 0x76, 0x8b, 0x1c, 0xaa, 0xb6, 0x7c, 0xfa, 0x08, 0xaa, 0xcb, 0x45,
	0x57, 0x15, 0xb1, 0xac, 0x8e, 0xae, 0x08, 0x34, 0xcf, 0x30, 0x1f, 0x60, 0xc4, 0xf0, 0xc7, 0x0c,
	0xb9, 0xa0, 0x4f, 0xa0, 0xfe, 0x93, 0x1b, 0x86, 0x28, 0x3e, 0xbc, 0x4d, 0xad, 0x00, 0x2c, 0x7f,
	0xe3, 0x09, 0x3b, 0x9b, 0x4f, 0xf8, 0xf8, 0x5b, 0x28, 0xdf, 0xed, 0x5b, 0xf8, 0x95, 0x40, 0x6b,
	0x15, 0x89, 0x27, 0x71, 0xc4, 0xf1, 0xff, 0x33, 0x7d, 0x66, 0xc4, 0xdf, 0x42, 0xed, 0x62, 0x79,
	0xce, 0x97, 0x87, 0x49, 0xff, 0x44, 0xa2, 0xb5, 0xdb, 0x80, 0xdd, 0xea, 0x9f, 0xfd, 0x42, 0xa0,
	0xb9, 0x91, 0x95, 0xea, 0x70, 0x60, 0x9b, 0xfd, 0x29, 0xb3, 0x26, 0xdf, 0x3b, 0x43, 0xf3, 0x3b,
	0x73, 0xe8, 0x4c, 0x47, 0xf6, 0xd8, 0xec, 0x5b, 0x2f, 0x2d, 0xd3, 0xd0, 0x4a, 0xf4, 0x09, 0x3c,
	0xde, 0xe2, 0xed, 0x49, 0x6f, 0x64, 0xf4, 0x98, 0xa1, 0x11, 0xfa, 0x18, 0xbe, 0xda, 0x22, 0x5f,
	0x59, 0x83, 0x57, 0xda, 0x0e, 0x7d, 0x0a, 0xfb, 0x5b, 0x84, 0x39, 0x9a, 0x98, 0x6c, 0xcc, 0x2c,
	0xdb, 0xd4, 0xca, 0xcf, 0x7e, 0x27, 0xd0, 0x58, 0x3f, 0x85, 0x52, 0x7f, 0xda, 0xeb, 0x9f, 0x4d,
	0xc7, 0xd2, 0x7d, 0x32, 0xb5, 0xb7, 0x42, 0x3c, 0x02, 0xba, 0x49, 0x8f, 0xde, 0x8c, 0x4c, 0x8d,
	0xd0, 0x7d, 0x78, 0xb8, 0x89, 0x8f, 0xcd, 0x91, 0x61, 0x8d, 0x06, 0xda, 0x8e, 0xcc, 0xbd, 0x49,
	0xf5, 0xdf, 0xbc, 0x1e, 0x0f, 0xcd, 0x89, 0x69, 0x68, 0x65, 0xda, 0x86, 0x07, 0x9b, 0xe4, 0xcb,
	0x9e, 0x35, 0x34, 0x0d, 0xad, 0x72, 0xfa, 0xe2, 0xdd, 0xb5, 0x4e, 0xde, 0x5f, 0xeb, 0xe4, 0xdf,
	0x6b, 0x9d, 0x5c, 0xdd, 0xe8, 0xa5, 0xf7, 0x37, 0x7a, 0xe9, 0xaf, 0x1b, 0xbd, 0xf4, 0xc3, 0xfe,
	0x87, 0xcb, 0xfc, 0xe7, 0xdb, 0xeb, 0x5c, 0xe4, 0x09, 0xf2, 0x59, 0x55, 0x9d, 0xb2, 0x17, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xd5, 0x24, 0x19, 0xf0, 0x05, 0x00, 0x00,
}

func (m *KeyMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecurityLevel != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.SecurityLevel))
		i--
		dAtA[i] = 0x30
	}
	if m.BackupStatus != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.BackupStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.UsageCount != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.UsageCount))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastUsed, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastUsed):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintKeygen(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastRotated, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastRotated):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintKeygen(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintKeygen(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EncryptedShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptedShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintKeygen(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if m.Version != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedData) > 0 {
		i -= len(m.EncryptedData)
		copy(dAtA[i:], m.EncryptedData)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.EncryptedData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VerificationData) > 0 {
		i -= len(m.VerificationData)
		copy(dAtA[i:], m.VerificationData)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.VerificationData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PartyShare) > 0 {
		i -= len(m.PartyShare)
		copy(dAtA[i:], m.PartyShare)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.PartyShare)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PartyId) > 0 {
		i -= len(m.PartyId)
		copy(dAtA[i:], m.PartyId)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.PartyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyGenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyGenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyGenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecurityLevel != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.SecurityLevel))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletId) > 0 {
		i -= len(m.WalletId)
		copy(dAtA[i:], m.WalletId)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.WalletId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyGenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyGenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyGenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeygen(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletId) > 0 {
		i -= len(m.WalletId)
		copy(dAtA[i:], m.WalletId)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.WalletId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeygen(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeygen(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovKeygen(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastRotated)
	n += 1 + l + sovKeygen(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastUsed)
	n += 1 + l + sovKeygen(uint64(l))
	if m.UsageCount != 0 {
		n += 1 + sovKeygen(uint64(m.UsageCount))
	}
	if m.BackupStatus != 0 {
		n += 1 + sovKeygen(uint64(m.BackupStatus))
	}
	if m.SecurityLevel != 0 {
		n += 1 + sovKeygen(uint64(m.SecurityLevel))
	}
	return n
}

func (m *EncryptedShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovKeygen(uint64(m.Version))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovKeygen(uint64(l))
	return n
}

func (m *PartyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PartyId)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.PartyShare)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.VerificationData)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	return n
}

func (m *KeyGenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletId)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.SecurityLevel != 0 {
		n += 1 + sovKeygen(uint64(m.SecurityLevel))
	}
	return n
}

func (m *KeyGenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletId)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovKeygen(uint64(l))
	}
	return n
}

func sovKeygen(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeygen(x uint64) (n int) {
	return sovKeygen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRotated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastRotated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastUsed, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageCount", wireType)
			}
			m.UsageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupStatus", wireType)
			}
			m.BackupStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupStatus |= BackupStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityLevel", wireType)
			}
			m.SecurityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecurityLevel |= SecurityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptedShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptedShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptedShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyShare = append(m.PartyShare[:0], dAtA[iNdEx:postIndex]...)
			if m.PartyShare == nil {
				m.PartyShare = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationData = append(m.VerificationData[:0], dAtA[iNdEx:postIndex]...)
			if m.VerificationData == nil {
				m.VerificationData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyGenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyGenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyGenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityLevel", wireType)
			}
			m.SecurityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecurityLevel |= SecurityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyGenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyGenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyGenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &KeyMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeygen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeygen
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeygen
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeygen
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeygen        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeygen          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeygen = fmt.Errorf("proto: unexpected end of group")
)
