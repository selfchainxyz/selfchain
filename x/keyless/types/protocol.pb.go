// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/protocol.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SessionType represents the type of TSS session
type SessionType int32

const (
	SessionType_SESSION_TYPE_UNSPECIFIED SessionType = 0
	SessionType_SESSION_TYPE_KEYGEN      SessionType = 1
	SessionType_SESSION_TYPE_SIGNING     SessionType = 2
)

var SessionType_name = map[int32]string{
	0: "SESSION_TYPE_UNSPECIFIED",
	1: "SESSION_TYPE_KEYGEN",
	2: "SESSION_TYPE_SIGNING",
}

var SessionType_value = map[string]int32{
	"SESSION_TYPE_UNSPECIFIED": 0,
	"SESSION_TYPE_KEYGEN":      1,
	"SESSION_TYPE_SIGNING":     2,
}

func (x SessionType) String() string {
	return proto.EnumName(SessionType_name, int32(x))
}

func (SessionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ebc626d2dae3e176, []int{0}
}

// SessionStatus represents the status of a TSS session
type SessionStatus int32

const (
	SessionStatus_SESSION_STATUS_UNSPECIFIED SessionStatus = 0
	SessionStatus_SESSION_STATUS_PENDING     SessionStatus = 1
	SessionStatus_SESSION_STATUS_ACTIVE      SessionStatus = 2
	SessionStatus_SESSION_STATUS_COMPLETED   SessionStatus = 3
	SessionStatus_SESSION_STATUS_FAILED      SessionStatus = 4
)

var SessionStatus_name = map[int32]string{
	0: "SESSION_STATUS_UNSPECIFIED",
	1: "SESSION_STATUS_PENDING",
	2: "SESSION_STATUS_ACTIVE",
	3: "SESSION_STATUS_COMPLETED",
	4: "SESSION_STATUS_FAILED",
}

var SessionStatus_value = map[string]int32{
	"SESSION_STATUS_UNSPECIFIED": 0,
	"SESSION_STATUS_PENDING":     1,
	"SESSION_STATUS_ACTIVE":      2,
	"SESSION_STATUS_COMPLETED":   3,
	"SESSION_STATUS_FAILED":      4,
}

func (x SessionStatus) String() string {
	return proto.EnumName(SessionStatus_name, int32(x))
}

func (SessionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ebc626d2dae3e176, []int{1}
}

// SignatureType represents the type of signature
type SignatureType int32

const (
	SignatureType_SIGNATURE_TYPE_UNSPECIFIED SignatureType = 0
	SignatureType_SIGNATURE_TYPE_ECDSA       SignatureType = 1
	SignatureType_SIGNATURE_TYPE_EDDSA       SignatureType = 2
	SignatureType_SIGNATURE_TYPE_BLS         SignatureType = 3
	SignatureType_SIGNATURE_TYPE_SCHNORR     SignatureType = 4
)

var SignatureType_name = map[int32]string{
	0: "SIGNATURE_TYPE_UNSPECIFIED",
	1: "SIGNATURE_TYPE_ECDSA",
	2: "SIGNATURE_TYPE_EDDSA",
	3: "SIGNATURE_TYPE_BLS",
	4: "SIGNATURE_TYPE_SCHNORR",
}

var SignatureType_value = map[string]int32{
	"SIGNATURE_TYPE_UNSPECIFIED": 0,
	"SIGNATURE_TYPE_ECDSA":       1,
	"SIGNATURE_TYPE_EDDSA":       2,
	"SIGNATURE_TYPE_BLS":         3,
	"SIGNATURE_TYPE_SCHNORR":     4,
}

func (x SignatureType) String() string {
	return proto.EnumName(SignatureType_name, int32(x))
}

func (SignatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ebc626d2dae3e176, []int{2}
}

// SigningRequest represents a request to sign data
type SigningRequest struct {
	WalletAddress string           `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Message       []byte           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ChainId       string           `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SignType      SignatureType    `protobuf:"varint,4,opt,name=sign_type,json=signType,proto3,enum=selfchain.keyless.SignatureType" json:"sign_type,omitempty"`
	Metadata      *RequestMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *SigningRequest) Reset()         { *m = SigningRequest{} }
func (m *SigningRequest) String() string { return proto.CompactTextString(m) }
func (*SigningRequest) ProtoMessage()    {}
func (*SigningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebc626d2dae3e176, []int{0}
}
func (m *SigningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningRequest.Merge(m, src)
}
func (m *SigningRequest) XXX_Size() int {
	return m.Size()
}
func (m *SigningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SigningRequest proto.InternalMessageInfo

func (m *SigningRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *SigningRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SigningRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SigningRequest) GetSignType() SignatureType {
	if m != nil {
		return m.SignType
	}
	return SignatureType_SIGNATURE_TYPE_UNSPECIFIED
}

func (m *SigningRequest) GetMetadata() *RequestMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// SigningResponse represents the response from signing
type SigningResponse struct {
	WalletAddress string             `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Signature     []byte             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Metadata      *SignatureMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *SigningResponse) Reset()         { *m = SigningResponse{} }
func (m *SigningResponse) String() string { return proto.CompactTextString(m) }
func (*SigningResponse) ProtoMessage()    {}
func (*SigningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebc626d2dae3e176, []int{1}
}
func (m *SigningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningResponse.Merge(m, src)
}
func (m *SigningResponse) XXX_Size() int {
	return m.Size()
}
func (m *SigningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SigningResponse proto.InternalMessageInfo

func (m *SigningResponse) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *SigningResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SigningResponse) GetMetadata() *SignatureMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// RequestMetadata contains metadata about a signing request
type RequestMetadata struct {
	Timestamp *time.Time `protobuf:"bytes,1,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
	ChainId   string     `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce     uint64     `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *RequestMetadata) Reset()         { *m = RequestMetadata{} }
func (m *RequestMetadata) String() string { return proto.CompactTextString(m) }
func (*RequestMetadata) ProtoMessage()    {}
func (*RequestMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebc626d2dae3e176, []int{2}
}
func (m *RequestMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMetadata.Merge(m, src)
}
func (m *RequestMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RequestMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMetadata proto.InternalMessageInfo

func (m *RequestMetadata) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *RequestMetadata) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *RequestMetadata) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// SignatureMetadata contains metadata about a signature
type SignatureMetadata struct {
	Timestamp *time.Time    `protobuf:"bytes,1,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
	ChainId   string        `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SignType  SignatureType `protobuf:"varint,3,opt,name=sign_type,json=signType,proto3,enum=selfchain.keyless.SignatureType" json:"sign_type,omitempty"`
}

func (m *SignatureMetadata) Reset()         { *m = SignatureMetadata{} }
func (m *SignatureMetadata) String() string { return proto.CompactTextString(m) }
func (*SignatureMetadata) ProtoMessage()    {}
func (*SignatureMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebc626d2dae3e176, []int{3}
}
func (m *SignatureMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureMetadata.Merge(m, src)
}
func (m *SignatureMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SignatureMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureMetadata proto.InternalMessageInfo

func (m *SignatureMetadata) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *SignatureMetadata) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SignatureMetadata) GetSignType() SignatureType {
	if m != nil {
		return m.SignType
	}
	return SignatureType_SIGNATURE_TYPE_UNSPECIFIED
}

// KeyRotationResponse represents the response from a key rotation operation
type KeyRotationResponse struct {
	WalletAddress string       `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	NewPublicKey  []byte       `protobuf:"bytes,2,opt,name=new_public_key,json=newPublicKey,proto3" json:"new_public_key,omitempty"`
	Metadata      *KeyMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *KeyRotationResponse) Reset()         { *m = KeyRotationResponse{} }
func (m *KeyRotationResponse) String() string { return proto.CompactTextString(m) }
func (*KeyRotationResponse) ProtoMessage()    {}
func (*KeyRotationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebc626d2dae3e176, []int{4}
}
func (m *KeyRotationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyRotationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyRotationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyRotationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyRotationResponse.Merge(m, src)
}
func (m *KeyRotationResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeyRotationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyRotationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyRotationResponse proto.InternalMessageInfo

func (m *KeyRotationResponse) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *KeyRotationResponse) GetNewPublicKey() []byte {
	if m != nil {
		return m.NewPublicKey
	}
	return nil
}

func (m *KeyRotationResponse) GetMetadata() *KeyMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterEnum("selfchain.keyless.SessionType", SessionType_name, SessionType_value)
	proto.RegisterEnum("selfchain.keyless.SessionStatus", SessionStatus_name, SessionStatus_value)
	proto.RegisterEnum("selfchain.keyless.SignatureType", SignatureType_name, SignatureType_value)
	proto.RegisterType((*SigningRequest)(nil), "selfchain.keyless.SigningRequest")
	proto.RegisterType((*SigningResponse)(nil), "selfchain.keyless.SigningResponse")
	proto.RegisterType((*RequestMetadata)(nil), "selfchain.keyless.RequestMetadata")
	proto.RegisterType((*SignatureMetadata)(nil), "selfchain.keyless.SignatureMetadata")
	proto.RegisterType((*KeyRotationResponse)(nil), "selfchain.keyless.KeyRotationResponse")
}

func init() { proto.RegisterFile("selfchain/keyless/protocol.proto", fileDescriptor_ebc626d2dae3e176) }

var fileDescriptor_ebc626d2dae3e176 = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x41, 0x4f, 0xdb, 0x4a,
	0x10, 0xc7, 0xb3, 0x49, 0x78, 0xc0, 0x02, 0xc1, 0x2c, 0x3c, 0x9e, 0x89, 0x90, 0x89, 0x22, 0x9e,
	0x14, 0x71, 0x70, 0x24, 0xb8, 0x3d, 0xe9, 0xa1, 0x86, 0xc4, 0xa4, 0x56, 0xc0, 0x44, 0xb6, 0xa9,
	0x44, 0x0f, 0xb5, 0x4c, 0x32, 0xb8, 0x16, 0x8e, 0x9d, 0xb2, 0x1b, 0x51, 0x5f, 0xfb, 0x09, 0xb8,
	0xb5, 0xa7, 0xf6, 0x13, 0xf4, 0x7b, 0xf4, 0xc8, 0xb1, 0xb7, 0x56, 0x70, 0xec, 0x97, 0xa8, 0xbc,
	0x76, 0x02, 0x4e, 0xa2, 0xaa, 0x1c, 0x7a, 0xdb, 0x9d, 0xff, 0x8c, 0xe7, 0x37, 0xfe, 0x8f, 0x16,
	0x97, 0x28, 0x78, 0x17, 0x9d, 0xd7, 0xb6, 0xeb, 0x57, 0x2f, 0x21, 0xf4, 0x80, 0xd2, 0x6a, 0xff,
	0x2a, 0x60, 0x41, 0x27, 0xf0, 0x64, 0x7e, 0x20, 0x2b, 0xa3, 0x0c, 0x39, 0xc9, 0x28, 0xae, 0x39,
	0x81, 0x13, 0x70, 0xb5, 0x1a, 0x9d, 0xe2, 0xc4, 0xe2, 0x96, 0x13, 0x04, 0x8e, 0x07, 0x71, 0xfd,
	0xf9, 0xe0, 0xa2, 0xca, 0xdc, 0x1e, 0x50, 0x66, 0xf7, 0xfa, 0x49, 0x82, 0x34, 0xd9, 0xeb, 0x12,
	0x42, 0x07, 0xfc, 0x58, 0x2f, 0xff, 0x40, 0xb8, 0x60, 0xb8, 0x8e, 0xef, 0xfa, 0x8e, 0x0e, 0x6f,
	0x06, 0x40, 0x19, 0xf9, 0x17, 0x17, 0xae, 0x6d, 0xcf, 0x03, 0x66, 0xd9, 0xdd, 0xee, 0x15, 0x50,
	0x2a, 0xa2, 0x12, 0xaa, 0xcc, 0xeb, 0x4b, 0x71, 0xb4, 0x16, 0x07, 0x89, 0x88, 0x67, 0x7b, 0x40,
	0xa9, 0xed, 0x80, 0x98, 0x2d, 0xa1, 0xca, 0xa2, 0x3e, 0xbc, 0x92, 0x0d, 0x3c, 0xc7, 0x3b, 0x5a,
	0x6e, 0x57, 0xcc, 0xf1, 0xd2, 0x59, 0x7e, 0x57, 0xbb, 0xe4, 0x7f, 0x3c, 0x4f, 0x5d, 0xc7, 0xb7,
	0x58, 0xd8, 0x07, 0x31, 0x5f, 0x42, 0x95, 0xc2, 0x6e, 0x49, 0x9e, 0x18, 0x56, 0x8e, 0x88, 0x6c,
	0x36, 0xb8, 0x02, 0x33, 0xec, 0x83, 0x3e, 0x17, 0x95, 0x44, 0x27, 0xb2, 0x8f, 0xe7, 0x7a, 0xc0,
	0xec, 0xae, 0xcd, 0x6c, 0x71, 0xa6, 0x84, 0x2a, 0x0b, 0xbb, 0xe5, 0x29, 0xd5, 0xc9, 0x20, 0xc7,
	0x49, 0xa6, 0x3e, 0xaa, 0x29, 0x7f, 0x40, 0x78, 0x79, 0x34, 0x2d, 0xed, 0x07, 0x3e, 0x85, 0xdf,
	0x1d, 0x77, 0x33, 0x26, 0xe7, 0x54, 0xc9, 0xc0, 0x0f, 0x01, 0xf2, 0xec, 0x11, 0x58, 0x8e, 0x83,
	0x6d, 0xff, 0x6a, 0xac, 0x29, 0x68, 0xef, 0x10, 0x5e, 0x1e, 0x03, 0x27, 0xfb, 0x78, 0x7e, 0xe4,
	0x27, 0xa7, 0x5a, 0xd8, 0x2d, 0xca, 0xb1, 0xe3, 0xf2, 0xd0, 0x71, 0xd9, 0x1c, 0x66, 0x1c, 0xe4,
	0x6f, 0xbe, 0x6d, 0x21, 0xfd, 0xa1, 0x24, 0x65, 0x44, 0x36, 0x6d, 0xc4, 0x1a, 0x9e, 0xf1, 0x03,
	0xbf, 0x03, 0x9c, 0x36, 0xaf, 0xc7, 0x97, 0xf2, 0x67, 0x84, 0x57, 0x26, 0x20, 0xff, 0x24, 0x46,
	0x6a, 0x1f, 0x72, 0x4f, 0xdd, 0x87, 0xf2, 0x47, 0x84, 0x57, 0x5b, 0x10, 0xea, 0x01, 0xb3, 0x99,
	0x1b, 0xf8, 0x4f, 0xf5, 0x74, 0x1b, 0x17, 0x7c, 0xb8, 0xb6, 0xfa, 0x83, 0x73, 0xcf, 0xed, 0x58,
	0x97, 0x10, 0x26, 0xc6, 0x2e, 0xfa, 0x70, 0xdd, 0xe6, 0xc1, 0x16, 0x84, 0xe4, 0xbf, 0x09, 0x6f,
	0xa5, 0x29, 0x88, 0x2d, 0x08, 0x27, 0x5d, 0xdd, 0x79, 0x85, 0x17, 0x0c, 0xa0, 0xd4, 0x0d, 0xe2,
	0xfd, 0xdd, 0xc4, 0xa2, 0xa1, 0x18, 0x86, 0x7a, 0xa2, 0x59, 0xe6, 0x59, 0x5b, 0xb1, 0x4e, 0x35,
	0xa3, 0xad, 0xd4, 0xd5, 0x43, 0x55, 0x69, 0x08, 0x19, 0xf2, 0x0f, 0x5e, 0x4d, 0xa9, 0x2d, 0xe5,
	0xac, 0xa9, 0x68, 0x02, 0x22, 0x22, 0x5e, 0x4b, 0x09, 0x86, 0xda, 0xd4, 0x54, 0xad, 0x29, 0x64,
	0x77, 0x3e, 0x21, 0xbc, 0x94, 0x34, 0x30, 0x98, 0xcd, 0x06, 0x94, 0x48, 0xb8, 0x38, 0xcc, 0x35,
	0xcc, 0x9a, 0x79, 0x6a, 0x8c, 0x35, 0x29, 0xe2, 0xf5, 0x31, 0xbd, 0xad, 0x68, 0x8d, 0xe8, 0x6b,
	0x88, 0x6c, 0xe0, 0xbf, 0xc7, 0xb4, 0x5a, 0xdd, 0x54, 0x5f, 0x28, 0x42, 0xf6, 0x31, 0x79, 0x22,
	0xd5, 0x4f, 0x8e, 0xdb, 0x47, 0x8a, 0xa9, 0x34, 0x84, 0xdc, 0x94, 0xc2, 0xc3, 0x9a, 0x7a, 0xa4,
	0x34, 0x84, 0xfc, 0xce, 0xfb, 0x88, 0xf0, 0xb1, 0x7d, 0x9c, 0x50, 0x6d, 0x6a, 0x35, 0xf3, 0x54,
	0x57, 0xa6, 0xfd, 0x86, 0x68, 0xda, 0xb4, 0xae, 0xd4, 0x1b, 0x46, 0x2d, 0xf9, 0x0f, 0x63, 0x4a,
	0x23, 0x52, 0xb2, 0x64, 0x1d, 0x93, 0x31, 0xe5, 0xe0, 0xc8, 0x10, 0x72, 0x7c, 0xda, 0x74, 0xdc,
	0xa8, 0x3f, 0xd7, 0x4e, 0x74, 0x5d, 0xc8, 0x1f, 0xec, 0x7d, 0xb9, 0x93, 0xd0, 0xed, 0x9d, 0x84,
	0xbe, 0xdf, 0x49, 0xe8, 0xe6, 0x5e, 0xca, 0xdc, 0xde, 0x4b, 0x99, 0xaf, 0xf7, 0x52, 0xe6, 0xe5,
	0xc6, 0xc3, 0xa3, 0xf9, 0x76, 0xf4, 0x6c, 0x46, 0x2b, 0x4a, 0xcf, 0xff, 0xe2, 0x0b, 0xbf, 0xf7,
	0x33, 0x00, 0x00, 0xff, 0xff, 0x06, 0xf7, 0x7f, 0x05, 0xc4, 0x05, 0x00, 0x00,
}

func (m *SigningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SignType != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SignType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Timestamp):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintProtocol(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignatureMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignType != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SignType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Timestamp):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintProtocol(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyRotationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyRotationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyRotationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewPublicKey) > 0 {
		i -= len(m.NewPublicKey)
		copy(dAtA[i:], m.NewPublicKey)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.NewPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SigningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SignType != 0 {
		n += 1 + sovProtocol(uint64(m.SignType))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *SigningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *RequestMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovProtocol(uint64(m.Nonce))
	}
	return n
}

func (m *SignatureMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SignType != 0 {
		n += 1 + sovProtocol(uint64(m.SignType))
	}
	return n
}

func (m *KeyRotationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.NewPublicKey)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignType", wireType)
			}
			m.SignType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignType |= SignatureType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &RequestMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &SignatureMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignType", wireType)
			}
			m.SignType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignType |= SignatureType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyRotationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyRotationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyRotationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPublicKey = append(m.NewPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NewPublicKey == nil {
				m.NewPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &KeyMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocol = fmt.Errorf("proto: unexpected end of group")
)
