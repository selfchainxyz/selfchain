// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/security.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuditLog represents a single audit log entry
type AuditLog struct {
	Operation   string     `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	WalletId    string     `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	User        string     `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Timestamp   *time.Time `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
	BlockHeight int64      `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Success     bool       `protobuf:"varint,6,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *AuditLog) Reset()         { *m = AuditLog{} }
func (m *AuditLog) String() string { return proto.CompactTextString(m) }
func (*AuditLog) ProtoMessage()    {}
func (*AuditLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_94c1bcab74f47730, []int{0}
}
func (m *AuditLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditLog.Merge(m, src)
}
func (m *AuditLog) XXX_Size() int {
	return m.Size()
}
func (m *AuditLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditLog.DiscardUnknown(m)
}

var xxx_messageInfo_AuditLog proto.InternalMessageInfo

func (m *AuditLog) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *AuditLog) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *AuditLog) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *AuditLog) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *AuditLog) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *AuditLog) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// RateLimitData represents rate limit tracking data
type RateLimitData struct {
	Count     uint32     `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	LastReset *time.Time `protobuf:"bytes,2,opt,name=last_reset,json=lastReset,proto3,stdtime" json:"last_reset,omitempty"`
}

func (m *RateLimitData) Reset()         { *m = RateLimitData{} }
func (m *RateLimitData) String() string { return proto.CompactTextString(m) }
func (*RateLimitData) ProtoMessage()    {}
func (*RateLimitData) Descriptor() ([]byte, []int) {
	return fileDescriptor_94c1bcab74f47730, []int{1}
}
func (m *RateLimitData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitData.Merge(m, src)
}
func (m *RateLimitData) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitData) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitData.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitData proto.InternalMessageInfo

func (m *RateLimitData) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RateLimitData) GetLastReset() *time.Time {
	if m != nil {
		return m.LastReset
	}
	return nil
}

// AccessData represents wallet access grant data
type AccessData struct {
	GrantedAt *time.Time `protobuf:"bytes,1,opt,name=granted_at,json=grantedAt,proto3,stdtime" json:"granted_at,omitempty"`
}

func (m *AccessData) Reset()         { *m = AccessData{} }
func (m *AccessData) String() string { return proto.CompactTextString(m) }
func (*AccessData) ProtoMessage()    {}
func (*AccessData) Descriptor() ([]byte, []int) {
	return fileDescriptor_94c1bcab74f47730, []int{2}
}
func (m *AccessData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessData.Merge(m, src)
}
func (m *AccessData) XXX_Size() int {
	return m.Size()
}
func (m *AccessData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessData.DiscardUnknown(m)
}

var xxx_messageInfo_AccessData proto.InternalMessageInfo

func (m *AccessData) GetGrantedAt() *time.Time {
	if m != nil {
		return m.GrantedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*AuditLog)(nil), "selfchain.keyless.AuditLog")
	proto.RegisterType((*RateLimitData)(nil), "selfchain.keyless.RateLimitData")
	proto.RegisterType((*AccessData)(nil), "selfchain.keyless.AccessData")
}

func init() { proto.RegisterFile("selfchain/keyless/security.proto", fileDescriptor_94c1bcab74f47730) }

var fileDescriptor_94c1bcab74f47730 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x3d, 0xaf, 0xda, 0x40,
	0x10, 0xe4, 0xc2, 0x47, 0xf0, 0x12, 0x8a, 0x9c, 0x28, 0x1c, 0x12, 0x19, 0x87, 0xca, 0x95, 0x2d,
	0x85, 0x3e, 0x08, 0x94, 0x22, 0x91, 0x48, 0x63, 0xa5, 0x4a, 0x63, 0x1d, 0xf6, 0x62, 0x4e, 0x18,
	0x9f, 0xe5, 0x5b, 0x2b, 0xe1, 0x5f, 0xf0, 0xb3, 0x52, 0x52, 0x45, 0xaf, 0x7b, 0x4f, 0xf0, 0x47,
	0x9e, 0x38, 0xf3, 0xd1, 0xd2, 0xed, 0xce, 0xce, 0xec, 0xcc, 0x4a, 0x0b, 0xae, 0xc6, 0x6c, 0x15,
	0xaf, 0x85, 0xcc, 0x83, 0x0d, 0xee, 0x32, 0xd4, 0x3a, 0xd0, 0x18, 0x57, 0xa5, 0xa4, 0x9d, 0x5f,
	0x94, 0x8a, 0x14, 0x7f, 0x7f, 0x63, 0xf8, 0x17, 0xc6, 0x70, 0x90, 0xaa, 0x54, 0x99, 0x69, 0x70,
	0xae, 0x6a, 0xe2, 0x70, 0x94, 0x2a, 0x95, 0x66, 0x18, 0x98, 0x6e, 0x59, 0xad, 0x02, 0x92, 0x5b,
	0xd4, 0x24, 0xb6, 0x45, 0x4d, 0x18, 0xff, 0x67, 0xd0, 0x9d, 0x55, 0x89, 0xa4, 0x85, 0x4a, 0xf9,
	0x27, 0xb0, 0x54, 0x81, 0xa5, 0x20, 0xa9, 0x72, 0x9b, 0xb9, 0xcc, 0xb3, 0xc2, 0x3b, 0xc0, 0x3f,
	0x82, 0xf5, 0x47, 0x64, 0x19, 0x52, 0x24, 0x13, 0xfb, 0x8d, 0x99, 0x76, 0x6b, 0xe0, 0x47, 0xc2,
	0x39, 0xb4, 0x2a, 0x8d, 0xa5, 0xdd, 0x34, 0xb8, 0xa9, 0xf9, 0x57, 0xb0, 0x6e, 0x76, 0x76, 0xcb,
	0x65, 0x5e, 0xef, 0xcb, 0xd0, 0xaf, 0x03, 0xf9, 0xd7, 0x40, 0xfe, 0xaf, 0x2b, 0x63, 0xde, 0xda,
	0x3f, 0x8f, 0x58, 0x78, 0x97, 0xf0, 0xcf, 0xf0, 0x6e, 0x99, 0xa9, 0x78, 0x13, 0xad, 0x51, 0xa6,
	0x6b, 0xb2, 0xdb, 0x2e, 0xf3, 0x9a, 0x61, 0xcf, 0x60, 0xdf, 0x0d, 0xc4, 0x6d, 0x78, 0xab, 0xab,
	0x38, 0x46, 0xad, 0xed, 0x8e, 0xcb, 0xbc, 0x6e, 0x78, 0x6d, 0xc7, 0x2b, 0xe8, 0x87, 0x82, 0x70,
	0x21, 0xb7, 0x92, 0xbe, 0x09, 0x12, 0x7c, 0x00, 0xed, 0x58, 0x55, 0x39, 0x99, 0xc3, 0xfa, 0x61,
	0xdd, 0xf0, 0x29, 0x40, 0x26, 0x34, 0x45, 0x25, 0x6a, 0x24, 0x73, 0xd5, 0x43, 0x21, 0xcf, 0x9a,
	0xf0, 0x2c, 0x19, 0xff, 0x04, 0x98, 0x19, 0x47, 0x63, 0x32, 0x05, 0x48, 0x4b, 0x91, 0x13, 0x26,
	0x91, 0xa8, 0x9d, 0x1e, 0x5a, 0x77, 0xd1, 0xcc, 0x68, 0x3e, 0xf9, 0x77, 0x74, 0xd8, 0xe1, 0xe8,
	0xb0, 0x97, 0xa3, 0xc3, 0xf6, 0x27, 0xa7, 0x71, 0x38, 0x39, 0x8d, 0xa7, 0x93, 0xd3, 0xf8, 0xfd,
	0xe1, 0xfe, 0x15, 0x7f, 0x6f, 0x7f, 0x41, 0xbb, 0x02, 0xf5, 0xb2, 0x63, 0x36, 0x4f, 0x5e, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x8a, 0x97, 0xbf, 0xde, 0x39, 0x02, 0x00, 0x00,
}

func (m *AuditLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintSecurity(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.Timestamp != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Timestamp):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintSecurity(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintSecurity(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WalletId) > 0 {
		i -= len(m.WalletId)
		copy(dAtA[i:], m.WalletId)
		i = encodeVarintSecurity(dAtA, i, uint64(len(m.WalletId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintSecurity(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastReset != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastReset, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastReset):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintSecurity(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x12
	}
	if m.Count != 0 {
		i = encodeVarintSecurity(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccessData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GrantedAt != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.GrantedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.GrantedAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintSecurity(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSecurity(dAtA []byte, offset int, v uint64) int {
	offset -= sovSecurity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuditLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovSecurity(uint64(l))
	}
	l = len(m.WalletId)
	if l > 0 {
		n += 1 + l + sovSecurity(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovSecurity(uint64(l))
	}
	if m.Timestamp != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovSecurity(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovSecurity(uint64(m.BlockHeight))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *RateLimitData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovSecurity(uint64(m.Count))
	}
	if m.LastReset != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastReset)
		n += 1 + l + sovSecurity(uint64(l))
	}
	return n
}

func (m *AccessData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GrantedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.GrantedAt)
		n += 1 + l + sovSecurity(uint64(l))
	}
	return n
}

func sovSecurity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSecurity(x uint64) (n int) {
	return sovSecurity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuditLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastReset == nil {
				m.LastReset = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastReset, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GrantedAt == nil {
				m.GrantedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.GrantedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecurity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSecurity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSecurity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSecurity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSecurity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecurity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSecurity = fmt.Errorf("proto: unexpected end of group")
)
