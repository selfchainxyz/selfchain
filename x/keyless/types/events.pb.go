// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/keyless/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Event types for transaction signing
type EventSignTransaction struct {
	WalletAddress    string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	SignatureType    string `protobuf:"bytes,2,opt,name=signature_type,json=signatureType,proto3" json:"signature_type,omitempty"`
	Success          bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error            string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	SigningLatencyMs uint64 `protobuf:"varint,5,opt,name=signing_latency_ms,json=signingLatencyMs,proto3" json:"signing_latency_ms,omitempty"`
}

func (m *EventSignTransaction) Reset()         { *m = EventSignTransaction{} }
func (m *EventSignTransaction) String() string { return proto.CompactTextString(m) }
func (*EventSignTransaction) ProtoMessage()    {}
func (*EventSignTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_76ab77ac8a4baaf0, []int{0}
}
func (m *EventSignTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSignTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSignTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSignTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSignTransaction.Merge(m, src)
}
func (m *EventSignTransaction) XXX_Size() int {
	return m.Size()
}
func (m *EventSignTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSignTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_EventSignTransaction proto.InternalMessageInfo

func (m *EventSignTransaction) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *EventSignTransaction) GetSignatureType() string {
	if m != nil {
		return m.SignatureType
	}
	return ""
}

func (m *EventSignTransaction) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EventSignTransaction) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *EventSignTransaction) GetSigningLatencyMs() uint64 {
	if m != nil {
		return m.SigningLatencyMs
	}
	return 0
}

// Event types for key rotation
type EventKeyRotation struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Version       uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Success       bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error         string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *EventKeyRotation) Reset()         { *m = EventKeyRotation{} }
func (m *EventKeyRotation) String() string { return proto.CompactTextString(m) }
func (*EventKeyRotation) ProtoMessage()    {}
func (*EventKeyRotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_76ab77ac8a4baaf0, []int{1}
}
func (m *EventKeyRotation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventKeyRotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventKeyRotation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventKeyRotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventKeyRotation.Merge(m, src)
}
func (m *EventKeyRotation) XXX_Size() int {
	return m.Size()
}
func (m *EventKeyRotation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventKeyRotation.DiscardUnknown(m)
}

var xxx_messageInfo_EventKeyRotation proto.InternalMessageInfo

func (m *EventKeyRotation) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *EventKeyRotation) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *EventKeyRotation) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EventKeyRotation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Event types for wallet recovery
type EventWalletRecovery struct {
	WalletAddress     string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Did               string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Success           bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error             string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	RecoveryLatencyMs uint64 `protobuf:"varint,5,opt,name=recovery_latency_ms,json=recoveryLatencyMs,proto3" json:"recovery_latency_ms,omitempty"`
}

func (m *EventWalletRecovery) Reset()         { *m = EventWalletRecovery{} }
func (m *EventWalletRecovery) String() string { return proto.CompactTextString(m) }
func (*EventWalletRecovery) ProtoMessage()    {}
func (*EventWalletRecovery) Descriptor() ([]byte, []int) {
	return fileDescriptor_76ab77ac8a4baaf0, []int{2}
}
func (m *EventWalletRecovery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWalletRecovery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWalletRecovery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWalletRecovery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWalletRecovery.Merge(m, src)
}
func (m *EventWalletRecovery) XXX_Size() int {
	return m.Size()
}
func (m *EventWalletRecovery) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWalletRecovery.DiscardUnknown(m)
}

var xxx_messageInfo_EventWalletRecovery proto.InternalMessageInfo

func (m *EventWalletRecovery) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *EventWalletRecovery) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *EventWalletRecovery) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EventWalletRecovery) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *EventWalletRecovery) GetRecoveryLatencyMs() uint64 {
	if m != nil {
		return m.RecoveryLatencyMs
	}
	return 0
}

func init() {
	proto.RegisterType((*EventSignTransaction)(nil), "selfchain.keyless.EventSignTransaction")
	proto.RegisterType((*EventKeyRotation)(nil), "selfchain.keyless.EventKeyRotation")
	proto.RegisterType((*EventWalletRecovery)(nil), "selfchain.keyless.EventWalletRecovery")
}

func init() { proto.RegisterFile("selfchain/keyless/events.proto", fileDescriptor_76ab77ac8a4baaf0) }

var fileDescriptor_76ab77ac8a4baaf0 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0xad, 0x69, 0x4b, 0xc1, 0x12, 0xa8, 0x4d, 0x3b, 0x84, 0xc5, 0xaa, 0x2a, 0x21, 0x75, 0x40,
	0xed, 0xd0, 0x2f, 0x00, 0x89, 0x09, 0x58, 0x42, 0x25, 0x24, 0x96, 0xc8, 0x24, 0x47, 0xb1, 0x08,
	0x76, 0xe5, 0x73, 0x0b, 0x9e, 0xf9, 0x01, 0xbe, 0x84, 0x8f, 0x60, 0x62, 0xec, 0xc8, 0x88, 0xda,
	0x1f, 0x41, 0x76, 0xd2, 0x30, 0xb0, 0x90, 0x2d, 0x77, 0xef, 0xe5, 0xee, 0xdd, 0xf3, 0xa3, 0x0c,
	0x21, 0xbb, 0x4f, 0x1e, 0xb8, 0x90, 0xe3, 0x47, 0xb0, 0x19, 0x20, 0x8e, 0x61, 0x09, 0xd2, 0xe0,
	0x68, 0xae, 0x95, 0x51, 0x41, 0xa7, 0xc4, 0x47, 0x05, 0x3e, 0xf8, 0x20, 0xb4, 0x77, 0xee, 0x38,
	0xd7, 0x62, 0x26, 0xa7, 0x9a, 0x4b, 0xe4, 0x89, 0x11, 0x4a, 0x06, 0xc7, 0xf4, 0xf0, 0x99, 0x67,
	0x19, 0x98, 0x98, 0xa7, 0xa9, 0x06, 0xc4, 0x90, 0xf4, 0xc9, 0x70, 0x3f, 0x3a, 0xc8, 0xbb, 0xa7,
	0x79, 0xd3, 0xd1, 0x50, 0xcc, 0x24, 0x37, 0x0b, 0x0d, 0xb1, 0xb1, 0x73, 0x08, 0x77, 0x72, 0x5a,
	0xd9, 0x9d, 0xda, 0x39, 0x04, 0x21, 0x6d, 0xe1, 0x22, 0x49, 0xdc, 0x98, 0x7a, 0x9f, 0x0c, 0xf7,
	0xa2, 0x6d, 0x19, 0xf4, 0x68, 0x13, 0xb4, 0x56, 0x3a, 0x6c, 0xf8, 0xff, 0xf2, 0x22, 0x38, 0xa1,
	0x81, 0x1b, 0x20, 0xe4, 0x2c, 0xce, 0xb8, 0x01, 0x99, 0xd8, 0xf8, 0x09, 0xc3, 0x66, 0x9f, 0x0c,
	0x1b, 0x51, 0xbb, 0x40, 0x2e, 0x73, 0xe0, 0x0a, 0x07, 0xaf, 0x84, 0xb6, 0xfd, 0x11, 0x17, 0x60,
	0x23, 0x65, 0x78, 0x95, 0x03, 0x42, 0xda, 0x5a, 0x82, 0x46, 0xa1, 0xa4, 0x57, 0xde, 0x88, 0xb6,
	0x65, 0x55, 0xcd, 0x83, 0x77, 0x42, 0xbb, 0x5e, 0xc5, 0x8d, 0x5f, 0x10, 0x41, 0xa2, 0x96, 0xa0,
	0xed, 0x7f, 0x85, 0xb4, 0x69, 0x3d, 0x15, 0x69, 0x61, 0x9f, 0xfb, 0xac, 0x6c, 0xda, 0x88, 0x76,
	0x75, 0xb1, 0xf4, 0xaf, 0x6b, 0x9d, 0x2d, 0x54, 0xda, 0x76, 0x36, 0xf9, 0x5c, 0x33, 0xb2, 0x5a,
	0x33, 0xf2, 0xbd, 0x66, 0xe4, 0x6d, 0xc3, 0x6a, 0xab, 0x0d, 0xab, 0x7d, 0x6d, 0x58, 0xed, 0xf6,
	0xe8, 0x37, 0x48, 0x2f, 0x65, 0x94, 0xdc, 0xeb, 0xe2, 0xdd, 0xae, 0x8f, 0xd2, 0xe4, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xd7, 0x49, 0xee, 0x6c, 0x6c, 0x02, 0x00, 0x00,
}

func (m *EventSignTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSignTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSignTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SigningLatencyMs != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SigningLatencyMs))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignatureType) > 0 {
		i -= len(m.SignatureType)
		copy(dAtA[i:], m.SignatureType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SignatureType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventKeyRotation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventKeyRotation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventKeyRotation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWalletRecovery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWalletRecovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWalletRecovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecoveryLatencyMs != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RecoveryLatencyMs))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSignTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SignatureType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SigningLatencyMs != 0 {
		n += 1 + sovEvents(uint64(m.SigningLatencyMs))
	}
	return n
}

func (m *EventKeyRotation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEvents(uint64(m.Version))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventWalletRecovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RecoveryLatencyMs != 0 {
		n += 1 + sovEvents(uint64(m.RecoveryLatencyMs))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSignTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSignTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSignTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningLatencyMs", wireType)
			}
			m.SigningLatencyMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigningLatencyMs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventKeyRotation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventKeyRotation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventKeyRotation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWalletRecovery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWalletRecovery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWalletRecovery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryLatencyMs", wireType)
			}
			m.RecoveryLatencyMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoveryLatencyMs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
