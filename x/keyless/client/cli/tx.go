package cli

import (
	"fmt"
	"encoding/hex"
	"strings"
	"time"

	"github.com/cosmos/cosmos-sdk/client"
	"github.com/cosmos/cosmos-sdk/client/flags"
	"github.com/cosmos/cosmos-sdk/client/tx"
	"github.com/spf13/cobra"

	"selfchain/x/keyless/types"
)

var (
	DefaultRelativePacketTimeoutTimestamp = uint64((time.Duration(10) * time.Minute).Nanoseconds())
)

const (
	flagPacketTimeoutTimestamp = "packet-timeout-timestamp"
	listSeparator             = ","
)

// GetTxCmd returns the transaction commands for this module
func GetTxCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:                        types.ModuleName,
		Short:                      fmt.Sprintf("%s transactions subcommands", types.ModuleName),
		DisableFlagParsing:         true,
		SuggestionsMinimumDistance: 2,
		RunE:                       client.ValidateCmd,
	}

	cmd.AddCommand(
		CmdCreateWallet(),
		CmdRecoverWallet(),
		CmdSignTransaction(),
		CmdBatchSign(),
		CmdInitiateKeyRotation(),
		CmdCompleteKeyRotation(),
	)

	return cmd
}

func CmdCreateWallet() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create-wallet [pub-key] [chain-id]",
		Short: "Create a new keyless wallet",
		Args:  cobra.ExactArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgCreateWallet(
				clientCtx.GetFromAddress().String(),
				args[0], // pubKey
				"",      // wallet address will be generated by the server
				args[1], // chainId
			)

			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)
	return cmd
}

func CmdRecoverWallet() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "recover-wallet [wallet-address] [recovery-proof] [new-pub-key]",
		Short: "Recover a wallet with a new public key using recovery proof",
		Args:  cobra.ExactArgs(3),
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgRecoverWallet(
				clientCtx.GetFromAddress().String(),
				args[0], // wallet address
				args[2], // new public key
				args[1], // recovery proof
			)

			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)
	return cmd
}

func CmdSignTransaction() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "sign-tx [wallet-address] [unsigned-tx]",
		Short: "Sign a transaction using the keyless wallet",
		Args:  cobra.ExactArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			// Decode hex-encoded unsigned transaction
			unsignedTx := args[1]
			if _, err := hex.DecodeString(unsignedTx); err != nil {
				return fmt.Errorf("invalid unsigned transaction hex: %w", err)
			}

			msg := types.NewMsgSignTransaction(
				clientCtx.GetFromAddress().String(),
				args[0], // wallet address
				unsignedTx,
			)

			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)
	return cmd
}

func CmdBatchSign() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "batch-sign [wallet-address] [chain-id] [unsigned-tx-1,unsigned-tx-2,...]",
		Short: "Sign multiple transactions in a batch using the keyless wallet",
		Args:  cobra.ExactArgs(3),
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			// Split comma-separated transactions
			unsignedTxs := strings.Split(args[2], listSeparator)
			var messages [][]byte
			for _, tx := range unsignedTxs {
				txBytes, err := hex.DecodeString(tx)
				if err != nil {
					return fmt.Errorf("invalid unsigned transaction hex: %w", err)
				}
				messages = append(messages, txBytes)
			}

			msg := &types.MsgBatchSignRequest{
				Creator:       clientCtx.GetFromAddress().String(),
				WalletAddress: args[0],
				Messages:      messages,
			}

			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)
	return cmd
}

func CmdInitiateKeyRotation() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "init-key-rotation [wallet-address] [new-pub-key]",
		Short: "Initiate key rotation for a wallet with a new public key",
		Args:  cobra.ExactArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgInitiateKeyRotation(
				clientCtx.GetFromAddress().String(),
				args[0], // wallet address
				args[1], // new public key
				"",     // signature will be added by the signer
			)

			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)
	return cmd
}

func CmdCompleteKeyRotation() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "complete-key-rotation [wallet-address] [version] [signature] [new-pub-key]",
		Short: "Complete key rotation for a wallet",
		Args:  cobra.ExactArgs(4),
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgCompleteKeyRotation(
				clientCtx.GetFromAddress().String(),
				args[0], // wallet address
				args[1], // version
				args[2], // signature
				args[3], // new public key
			)

			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)
	return cmd
}
