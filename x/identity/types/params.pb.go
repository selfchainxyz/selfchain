// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the identity module.
type Params struct {
	// allowed_oauth_providers is a list of allowed OAuth providers
	AllowedOauthProviders []string `protobuf:"bytes,1,rep,name=allowed_oauth_providers,json=allowedOauthProviders,proto3" json:"allowed_oauth_providers,omitempty" yaml:"allowed_oauth_providers"`
	// verification_timeout_hours is the number of hours before a verification record expires
	VerificationTimeoutHours uint32 `protobuf:"varint,2,opt,name=verification_timeout_hours,json=verificationTimeoutHours,proto3" json:"verification_timeout_hours,omitempty" yaml:"verification_timeout_hours"`
	// max_credentials_per_did is the maximum number of credentials that can be issued to a single DID
	MaxCredentialsPerDid uint32 `protobuf:"varint,3,opt,name=max_credentials_per_did,json=maxCredentialsPerDid,proto3" json:"max_credentials_per_did,omitempty" yaml:"max_credentials_per_did"`
	// allowed_credential_types is a list of allowed credential types
	AllowedCredentialTypes []string `protobuf:"bytes,4,rep,name=allowed_credential_types,json=allowedCredentialTypes,proto3" json:"allowed_credential_types,omitempty" yaml:"allowed_credential_types"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b16c041552e7d33, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAllowedOauthProviders() []string {
	if m != nil {
		return m.AllowedOauthProviders
	}
	return nil
}

func (m *Params) GetVerificationTimeoutHours() uint32 {
	if m != nil {
		return m.VerificationTimeoutHours
	}
	return 0
}

func (m *Params) GetMaxCredentialsPerDid() uint32 {
	if m != nil {
		return m.MaxCredentialsPerDid
	}
	return 0
}

func (m *Params) GetAllowedCredentialTypes() []string {
	if m != nil {
		return m.AllowedCredentialTypes
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "selfchain.identity.Params")
}

func init() { proto.RegisterFile("selfchain/identity/params.proto", fileDescriptor_7b16c041552e7d33) }

var fileDescriptor_7b16c041552e7d33 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4f, 0x32, 0x31,
	0x18, 0xc7, 0xef, 0x5e, 0x08, 0xc9, 0x7b, 0x89, 0x4b, 0x83, 0xd2, 0x30, 0xb4, 0x58, 0x63, 0xc2,
	0x04, 0x83, 0x4e, 0x8c, 0xe8, 0xe0, 0x26, 0xb9, 0xb0, 0x48, 0x62, 0x9a, 0x7a, 0x2d, 0xd0, 0xe4,
	0x8e, 0x5e, 0xda, 0x82, 0xf0, 0x11, 0xdc, 0x1c, 0x1d, 0xfd, 0x38, 0x8e, 0x8c, 0x4e, 0xc4, 0xc0,
	0x37, 0xe0, 0x13, 0x98, 0x2b, 0xe0, 0xa1, 0xc9, 0x6d, 0x4d, 0x7f, 0xbf, 0xe7, 0x79, 0xf2, 0x3c,
	0xff, 0x00, 0x1b, 0x11, 0x0f, 0xa3, 0x31, 0x93, 0x93, 0xb6, 0xe4, 0x62, 0x62, 0xa5, 0x5d, 0xb4,
	0x53, 0xa6, 0x59, 0x62, 0x5a, 0xa9, 0x56, 0x56, 0x01, 0xf0, 0x23, 0xb4, 0x0e, 0x42, 0xbd, 0x3a,
	0x52, 0x23, 0xe5, 0x70, 0x3b, 0x7b, 0xed, 0x4c, 0xf2, 0x52, 0x0a, 0x2a, 0x3d, 0x57, 0x0a, 0x06,
	0x41, 0x8d, 0xc5, 0xb1, 0x7a, 0x16, 0x9c, 0x2a, 0x36, 0xb5, 0x63, 0x9a, 0x6a, 0x35, 0x93, 0x5c,
	0x68, 0x03, 0xfd, 0x46, 0xa9, 0xf9, 0xbf, 0x4b, 0xb6, 0x2b, 0x8c, 0x16, 0x2c, 0x89, 0x3b, 0xa4,
	0x40, 0x24, 0xe1, 0xe9, 0x9e, 0xdc, 0x67, 0xa0, 0x77, 0xf8, 0x07, 0x51, 0x50, 0x9f, 0x09, 0x2d,
	0x87, 0x32, 0x62, 0x56, 0xaa, 0x09, 0xb5, 0x32, 0x11, 0x6a, 0x6a, 0xe9, 0x58, 0x4d, 0xb5, 0x81,
	0xff, 0x1a, 0x7e, 0xf3, 0xa4, 0x7b, 0xb9, 0x5d, 0xe1, 0xf3, 0x5d, 0xfb, 0x62, 0x97, 0x84, 0xf0,
	0x18, 0xf6, 0x77, 0xec, 0x2e, 0x43, 0xe0, 0x21, 0xa8, 0x25, 0x6c, 0x4e, 0x23, 0x2d, 0xdc, 0xce,
	0x2c, 0x36, 0x34, 0x15, 0x9a, 0x72, 0xc9, 0x61, 0xc9, 0x4d, 0x38, 0x5a, 0xa0, 0x40, 0x24, 0x61,
	0x35, 0x61, 0xf3, 0x9b, 0x1c, 0xf4, 0x84, 0xbe, 0x95, 0x1c, 0x3c, 0x06, 0xf0, 0xb0, 0x72, 0x5e,
	0x45, 0xed, 0x22, 0x15, 0x06, 0x96, 0xdd, 0x71, 0x2e, 0xb6, 0x2b, 0x8c, 0x7f, 0x1f, 0xe7, 0xaf,
	0x49, 0xc2, 0xb3, 0x3d, 0xca, 0x07, 0xf4, 0x33, 0xd0, 0x29, 0xbf, 0xbd, 0x63, 0xaf, 0x7b, 0xfd,
	0xb1, 0x46, 0xfe, 0x72, 0x8d, 0xfc, 0xaf, 0x35, 0xf2, 0x5f, 0x37, 0xc8, 0x5b, 0x6e, 0x90, 0xf7,
	0xb9, 0x41, 0xde, 0xa0, 0x9e, 0x07, 0x3e, 0xcf, 0x23, 0x77, 0x4d, 0x9f, 0x2a, 0x2e, 0xc8, 0xab,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x77, 0x5a, 0xc9, 0x15, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedCredentialTypes) > 0 {
		for iNdEx := len(m.AllowedCredentialTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedCredentialTypes[iNdEx])
			copy(dAtA[i:], m.AllowedCredentialTypes[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.AllowedCredentialTypes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MaxCredentialsPerDid != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxCredentialsPerDid))
		i--
		dAtA[i] = 0x18
	}
	if m.VerificationTimeoutHours != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VerificationTimeoutHours))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AllowedOauthProviders) > 0 {
		for iNdEx := len(m.AllowedOauthProviders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedOauthProviders[iNdEx])
			copy(dAtA[i:], m.AllowedOauthProviders[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.AllowedOauthProviders[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedOauthProviders) > 0 {
		for _, s := range m.AllowedOauthProviders {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.VerificationTimeoutHours != 0 {
		n += 1 + sovParams(uint64(m.VerificationTimeoutHours))
	}
	if m.MaxCredentialsPerDid != 0 {
		n += 1 + sovParams(uint64(m.MaxCredentialsPerDid))
	}
	if len(m.AllowedCredentialTypes) > 0 {
		for _, s := range m.AllowedCredentialTypes {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedOauthProviders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedOauthProviders = append(m.AllowedOauthProviders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationTimeoutHours", wireType)
			}
			m.VerificationTimeoutHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationTimeoutHours |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCredentialsPerDid", wireType)
			}
			m.MaxCredentialsPerDid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCredentialsPerDid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCredentialTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedCredentialTypes = append(m.AllowedCredentialTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
