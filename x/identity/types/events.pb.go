// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Event types for OAuth verification
type EventOAuthVerification struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	SocialId string `protobuf:"bytes,2,opt,name=social_id,json=socialId,proto3" json:"social_id,omitempty"`
	Success  bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error    string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *EventOAuthVerification) Reset()         { *m = EventOAuthVerification{} }
func (m *EventOAuthVerification) String() string { return proto.CompactTextString(m) }
func (*EventOAuthVerification) ProtoMessage()    {}
func (*EventOAuthVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9bb8d77eef401c4, []int{0}
}
func (m *EventOAuthVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOAuthVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOAuthVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOAuthVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOAuthVerification.Merge(m, src)
}
func (m *EventOAuthVerification) XXX_Size() int {
	return m.Size()
}
func (m *EventOAuthVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOAuthVerification.DiscardUnknown(m)
}

var xxx_messageInfo_EventOAuthVerification proto.InternalMessageInfo

func (m *EventOAuthVerification) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *EventOAuthVerification) GetSocialId() string {
	if m != nil {
		return m.SocialId
	}
	return ""
}

func (m *EventOAuthVerification) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EventOAuthVerification) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Event types for MFA verification
type EventMFAVerification struct {
	Did      string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	MethodId string `protobuf:"bytes,2,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
	Success  bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error    string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *EventMFAVerification) Reset()         { *m = EventMFAVerification{} }
func (m *EventMFAVerification) String() string { return proto.CompactTextString(m) }
func (*EventMFAVerification) ProtoMessage()    {}
func (*EventMFAVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9bb8d77eef401c4, []int{1}
}
func (m *EventMFAVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMFAVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMFAVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMFAVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMFAVerification.Merge(m, src)
}
func (m *EventMFAVerification) XXX_Size() int {
	return m.Size()
}
func (m *EventMFAVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMFAVerification.DiscardUnknown(m)
}

var xxx_messageInfo_EventMFAVerification proto.InternalMessageInfo

func (m *EventMFAVerification) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *EventMFAVerification) GetMethodId() string {
	if m != nil {
		return m.MethodId
	}
	return ""
}

func (m *EventMFAVerification) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EventMFAVerification) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Event types for rate limiting
type EventRateLimit struct {
	Did           string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Operation     string `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Success       bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error         string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	WindowSeconds uint64 `protobuf:"varint,5,opt,name=window_seconds,json=windowSeconds,proto3" json:"window_seconds,omitempty"`
	MaxOperations uint64 `protobuf:"varint,6,opt,name=max_operations,json=maxOperations,proto3" json:"max_operations,omitempty"`
	CurrentCount  uint64 `protobuf:"varint,7,opt,name=current_count,json=currentCount,proto3" json:"current_count,omitempty"`
}

func (m *EventRateLimit) Reset()         { *m = EventRateLimit{} }
func (m *EventRateLimit) String() string { return proto.CompactTextString(m) }
func (*EventRateLimit) ProtoMessage()    {}
func (*EventRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9bb8d77eef401c4, []int{2}
}
func (m *EventRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRateLimit.Merge(m, src)
}
func (m *EventRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *EventRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_EventRateLimit proto.InternalMessageInfo

func (m *EventRateLimit) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *EventRateLimit) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *EventRateLimit) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EventRateLimit) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *EventRateLimit) GetWindowSeconds() uint64 {
	if m != nil {
		return m.WindowSeconds
	}
	return 0
}

func (m *EventRateLimit) GetMaxOperations() uint64 {
	if m != nil {
		return m.MaxOperations
	}
	return 0
}

func (m *EventRateLimit) GetCurrentCount() uint64 {
	if m != nil {
		return m.CurrentCount
	}
	return 0
}

func init() {
	proto.RegisterType((*EventOAuthVerification)(nil), "selfchain.identity.EventOAuthVerification")
	proto.RegisterType((*EventMFAVerification)(nil), "selfchain.identity.EventMFAVerification")
	proto.RegisterType((*EventRateLimit)(nil), "selfchain.identity.EventRateLimit")
}

func init() { proto.RegisterFile("selfchain/identity/events.proto", fileDescriptor_f9bb8d77eef401c4) }

var fileDescriptor_f9bb8d77eef401c4 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x4a, 0x2b, 0x31,
	0x14, 0x80, 0x9b, 0xdb, 0xff, 0x70, 0x5b, 0x2e, 0xa1, 0x5c, 0x42, 0xef, 0x65, 0x2c, 0x15, 0xa1,
	0xab, 0x76, 0xa1, 0x2f, 0x50, 0x45, 0x41, 0x50, 0x0a, 0x23, 0xb8, 0x70, 0x33, 0x8c, 0xc9, 0x29,
	0x0d, 0x74, 0x92, 0x21, 0xc9, 0xf4, 0x67, 0xe9, 0x1b, 0xf8, 0x58, 0x2e, 0xbb, 0x74, 0x29, 0x9d,
	0x17, 0x91, 0x99, 0xb4, 0x53, 0x05, 0x37, 0xba, 0x9b, 0xf3, 0xcd, 0x17, 0xbe, 0xb3, 0x38, 0xf8,
	0xc8, 0xc0, 0x7c, 0xca, 0x66, 0xa1, 0x90, 0x23, 0xc1, 0x41, 0x5a, 0x61, 0xd7, 0x23, 0x58, 0x80,
	0xb4, 0x66, 0x18, 0x6b, 0x65, 0x15, 0x21, 0x85, 0x30, 0xdc, 0x0b, 0xfd, 0x27, 0x84, 0xff, 0x5e,
	0x66, 0xd2, 0x64, 0x9c, 0xd8, 0xd9, 0x3d, 0x68, 0x31, 0x15, 0x2c, 0xb4, 0x42, 0x49, 0xd2, 0xc5,
	0x8d, 0x58, 0xab, 0x85, 0xe0, 0xa0, 0x29, 0xea, 0xa1, 0x41, 0xd3, 0x2f, 0x66, 0xf2, 0x0f, 0x37,
	0x8d, 0x62, 0x22, 0x9c, 0x07, 0x82, 0xd3, 0x5f, 0xee, 0xa7, 0x03, 0xd7, 0x9c, 0x50, 0x5c, 0x37,
	0x09, 0x63, 0x60, 0x0c, 0x2d, 0xf7, 0xd0, 0xa0, 0xe1, 0xef, 0x47, 0xd2, 0xc1, 0x55, 0xd0, 0x5a,
	0x69, 0x5a, 0xc9, 0x9f, 0xb8, 0xa1, 0x9f, 0xe0, 0x4e, 0xbe, 0xc2, 0xed, 0xd5, 0xf8, 0xd3, 0x02,
	0x7f, 0x70, 0x99, 0x0b, 0xbe, 0x6b, 0x67, 0x9f, 0x59, 0x36, 0x02, 0x3b, 0x53, 0xfc, 0x43, 0xd6,
	0x81, 0x1f, 0x64, 0x53, 0x84, 0xdb, 0x79, 0xd7, 0x0f, 0x2d, 0xdc, 0x88, 0x48, 0xd8, 0x2f, 0x8a,
	0xff, 0x71, 0x53, 0xc5, 0xa0, 0xf3, 0x85, 0x76, 0xc5, 0x03, 0xf8, 0x6e, 0x92, 0x9c, 0xe0, 0xf6,
	0x52, 0x48, 0xae, 0x96, 0x81, 0x01, 0xa6, 0x24, 0x37, 0xb4, 0xda, 0x43, 0x83, 0x8a, 0xdf, 0x72,
	0xf4, 0xce, 0xc1, 0x4c, 0x8b, 0xc2, 0x55, 0x50, 0x74, 0x0c, 0xad, 0x39, 0x2d, 0x0a, 0x57, 0x93,
	0x02, 0x92, 0x63, 0xdc, 0x62, 0x89, 0xd6, 0x20, 0x6d, 0xc0, 0x54, 0x22, 0x2d, 0xad, 0xe7, 0xd6,
	0xef, 0x1d, 0xbc, 0xc8, 0xd8, 0xf9, 0xd9, 0xcb, 0xd6, 0x43, 0x9b, 0xad, 0x87, 0xde, 0xb6, 0x1e,
	0x7a, 0x4e, 0xbd, 0xd2, 0x26, 0xf5, 0x4a, 0xaf, 0xa9, 0x57, 0x7a, 0xe8, 0x1e, 0xee, 0x65, 0x75,
	0xb8, 0x18, 0xbb, 0x8e, 0xc1, 0x3c, 0xd6, 0xf2, 0x8b, 0x39, 0x7d, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x4c, 0x3c, 0x57, 0x85, 0x54, 0x02, 0x00, 0x00,
}

func (m *EventOAuthVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOAuthVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOAuthVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.SocialId) > 0 {
		i -= len(m.SocialId)
		copy(dAtA[i:], m.SocialId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SocialId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMFAVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMFAVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMFAVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MethodId) > 0 {
		i -= len(m.MethodId)
		copy(dAtA[i:], m.MethodId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MethodId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentCount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CurrentCount))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxOperations != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.MaxOperations))
		i--
		dAtA[i] = 0x30
	}
	if m.WindowSeconds != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.WindowSeconds))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventOAuthVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SocialId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventMFAVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MethodId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.WindowSeconds != 0 {
		n += 1 + sovEvents(uint64(m.WindowSeconds))
	}
	if m.MaxOperations != 0 {
		n += 1 + sovEvents(uint64(m.MaxOperations))
	}
	if m.CurrentCount != 0 {
		n += 1 + sovEvents(uint64(m.CurrentCount))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventOAuthVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOAuthVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOAuthVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMFAVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMFAVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMFAVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowSeconds", wireType)
			}
			m.WindowSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOperations", wireType)
			}
			m.MaxOperations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOperations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCount", wireType)
			}
			m.CurrentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
