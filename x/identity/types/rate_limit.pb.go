// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/rate_limit.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RateLimit represents a rate limit configuration for an operation
type RateLimit struct {
	Did          string    `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Operation    string    `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	MaxRequests  uint64    `protobuf:"varint,3,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
	TimeWindow   uint64    `protobuf:"varint,4,opt,name=time_window,json=timeWindow,proto3" json:"time_window,omitempty"`
	BurstLimit   uint64    `protobuf:"varint,5,opt,name=burst_limit,json=burstLimit,proto3" json:"burst_limit,omitempty"`
	CurrentCount uint64    `protobuf:"varint,6,opt,name=current_count,json=currentCount,proto3" json:"current_count,omitempty"`
	LastReset    time.Time `protobuf:"bytes,7,opt,name=last_reset,json=lastReset,proto3,stdtime" json:"last_reset"`
}

func (m *RateLimit) Reset()         { *m = RateLimit{} }
func (m *RateLimit) String() string { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()    {}
func (*RateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_493ec93dcac7d841, []int{0}
}
func (m *RateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimit.Merge(m, src)
}
func (m *RateLimit) XXX_Size() int {
	return m.Size()
}
func (m *RateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimit proto.InternalMessageInfo

func (m *RateLimit) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *RateLimit) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *RateLimit) GetMaxRequests() uint64 {
	if m != nil {
		return m.MaxRequests
	}
	return 0
}

func (m *RateLimit) GetTimeWindow() uint64 {
	if m != nil {
		return m.TimeWindow
	}
	return 0
}

func (m *RateLimit) GetBurstLimit() uint64 {
	if m != nil {
		return m.BurstLimit
	}
	return 0
}

func (m *RateLimit) GetCurrentCount() uint64 {
	if m != nil {
		return m.CurrentCount
	}
	return 0
}

func (m *RateLimit) GetLastReset() time.Time {
	if m != nil {
		return m.LastReset
	}
	return time.Time{}
}

// RateLimitData represents rate limit data for an operation
type RateLimitData struct {
	LastRequestTime      int64 `protobuf:"varint,1,opt,name=last_request_time,json=lastRequestTime,proto3" json:"last_request_time,omitempty"`
	RequestsInLastMinute int32 `protobuf:"varint,2,opt,name=requests_in_last_minute,json=requestsInLastMinute,proto3" json:"requests_in_last_minute,omitempty"`
	RequestsInLastHour   int32 `protobuf:"varint,3,opt,name=requests_in_last_hour,json=requestsInLastHour,proto3" json:"requests_in_last_hour,omitempty"`
	RequestsInLastDay    int32 `protobuf:"varint,4,opt,name=requests_in_last_day,json=requestsInLastDay,proto3" json:"requests_in_last_day,omitempty"`
}

func (m *RateLimitData) Reset()         { *m = RateLimitData{} }
func (m *RateLimitData) String() string { return proto.CompactTextString(m) }
func (*RateLimitData) ProtoMessage()    {}
func (*RateLimitData) Descriptor() ([]byte, []int) {
	return fileDescriptor_493ec93dcac7d841, []int{1}
}
func (m *RateLimitData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitData.Merge(m, src)
}
func (m *RateLimitData) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitData) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitData.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitData proto.InternalMessageInfo

func (m *RateLimitData) GetLastRequestTime() int64 {
	if m != nil {
		return m.LastRequestTime
	}
	return 0
}

func (m *RateLimitData) GetRequestsInLastMinute() int32 {
	if m != nil {
		return m.RequestsInLastMinute
	}
	return 0
}

func (m *RateLimitData) GetRequestsInLastHour() int32 {
	if m != nil {
		return m.RequestsInLastHour
	}
	return 0
}

func (m *RateLimitData) GetRequestsInLastDay() int32 {
	if m != nil {
		return m.RequestsInLastDay
	}
	return 0
}

func init() {
	proto.RegisterType((*RateLimit)(nil), "selfchain.identity.RateLimit")
	proto.RegisterType((*RateLimitData)(nil), "selfchain.identity.RateLimitData")
}

func init() {
	proto.RegisterFile("selfchain/identity/rate_limit.proto", fileDescriptor_493ec93dcac7d841)
}

var fileDescriptor_493ec93dcac7d841 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcd, 0x6a, 0x1b, 0x31,
	0x14, 0x85, 0xad, 0x38, 0x4e, 0x6b, 0x39, 0xa1, 0x8d, 0x70, 0xe9, 0x60, 0xca, 0xd8, 0x4d, 0x36,
	0xa6, 0x8b, 0x19, 0xfa, 0xf7, 0x02, 0x49, 0x16, 0x2d, 0xa4, 0x1b, 0x51, 0x28, 0x74, 0x23, 0x64,
	0x8f, 0xe2, 0x08, 0x3c, 0x92, 0x2b, 0x5d, 0x11, 0xcf, 0x2b, 0x74, 0x95, 0xc7, 0xca, 0x32, 0xab,
	0xd2, 0x55, 0x5b, 0xec, 0x17, 0x29, 0xba, 0xe3, 0x89, 0x09, 0xde, 0x69, 0xbe, 0x7b, 0xce, 0x1d,
	0x9d, 0x83, 0xe8, 0xa9, 0x57, 0xf3, 0xab, 0xe9, 0xb5, 0xd4, 0x26, 0xd7, 0x85, 0x32, 0xa0, 0xa1,
	0xca, 0x9d, 0x04, 0x25, 0xe6, 0xba, 0xd4, 0x90, 0x2d, 0x9c, 0x05, 0xcb, 0xd8, 0x83, 0x28, 0x6b,
	0x44, 0x83, 0xfe, 0xcc, 0xce, 0x2c, 0x8e, 0xf3, 0x78, 0xaa, 0x95, 0x83, 0xe1, 0xcc, 0xda, 0xd9,
	0x5c, 0xe5, 0xf8, 0x35, 0x09, 0x57, 0x39, 0xe8, 0x52, 0x79, 0x90, 0xe5, 0xa2, 0x16, 0x9c, 0xfc,
	0xdc, 0xa3, 0x5d, 0x2e, 0x41, 0x5d, 0xc6, 0xf5, 0xec, 0x39, 0x6d, 0x17, 0xba, 0x48, 0xc8, 0x88,
	0x8c, 0xbb, 0x3c, 0x1e, 0xd9, 0x2b, 0xda, 0xb5, 0x0b, 0xe5, 0x24, 0x68, 0x6b, 0x92, 0x3d, 0xe4,
	0x5b, 0xc0, 0x5e, 0xd3, 0xc3, 0x52, 0x2e, 0x85, 0x53, 0x3f, 0x82, 0xf2, 0xe0, 0x93, 0xf6, 0x88,
	0x8c, 0xf7, 0x79, 0xaf, 0x94, 0x4b, 0xbe, 0x41, 0x6c, 0x48, 0x7b, 0xf1, 0x9f, 0xe2, 0x46, 0x9b,
	0xc2, 0xde, 0x24, 0xfb, 0xa8, 0xa0, 0x11, 0x7d, 0x43, 0x12, 0x05, 0x93, 0xe0, 0x3c, 0xd4, 0x09,
	0x93, 0x4e, 0x2d, 0x40, 0x54, 0x5f, 0xea, 0x94, 0x1e, 0x4d, 0x83, 0x73, 0xca, 0x80, 0x98, 0xda,
	0x60, 0x20, 0x39, 0x40, 0xc9, 0xe1, 0x06, 0x9e, 0x47, 0xc6, 0xce, 0x29, 0x9d, 0x4b, 0x0f, 0xc2,
	0x29, 0xaf, 0x20, 0x79, 0x32, 0x22, 0xe3, 0xde, 0xbb, 0x41, 0x56, 0xa7, 0xcf, 0x9a, 0xf4, 0xd9,
	0xd7, 0x26, 0xfd, 0xd9, 0xd3, 0xbb, 0x3f, 0xc3, 0xd6, 0xed, 0xdf, 0x21, 0xe1, 0xdd, 0xe8, 0xe3,
	0xd1, 0x76, 0xf2, 0x8b, 0xd0, 0xa3, 0x87, 0x32, 0x2e, 0x24, 0x48, 0xf6, 0x86, 0x1e, 0x6f, 0xd6,
	0x62, 0x1c, 0x11, 0xef, 0x8d, 0xf5, 0xb4, 0xf9, 0xb3, 0xda, 0x87, 0x3c, 0xee, 0x65, 0x1f, 0xe9,
	0xcb, 0xa6, 0x08, 0xa1, 0x8d, 0x40, 0x5f, 0xa9, 0x4d, 0x00, 0x85, 0xc5, 0x75, 0x78, 0xbf, 0x19,
	0x7f, 0x36, 0x97, 0xd2, 0xc3, 0x17, 0x9c, 0xb1, 0xb7, 0xf4, 0xc5, 0x8e, 0xed, 0xda, 0x06, 0x87,
	0x65, 0x76, 0x38, 0x7b, 0x6c, 0xfa, 0x64, 0x83, 0x63, 0x39, 0xed, 0xef, 0x58, 0x0a, 0x59, 0x61,
	0xb9, 0x1d, 0x7e, 0xfc, 0xd8, 0x71, 0x21, 0xab, 0xb3, 0x0f, 0x77, 0xab, 0x94, 0xdc, 0xaf, 0x52,
	0xf2, 0x6f, 0x95, 0x92, 0xdb, 0x75, 0xda, 0xba, 0x5f, 0xa7, 0xad, 0xdf, 0xeb, 0xb4, 0xf5, 0x7d,
	0xb0, 0x7d, 0x6f, 0xcb, 0xed, 0x8b, 0x83, 0x6a, 0xa1, 0xfc, 0xe4, 0x00, 0x7b, 0x7b, 0xff, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0xec, 0x4b, 0xc0, 0x38, 0x94, 0x02, 0x00, 0x00,
}

func (m *RateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastReset, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastReset):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintRateLimit(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if m.CurrentCount != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.CurrentCount))
		i--
		dAtA[i] = 0x30
	}
	if m.BurstLimit != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.BurstLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.TimeWindow != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.TimeWindow))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxRequests != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.MaxRequests))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintRateLimit(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintRateLimit(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestsInLastDay != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.RequestsInLastDay))
		i--
		dAtA[i] = 0x20
	}
	if m.RequestsInLastHour != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.RequestsInLastHour))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestsInLastMinute != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.RequestsInLastMinute))
		i--
		dAtA[i] = 0x10
	}
	if m.LastRequestTime != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.LastRequestTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRateLimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovRateLimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovRateLimit(uint64(l))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovRateLimit(uint64(l))
	}
	if m.MaxRequests != 0 {
		n += 1 + sovRateLimit(uint64(m.MaxRequests))
	}
	if m.TimeWindow != 0 {
		n += 1 + sovRateLimit(uint64(m.TimeWindow))
	}
	if m.BurstLimit != 0 {
		n += 1 + sovRateLimit(uint64(m.BurstLimit))
	}
	if m.CurrentCount != 0 {
		n += 1 + sovRateLimit(uint64(m.CurrentCount))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastReset)
	n += 1 + l + sovRateLimit(uint64(l))
	return n
}

func (m *RateLimitData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastRequestTime != 0 {
		n += 1 + sovRateLimit(uint64(m.LastRequestTime))
	}
	if m.RequestsInLastMinute != 0 {
		n += 1 + sovRateLimit(uint64(m.RequestsInLastMinute))
	}
	if m.RequestsInLastHour != 0 {
		n += 1 + sovRateLimit(uint64(m.RequestsInLastHour))
	}
	if m.RequestsInLastDay != 0 {
		n += 1 + sovRateLimit(uint64(m.RequestsInLastDay))
	}
	return n
}

func sovRateLimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRateLimit(x uint64) (n int) {
	return sovRateLimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRateLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequests", wireType)
			}
			m.MaxRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeWindow", wireType)
			}
			m.TimeWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstLimit", wireType)
			}
			m.BurstLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCount", wireType)
			}
			m.CurrentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRateLimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastReset, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRateLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRateLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRateLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRequestTime", wireType)
			}
			m.LastRequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRequestTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsInLastMinute", wireType)
			}
			m.RequestsInLastMinute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsInLastMinute |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsInLastHour", wireType)
			}
			m.RequestsInLastHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsInLastHour |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsInLastDay", wireType)
			}
			m.RequestsInLastDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsInLastDay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRateLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRateLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRateLimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRateLimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRateLimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRateLimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRateLimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRateLimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRateLimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRateLimit = fmt.Errorf("proto: unexpected end of group")
)
