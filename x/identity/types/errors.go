package types

import (
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

// Identity module sentinel errors
var (
	// Common errors (1-99)
	ErrInvalidDID          = sdkerrors.Register(ModuleName, 1, "invalid DID")
	ErrInvalidDocument     = sdkerrors.Register(ModuleName, 2, "invalid DID document")
	ErrDIDNotFound         = sdkerrors.Register(ModuleName, 3, "DID not found")
	ErrUnauthorized        = sdkerrors.Register(ModuleName, 4, "unauthorized")
	ErrInvalidSignature    = sdkerrors.Register(ModuleName, 5, "invalid signature")
	ErrInvalidController   = sdkerrors.Register(ModuleName, 6, "invalid controller")
	ErrInvalidVerification = sdkerrors.Register(ModuleName, 7, "invalid verification method")
	ErrInvalidService      = sdkerrors.Register(ModuleName, 8, "invalid service")
	ErrInvalidProof        = sdkerrors.Register(ModuleName, 9, "invalid proof")
	ErrInvalidContext      = sdkerrors.Register(ModuleName, 10, "invalid context")
	ErrInvalidRequest      = sdkerrors.Register(ModuleName, 11, "invalid request")
	ErrDIDInactive         = sdkerrors.Register(ModuleName, 12, "DID is inactive")
	ErrDIDAlreadyExists    = sdkerrors.Register(ModuleName, 13, "DID already exists")

	// Credential errors (100-199)
	ErrInvalidCredential        = sdkerrors.Register(ModuleName, 100, "invalid credential")
	ErrCredentialNotFound       = sdkerrors.Register(ModuleName, 101, "credential not found")
	ErrCredentialAlreadyExists  = sdkerrors.Register(ModuleName, 102, "credential already exists")
	ErrCredentialAlreadyRevoked = sdkerrors.Register(ModuleName, 103, "credential already revoked")
	ErrInvalidCredentialStatus  = sdkerrors.Register(ModuleName, 104, "invalid credential status")
	ErrInvalidCredentialClaims  = sdkerrors.Register(ModuleName, 105, "invalid credential claims")
	ErrInvalidCredentialProof   = sdkerrors.Register(ModuleName, 106, "invalid credential proof")
	ErrInvalidCredentialIssuer  = sdkerrors.Register(ModuleName, 107, "invalid credential issuer")
	ErrInvalidCredentialSubject = sdkerrors.Register(ModuleName, 108, "invalid credential subject")
	ErrInvalidPresentation      = sdkerrors.Register(ModuleName, 109, "invalid presentation")
	ErrPresentationNotFound     = sdkerrors.Register(ModuleName, 110, "presentation not found")
	ErrInvalidStatus            = sdkerrors.Register(ModuleName, 111, "invalid status")
	ErrInvalidType              = sdkerrors.Register(ModuleName, 112, "invalid type")
	ErrInvalidIssuer            = sdkerrors.Register(ModuleName, 113, "invalid issuer")
	ErrInvalidSubject           = sdkerrors.Register(ModuleName, 114, "invalid subject")
	ErrInvalidExpiryDate        = sdkerrors.Register(ModuleName, 115, "invalid expiry date")
	ErrInvalidCredentialID      = sdkerrors.Register(ModuleName, 116, "invalid credential ID")
	ErrInvalidCredentialType    = sdkerrors.Register(ModuleName, 117, "invalid credential type")

	// MFA errors (200-299)
	ErrInvalidMFAConfig       = sdkerrors.Register(ModuleName, 200, "invalid MFA configuration")
	ErrMFAMethodAlreadyExists = sdkerrors.Register(ModuleName, 201, "MFA method already exists")
	ErrInvalidMFACode         = sdkerrors.Register(ModuleName, 202, "invalid MFA code")
	ErrMFAMethodNotFound      = sdkerrors.Register(ModuleName, 203, "MFA method not found")
	ErrMFASessionExpired      = sdkerrors.Register(ModuleName, 204, "MFA session expired")
	ErrMFASessionNotFound     = sdkerrors.Register(ModuleName, 205, "MFA session not found")
	ErrMFAVerificationFailed  = sdkerrors.Register(ModuleName, 206, "MFA verification failed")
	ErrInvalidMFAMethod       = sdkerrors.Register(ModuleName, 207, "invalid MFA method")
	ErrMFAMethodDisabled      = sdkerrors.Register(ModuleName, 208, "MFA method is disabled")
	ErrMFAMethodInactive      = sdkerrors.Register(ModuleName, 209, "MFA method is inactive")

	// OAuth errors (300-399)
	ErrInvalidToken          = sdkerrors.Register(ModuleName, 300, "invalid OAuth token")
	ErrInvalidProvider       = sdkerrors.Register(ModuleName, 301, "invalid OAuth provider")
	ErrProviderNotFound      = sdkerrors.Register(ModuleName, 302, "OAuth provider not found")
	ErrTokenExpired          = sdkerrors.Register(ModuleName, 303, "OAuth token expired")
	ErrTokenVerification     = sdkerrors.Register(ModuleName, 304, "OAuth token verification failed")
	ErrInvalidTokenClaims    = sdkerrors.Register(ModuleName, 305, "invalid OAuth token claims")
	ErrInvalidTokenScope     = sdkerrors.Register(ModuleName, 306, "invalid OAuth token scope")
	ErrInvalidTokenResponse  = sdkerrors.Register(ModuleName, 307, "invalid OAuth token response")
	ErrInvalidOAuthToken     = sdkerrors.Register(ModuleName, 308, "invalid oauth token")
	ErrOAuthProviderNotFound = sdkerrors.Register(ModuleName, 309, "oauth provider not found")

	// Recovery errors (400-499)
	ErrInvalidRecoverySession  = sdkerrors.Register(ModuleName, 400, "invalid recovery session")
	ErrRecoverySessionExpired  = sdkerrors.Register(ModuleName, 401, "recovery session expired")
	ErrRecoverySessionNotFound = sdkerrors.Register(ModuleName, 402, "recovery session not found")
	ErrInvalidRecoveryCode     = sdkerrors.Register(ModuleName, 403, "invalid recovery code")
	ErrRecoveryCodeExpired     = sdkerrors.Register(ModuleName, 404, "recovery code expired")
	ErrInvalidRecoveryMethod   = sdkerrors.Register(ModuleName, 405, "invalid recovery method")
	ErrRecoveryNotEnabled      = sdkerrors.Register(ModuleName, 406, "recovery not enabled")

	// Rate limit errors (700-799)
	ErrRateLimitExceeded = sdkerrors.Register(ModuleName, 700, "rate limit exceeded")
	ErrInvalidRateLimit  = sdkerrors.Register(ModuleName, 701, "invalid rate limit configuration")

	// DID and social identity errors (800-899)
	ErrInvalidSocialIdentity  = sdkerrors.Register(ModuleName, 800, "invalid social identity")
	ErrSocialIdentityExists   = sdkerrors.Register(ModuleName, 801, "social identity already exists")
	ErrSocialIdentityNotFound = sdkerrors.Register(ModuleName, 802, "social identity not found")
)
