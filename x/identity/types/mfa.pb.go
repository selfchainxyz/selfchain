// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/mfa.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MFAMethodStatus represents the status of an MFA method
type MFAMethodStatus int32

const (
	MFAMethodStatus_MFA_METHOD_STATUS_UNSPECIFIED MFAMethodStatus = 0
	MFAMethodStatus_MFA_METHOD_STATUS_ACTIVE      MFAMethodStatus = 1
	MFAMethodStatus_MFA_METHOD_STATUS_PENDING     MFAMethodStatus = 2
	MFAMethodStatus_MFA_METHOD_STATUS_DISABLED    MFAMethodStatus = 3
)

var MFAMethodStatus_name = map[int32]string{
	0: "MFA_METHOD_STATUS_UNSPECIFIED",
	1: "MFA_METHOD_STATUS_ACTIVE",
	2: "MFA_METHOD_STATUS_PENDING",
	3: "MFA_METHOD_STATUS_DISABLED",
}

var MFAMethodStatus_value = map[string]int32{
	"MFA_METHOD_STATUS_UNSPECIFIED": 0,
	"MFA_METHOD_STATUS_ACTIVE":      1,
	"MFA_METHOD_STATUS_PENDING":     2,
	"MFA_METHOD_STATUS_DISABLED":    3,
}

func (x MFAMethodStatus) String() string {
	return proto.EnumName(MFAMethodStatus_name, int32(x))
}

func (MFAMethodStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{0}
}

// MFASessionStatus represents the status of an MFA session
type MFASessionStatus int32

const (
	MFASessionStatus_MFA_SESSION_STATUS_UNSPECIFIED MFASessionStatus = 0
	MFASessionStatus_MFA_SESSION_STATUS_PENDING     MFASessionStatus = 1
	MFASessionStatus_MFA_SESSION_STATUS_VERIFIED    MFASessionStatus = 2
	MFASessionStatus_MFA_SESSION_STATUS_EXPIRED     MFASessionStatus = 3
)

var MFASessionStatus_name = map[int32]string{
	0: "MFA_SESSION_STATUS_UNSPECIFIED",
	1: "MFA_SESSION_STATUS_PENDING",
	2: "MFA_SESSION_STATUS_VERIFIED",
	3: "MFA_SESSION_STATUS_EXPIRED",
}

var MFASessionStatus_value = map[string]int32{
	"MFA_SESSION_STATUS_UNSPECIFIED": 0,
	"MFA_SESSION_STATUS_PENDING":     1,
	"MFA_SESSION_STATUS_VERIFIED":    2,
	"MFA_SESSION_STATUS_EXPIRED":     3,
}

func (x MFASessionStatus) String() string {
	return proto.EnumName(MFASessionStatus_name, int32(x))
}

func (MFASessionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{1}
}

// MFAConfig represents the MFA configuration for a DID
type MFAConfig struct {
	Did     string       `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Methods []*MFAMethod `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty"`
}

func (m *MFAConfig) Reset()         { *m = MFAConfig{} }
func (m *MFAConfig) String() string { return proto.CompactTextString(m) }
func (*MFAConfig) ProtoMessage()    {}
func (*MFAConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{0}
}
func (m *MFAConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MFAConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MFAConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MFAConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MFAConfig.Merge(m, src)
}
func (m *MFAConfig) XXX_Size() int {
	return m.Size()
}
func (m *MFAConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MFAConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MFAConfig proto.InternalMessageInfo

func (m *MFAConfig) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MFAConfig) GetMethods() []*MFAMethod {
	if m != nil {
		return m.Methods
	}
	return nil
}

// MFAMethod represents an MFA method
type MFAMethod struct {
	Type      string          `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Secret    string          `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	CreatedAt *time.Time      `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	Status    MFAMethodStatus `protobuf:"varint,4,opt,name=status,proto3,enum=selfchain.identity.MFAMethodStatus" json:"status,omitempty"`
}

func (m *MFAMethod) Reset()         { *m = MFAMethod{} }
func (m *MFAMethod) String() string { return proto.CompactTextString(m) }
func (*MFAMethod) ProtoMessage()    {}
func (*MFAMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{1}
}
func (m *MFAMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MFAMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MFAMethod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MFAMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MFAMethod.Merge(m, src)
}
func (m *MFAMethod) XXX_Size() int {
	return m.Size()
}
func (m *MFAMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_MFAMethod.DiscardUnknown(m)
}

var xxx_messageInfo_MFAMethod proto.InternalMessageInfo

func (m *MFAMethod) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MFAMethod) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *MFAMethod) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *MFAMethod) GetStatus() MFAMethodStatus {
	if m != nil {
		return m.Status
	}
	return MFAMethodStatus_MFA_METHOD_STATUS_UNSPECIFIED
}

// MFASession represents an active MFA verification session
type MFASession struct {
	Did       string           `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Token     string           `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	CreatedAt *time.Time       `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	ExpiresAt *time.Time       `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at,omitempty"`
	Status    MFASessionStatus `protobuf:"varint,5,opt,name=status,proto3,enum=selfchain.identity.MFASessionStatus" json:"status,omitempty"`
}

func (m *MFASession) Reset()         { *m = MFASession{} }
func (m *MFASession) String() string { return proto.CompactTextString(m) }
func (*MFASession) ProtoMessage()    {}
func (*MFASession) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{2}
}
func (m *MFASession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MFASession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MFASession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MFASession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MFASession.Merge(m, src)
}
func (m *MFASession) XXX_Size() int {
	return m.Size()
}
func (m *MFASession) XXX_DiscardUnknown() {
	xxx_messageInfo_MFASession.DiscardUnknown(m)
}

var xxx_messageInfo_MFASession proto.InternalMessageInfo

func (m *MFASession) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MFASession) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MFASession) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *MFASession) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *MFASession) GetStatus() MFASessionStatus {
	if m != nil {
		return m.Status
	}
	return MFASessionStatus_MFA_SESSION_STATUS_UNSPECIFIED
}

// MFAChallenge represents an MFA challenge
type MFAChallenge struct {
	Id        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Did       string     `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Method    string     `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	CreatedAt *time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	ExpiresAt *time.Time `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at,omitempty"`
}

func (m *MFAChallenge) Reset()         { *m = MFAChallenge{} }
func (m *MFAChallenge) String() string { return proto.CompactTextString(m) }
func (*MFAChallenge) ProtoMessage()    {}
func (*MFAChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{3}
}
func (m *MFAChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MFAChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MFAChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MFAChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MFAChallenge.Merge(m, src)
}
func (m *MFAChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MFAChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MFAChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MFAChallenge proto.InternalMessageInfo

func (m *MFAChallenge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MFAChallenge) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MFAChallenge) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *MFAChallenge) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *MFAChallenge) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

// Messages
type MsgAddMFA struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Did     string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Method  string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Secret  string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *MsgAddMFA) Reset()         { *m = MsgAddMFA{} }
func (m *MsgAddMFA) String() string { return proto.CompactTextString(m) }
func (*MsgAddMFA) ProtoMessage()    {}
func (*MsgAddMFA) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{4}
}
func (m *MsgAddMFA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMFA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMFA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMFA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMFA.Merge(m, src)
}
func (m *MsgAddMFA) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMFA) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMFA.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMFA proto.InternalMessageInfo

func (m *MsgAddMFA) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddMFA) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MsgAddMFA) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *MsgAddMFA) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type MsgAddMFAResponse struct {
}

func (m *MsgAddMFAResponse) Reset()         { *m = MsgAddMFAResponse{} }
func (m *MsgAddMFAResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMFAResponse) ProtoMessage()    {}
func (*MsgAddMFAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{5}
}
func (m *MsgAddMFAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMFAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMFAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMFAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMFAResponse.Merge(m, src)
}
func (m *MsgAddMFAResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMFAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMFAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMFAResponse proto.InternalMessageInfo

type MsgRemoveMFA struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Did     string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Method  string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
}

func (m *MsgRemoveMFA) Reset()         { *m = MsgRemoveMFA{} }
func (m *MsgRemoveMFA) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMFA) ProtoMessage()    {}
func (*MsgRemoveMFA) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{6}
}
func (m *MsgRemoveMFA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMFA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMFA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMFA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMFA.Merge(m, src)
}
func (m *MsgRemoveMFA) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMFA) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMFA.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMFA proto.InternalMessageInfo

func (m *MsgRemoveMFA) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveMFA) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MsgRemoveMFA) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

type MsgRemoveMFAResponse struct {
}

func (m *MsgRemoveMFAResponse) Reset()         { *m = MsgRemoveMFAResponse{} }
func (m *MsgRemoveMFAResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMFAResponse) ProtoMessage()    {}
func (*MsgRemoveMFAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{7}
}
func (m *MsgRemoveMFAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMFAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMFAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMFAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMFAResponse.Merge(m, src)
}
func (m *MsgRemoveMFAResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMFAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMFAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMFAResponse proto.InternalMessageInfo

type MsgVerifyMFA struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Did     string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Method  string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Code    string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *MsgVerifyMFA) Reset()         { *m = MsgVerifyMFA{} }
func (m *MsgVerifyMFA) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyMFA) ProtoMessage()    {}
func (*MsgVerifyMFA) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{8}
}
func (m *MsgVerifyMFA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyMFA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyMFA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyMFA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyMFA.Merge(m, src)
}
func (m *MsgVerifyMFA) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyMFA) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyMFA.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyMFA proto.InternalMessageInfo

func (m *MsgVerifyMFA) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVerifyMFA) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MsgVerifyMFA) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *MsgVerifyMFA) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type MsgVerifyMFAResponse struct {
}

func (m *MsgVerifyMFAResponse) Reset()         { *m = MsgVerifyMFAResponse{} }
func (m *MsgVerifyMFAResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyMFAResponse) ProtoMessage()    {}
func (*MsgVerifyMFAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f98fdf45cff8027, []int{9}
}
func (m *MsgVerifyMFAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyMFAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyMFAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyMFAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyMFAResponse.Merge(m, src)
}
func (m *MsgVerifyMFAResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyMFAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyMFAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyMFAResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("selfchain.identity.MFAMethodStatus", MFAMethodStatus_name, MFAMethodStatus_value)
	proto.RegisterEnum("selfchain.identity.MFASessionStatus", MFASessionStatus_name, MFASessionStatus_value)
	proto.RegisterType((*MFAConfig)(nil), "selfchain.identity.MFAConfig")
	proto.RegisterType((*MFAMethod)(nil), "selfchain.identity.MFAMethod")
	proto.RegisterType((*MFASession)(nil), "selfchain.identity.MFASession")
	proto.RegisterType((*MFAChallenge)(nil), "selfchain.identity.MFAChallenge")
	proto.RegisterType((*MsgAddMFA)(nil), "selfchain.identity.MsgAddMFA")
	proto.RegisterType((*MsgAddMFAResponse)(nil), "selfchain.identity.MsgAddMFAResponse")
	proto.RegisterType((*MsgRemoveMFA)(nil), "selfchain.identity.MsgRemoveMFA")
	proto.RegisterType((*MsgRemoveMFAResponse)(nil), "selfchain.identity.MsgRemoveMFAResponse")
	proto.RegisterType((*MsgVerifyMFA)(nil), "selfchain.identity.MsgVerifyMFA")
	proto.RegisterType((*MsgVerifyMFAResponse)(nil), "selfchain.identity.MsgVerifyMFAResponse")
}

func init() { proto.RegisterFile("selfchain/identity/mfa.proto", fileDescriptor_6f98fdf45cff8027) }

var fileDescriptor_6f98fdf45cff8027 = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x3a, 0x6e, 0xaa, 0x4c, 0xab, 0x12, 0x96, 0xaa, 0x32, 0xa1, 0x75, 0x83, 0xe1, 0x10,
	0xf5, 0xe0, 0x48, 0x05, 0x89, 0x03, 0x48, 0x95, 0xdb, 0x38, 0x60, 0x09, 0xa7, 0x95, 0x9d, 0x46,
	0x88, 0x4b, 0xe4, 0xc6, 0x1b, 0xd7, 0x22, 0xf1, 0x46, 0xd9, 0x2d, 0x6a, 0xff, 0xa2, 0x9c, 0xf8,
	0x12, 0xfe, 0x01, 0x71, 0xea, 0x91, 0x1b, 0xa8, 0xfd, 0x05, 0x3e, 0x00, 0x79, 0x6d, 0x27, 0x55,
	0x92, 0x22, 0xaa, 0xf6, 0x36, 0xe3, 0x79, 0xf3, 0xde, 0xbc, 0xc9, 0x64, 0x61, 0x9d, 0x91, 0x7e,
	0xaf, 0x7b, 0xec, 0x85, 0x51, 0x2d, 0xf4, 0x49, 0xc4, 0x43, 0x7e, 0x56, 0x1b, 0xf4, 0x3c, 0x7d,
	0x38, 0xa2, 0x9c, 0x62, 0x3c, 0xae, 0xea, 0x59, 0xb5, 0xbc, 0x1a, 0xd0, 0x80, 0x8a, 0x72, 0x2d,
	0x8e, 0x12, 0x64, 0x79, 0x33, 0xa0, 0x34, 0xe8, 0x93, 0x9a, 0xc8, 0x8e, 0x4e, 0x7a, 0x35, 0x1e,
	0x0e, 0x08, 0xe3, 0xde, 0x60, 0x98, 0x00, 0xb4, 0x36, 0x14, 0xed, 0x86, 0xb1, 0x47, 0xa3, 0x5e,
	0x18, 0xe0, 0x12, 0xe4, 0xfd, 0xd0, 0x57, 0x50, 0x05, 0x55, 0x8b, 0x4e, 0x1c, 0xe2, 0x57, 0xb0,
	0x38, 0x20, 0xfc, 0x98, 0xfa, 0x4c, 0x91, 0x2a, 0xf9, 0xea, 0xd2, 0xf6, 0x86, 0x3e, 0xab, 0xad,
	0xdb, 0x0d, 0xc3, 0x16, 0x28, 0x27, 0x43, 0x6b, 0xdf, 0x90, 0x20, 0x4e, 0x3e, 0x63, 0x0c, 0x32,
	0x3f, 0x1b, 0x92, 0x94, 0x59, 0xc4, 0x78, 0x0d, 0x0a, 0x8c, 0x74, 0x47, 0x84, 0x2b, 0x92, 0xf8,
	0x9a, 0x66, 0x78, 0x07, 0xa0, 0x3b, 0x22, 0x1e, 0x27, 0x7e, 0xc7, 0xe3, 0x4a, 0xbe, 0x82, 0xaa,
	0x4b, 0xdb, 0x65, 0x3d, 0xf1, 0xa1, 0x67, 0x3e, 0xf4, 0x56, 0xe6, 0x63, 0x57, 0x3e, 0xff, 0xb5,
	0x89, 0x9c, 0x62, 0xda, 0x63, 0x70, 0xfc, 0x1a, 0x0a, 0x8c, 0x7b, 0xfc, 0x84, 0x29, 0x72, 0x05,
	0x55, 0x57, 0xb6, 0x9f, 0xfd, 0x73, 0x64, 0x57, 0x40, 0x9d, 0xb4, 0x45, 0xfb, 0x83, 0x00, 0xec,
	0x86, 0xe1, 0x12, 0xc6, 0x42, 0x1a, 0xcd, 0xd9, 0xc8, 0x2a, 0x2c, 0x70, 0xfa, 0x89, 0x44, 0xe9,
	0xd4, 0x49, 0x72, 0xf7, 0xa1, 0x77, 0x00, 0xc8, 0xe9, 0x30, 0x1c, 0x11, 0x16, 0x13, 0xc8, 0xff,
	0x4b, 0x90, 0xf6, 0x18, 0x1c, 0xbf, 0x19, 0xbb, 0x5e, 0x10, 0xae, 0x9f, 0xdf, 0xe0, 0x3a, 0x75,
	0x36, 0x65, 0xfb, 0x07, 0x82, 0xe5, 0xf8, 0x0e, 0x8e, 0xbd, 0x7e, 0x9f, 0x44, 0x01, 0xc1, 0x2b,
	0x20, 0x8d, 0x7d, 0x4b, 0xa1, 0x9f, 0x2d, 0x42, 0x9a, 0x2c, 0x62, 0x0d, 0x0a, 0xc9, 0x8f, 0x2d,
	0xec, 0x16, 0x9d, 0x34, 0x9b, 0x5a, 0x85, 0x7c, 0xd7, 0x55, 0x2c, 0xdc, 0x7a, 0x15, 0x5a, 0x00,
	0x45, 0x9b, 0x05, 0x86, 0xef, 0xdb, 0x0d, 0x03, 0x2b, 0xb0, 0x28, 0xa8, 0xe9, 0x28, 0x75, 0x93,
	0xa5, 0xb7, 0xb0, 0x34, 0x39, 0x55, 0xf9, 0xfa, 0xa9, 0x6a, 0x8f, 0xe0, 0xe1, 0x58, 0xc8, 0x21,
	0x6c, 0x48, 0x23, 0x46, 0x34, 0x07, 0x96, 0x6d, 0x16, 0x38, 0x64, 0x40, 0x3f, 0x93, 0x7b, 0x1a,
	0x40, 0x5b, 0x83, 0xd5, 0xeb, 0x9c, 0x63, 0xad, 0x9e, 0xd0, 0x6a, 0x93, 0x51, 0xd8, 0x3b, 0xbb,
	0x2f, 0xb3, 0x18, 0xe4, 0x2e, 0xf5, 0x49, 0x6a, 0x55, 0xc4, 0xa9, 0xfe, 0x58, 0x27, 0xd3, 0xdf,
	0xfa, 0x82, 0xe0, 0xc1, 0xd4, 0x3f, 0x09, 0x3f, 0x85, 0x0d, 0xbb, 0x61, 0x74, 0x6c, 0xb3, 0xf5,
	0x6e, 0xbf, 0xde, 0x71, 0x5b, 0x46, 0xeb, 0xd0, 0xed, 0x1c, 0x36, 0xdd, 0x03, 0x73, 0xcf, 0x6a,
	0x58, 0x66, 0xbd, 0x94, 0xc3, 0xeb, 0xa0, 0xcc, 0x42, 0x8c, 0xbd, 0x96, 0xd5, 0x36, 0x4b, 0x08,
	0x6f, 0xc0, 0xe3, 0xd9, 0xea, 0x81, 0xd9, 0xac, 0x5b, 0xcd, 0xb7, 0x25, 0x09, 0xab, 0x50, 0x9e,
	0x2d, 0xd7, 0x2d, 0xd7, 0xd8, 0x7d, 0x6f, 0xd6, 0x4b, 0xf9, 0xad, 0xaf, 0x08, 0x4a, 0xd3, 0x77,
	0x8e, 0x35, 0x50, 0xe3, 0x26, 0xd7, 0x74, 0x5d, 0x6b, 0xbf, 0x39, 0x7f, 0xaa, 0x94, 0x78, 0x0a,
	0x93, 0x09, 0x23, 0xbc, 0x09, 0x4f, 0xe6, 0xd4, 0xdb, 0xa6, 0x93, 0x10, 0x48, 0x37, 0x10, 0x98,
	0x1f, 0x0e, 0x2c, 0x27, 0x9e, 0x6c, 0xf7, 0xe5, 0xf7, 0x4b, 0x15, 0x5d, 0x5c, 0xaa, 0xe8, 0xf7,
	0xa5, 0x8a, 0xce, 0xaf, 0xd4, 0xdc, 0xc5, 0x95, 0x9a, 0xfb, 0x79, 0xa5, 0xe6, 0x3e, 0x96, 0x27,
	0xcf, 0xfd, 0xe9, 0xe4, 0xc1, 0x8f, 0x9f, 0x49, 0x76, 0x54, 0x10, 0x27, 0xff, 0xe2, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x97, 0x07, 0x48, 0x02, 0x13, 0x06, 0x00, 0x00,
}

func (m *MFAConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MFAConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MFAConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Methods) > 0 {
		for iNdEx := len(m.Methods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Methods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMfa(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MFAMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MFAMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MFAMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMfa(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedAt != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintMfa(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MFASession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MFASession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MFASession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMfa(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpiresAt != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintMfa(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintMfa(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MFAChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MFAChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MFAChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintMfa(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintMfa(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMFA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMFA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMFA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMFAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMFAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMFAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMFA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMFA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMFA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMFAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMFAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMFAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVerifyMFA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyMFA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyMFA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMfa(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyMFAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyMFAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyMFAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMfa(dAtA []byte, offset int, v uint64) int {
	offset -= sovMfa(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MFAConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	if len(m.Methods) > 0 {
		for _, e := range m.Methods {
			l = e.Size()
			n += 1 + l + sovMfa(uint64(l))
		}
	}
	return n
}

func (m *MFAMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovMfa(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMfa(uint64(m.Status))
	}
	return n
}

func (m *MFASession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovMfa(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovMfa(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMfa(uint64(m.Status))
	}
	return n
}

func (m *MFAChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovMfa(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovMfa(uint64(l))
	}
	return n
}

func (m *MsgAddMFA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	return n
}

func (m *MsgAddMFAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveMFA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	return n
}

func (m *MsgRemoveMFAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVerifyMFA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMfa(uint64(l))
	}
	return n
}

func (m *MsgVerifyMFAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMfa(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMfa(x uint64) (n int) {
	return sovMfa(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MFAConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MFAConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MFAConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methods = append(m.Methods, &MFAMethod{})
			if err := m.Methods[len(m.Methods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MFAMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MFAMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MFAMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MFAMethodStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MFASession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MFASession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MFASession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MFASessionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MFAChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MFAChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MFAChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMFA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMFA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMFA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMFAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMFAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMFAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMFA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMFA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMFA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMFAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMFAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMFAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyMFA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyMFA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyMFA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMfa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMfa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyMFAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyMFAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyMFAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMfa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMfa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMfa(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMfa
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMfa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMfa
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMfa
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMfa
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMfa        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMfa          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMfa = fmt.Errorf("proto: unexpected end of group")
)
