// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/credential.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Credential represents a verifiable credential
type Credential struct {
	Id         string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       string     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IssuerDid  string     `protobuf:"bytes,3,opt,name=issuer_did,json=issuerDid,proto3" json:"issuer_did,omitempty"`
	SubjectDid string     `protobuf:"bytes,4,opt,name=subject_did,json=subjectDid,proto3" json:"subject_did,omitempty"`
	Claims     []byte     `protobuf:"bytes,5,opt,name=claims,proto3" json:"claims,omitempty"`
	Revoked    bool       `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	IssuedAt   time.Time  `protobuf:"bytes,7,opt,name=issued_at,json=issuedAt,proto3,stdtime" json:"issued_at"`
	ExpiresAt  *time.Time `protobuf:"bytes,8,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at,omitempty"`
}

func (m *Credential) Reset()         { *m = Credential{} }
func (m *Credential) String() string { return proto.CompactTextString(m) }
func (*Credential) ProtoMessage()    {}
func (*Credential) Descriptor() ([]byte, []int) {
	return fileDescriptor_7272e24855266b3e, []int{0}
}
func (m *Credential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Credential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Credential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Credential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credential.Merge(m, src)
}
func (m *Credential) XXX_Size() int {
	return m.Size()
}
func (m *Credential) XXX_DiscardUnknown() {
	xxx_messageInfo_Credential.DiscardUnknown(m)
}

var xxx_messageInfo_Credential proto.InternalMessageInfo

func (m *Credential) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Credential) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Credential) GetIssuerDid() string {
	if m != nil {
		return m.IssuerDid
	}
	return ""
}

func (m *Credential) GetSubjectDid() string {
	if m != nil {
		return m.SubjectDid
	}
	return ""
}

func (m *Credential) GetClaims() []byte {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *Credential) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *Credential) GetIssuedAt() time.Time {
	if m != nil {
		return m.IssuedAt
	}
	return time.Time{}
}

func (m *Credential) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func init() {
	proto.RegisterType((*Credential)(nil), "selfchain.identity.Credential")
}

func init() {
	proto.RegisterFile("selfchain/identity/credential.proto", fileDescriptor_7272e24855266b3e)
}

var fileDescriptor_7272e24855266b3e = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xcf, 0x4e, 0xc2, 0x30,
	0x18, 0x5f, 0x27, 0xc2, 0xf8, 0x30, 0x1e, 0x1a, 0x63, 0x9a, 0x25, 0x6e, 0x8b, 0x5e, 0x76, 0xda,
	0x12, 0xf5, 0x6e, 0x40, 0x9f, 0x60, 0xf1, 0xe4, 0x85, 0x8c, 0xb5, 0xcc, 0xea, 0xa0, 0xcb, 0x5a,
	0x0c, 0xbc, 0x05, 0x4f, 0xe1, 0xb3, 0x70, 0xe4, 0xe8, 0x49, 0x0d, 0xbc, 0x88, 0x59, 0xbb, 0xc1,
	0xd1, 0xdb, 0xf7, 0xfb, 0x9b, 0xfc, 0x5a, 0xb8, 0x91, 0xac, 0x98, 0x66, 0xaf, 0x29, 0x9f, 0xc7,
	0x9c, 0xb2, 0xb9, 0xe2, 0x6a, 0x15, 0x67, 0x15, 0xd3, 0x67, 0x5a, 0x44, 0x65, 0x25, 0x94, 0xc0,
	0xf8, 0x60, 0x8a, 0x5a, 0x93, 0x7b, 0x91, 0x8b, 0x5c, 0x68, 0x39, 0xae, 0x2f, 0xe3, 0x74, 0xfd,
	0x5c, 0x88, 0xbc, 0x60, 0xb1, 0x46, 0x93, 0xc5, 0x34, 0x56, 0x7c, 0xc6, 0xa4, 0x4a, 0x67, 0xa5,
	0x31, 0x5c, 0x7f, 0xda, 0x00, 0x8f, 0x87, 0x7e, 0x7c, 0x0e, 0x36, 0xa7, 0x04, 0x05, 0x28, 0xec,
	0x27, 0x36, 0xa7, 0x18, 0x43, 0x47, 0xad, 0x4a, 0x46, 0x6c, 0xcd, 0xe8, 0x1b, 0x5f, 0x01, 0x70,
	0x29, 0x17, 0xac, 0x1a, 0x53, 0x4e, 0xc9, 0x89, 0x56, 0xfa, 0x86, 0x79, 0xe2, 0x14, 0xfb, 0x30,
	0x90, 0x8b, 0xc9, 0x1b, 0xcb, 0x94, 0xd6, 0x3b, 0x5a, 0x87, 0x86, 0xaa, 0x0d, 0x97, 0xd0, 0xcd,
	0x8a, 0x94, 0xcf, 0x24, 0x39, 0x0d, 0x50, 0x78, 0x96, 0x34, 0x08, 0x13, 0xe8, 0x55, 0xec, 0x43,
	0xbc, 0x33, 0x4a, 0xba, 0x01, 0x0a, 0x9d, 0xa4, 0x85, 0x78, 0x08, 0xa6, 0x9f, 0x8e, 0x53, 0x45,
	0x7a, 0x01, 0x0a, 0x07, 0xb7, 0x6e, 0x64, 0x96, 0x45, 0xed, 0xb2, 0xe8, 0xb9, 0x5d, 0x36, 0x72,
	0x36, 0xdf, 0xbe, 0xb5, 0xfe, 0xf1, 0x51, 0xe2, 0x98, 0xd8, 0x50, 0xe1, 0x07, 0x00, 0xb6, 0x2c,
	0x79, 0xc5, 0x64, 0xdd, 0xe1, 0xfc, 0xdb, 0xd1, 0xd1, 0xf9, 0x7e, 0x93, 0x19, 0xaa, 0xd1, 0xfd,
	0x66, 0xe7, 0xa1, 0xed, 0xce, 0x43, 0xbf, 0x3b, 0x0f, 0xad, 0xf7, 0x9e, 0xb5, 0xdd, 0x7b, 0xd6,
	0xd7, 0xde, 0xb3, 0x5e, 0xdc, 0xe3, 0x97, 0x2d, 0x8f, 0x9f, 0x56, 0x3f, 0x95, 0x9c, 0x74, 0x75,
	0xf5, 0xdd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x5c, 0x9b, 0x71, 0xd7, 0x01, 0x00, 0x00,
}

func (m *Credential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintCredential(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x42
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.IssuedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.IssuedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintCredential(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x3a
	if m.Revoked {
		i--
		if m.Revoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Claims) > 0 {
		i -= len(m.Claims)
		copy(dAtA[i:], m.Claims)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Claims)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SubjectDid) > 0 {
		i -= len(m.SubjectDid)
		copy(dAtA[i:], m.SubjectDid)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.SubjectDid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCredential(dAtA []byte, offset int, v uint64) int {
	offset -= sovCredential(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Credential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.SubjectDid)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Claims)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.Revoked {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.IssuedAt)
	n += 1 + l + sovCredential(uint64(l))
	if m.ExpiresAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func sovCredential(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCredential(x uint64) (n int) {
	return sovCredential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Credential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims[:0], dAtA[iNdEx:postIndex]...)
			if m.Claims == nil {
				m.Claims = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoked = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.IssuedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCredential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCredential
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCredential
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCredential
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCredential        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCredential          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCredential = fmt.Errorf("proto: unexpected end of group")
)
