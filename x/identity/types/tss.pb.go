// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/tss.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// KeyShare represents a TSS key share
type KeyShare struct {
	Did       string     `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Share     []byte     `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
	Threshold int32      `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Index     int32      `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	Version   int64      `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt *time.Time `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
}

func (m *KeyShare) Reset()         { *m = KeyShare{} }
func (m *KeyShare) String() string { return proto.CompactTextString(m) }
func (*KeyShare) ProtoMessage()    {}
func (*KeyShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c263c34e33cc1e0, []int{0}
}
func (m *KeyShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyShare.Merge(m, src)
}
func (m *KeyShare) XXX_Size() int {
	return m.Size()
}
func (m *KeyShare) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyShare.DiscardUnknown(m)
}

var xxx_messageInfo_KeyShare proto.InternalMessageInfo

func (m *KeyShare) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *KeyShare) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *KeyShare) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *KeyShare) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *KeyShare) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *KeyShare) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

// TSSConfig represents the configuration for TSS operations
type TSSConfig struct {
	Threshold       int32  `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	TotalShares     int32  `protobuf:"varint,2,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	CurveType       string `protobuf:"bytes,3,opt,name=curve_type,json=curveType,proto3" json:"curve_type,omitempty"`
	UseRefresh      bool   `protobuf:"varint,4,opt,name=use_refresh,json=useRefresh,proto3" json:"use_refresh,omitempty"`
	RefreshInterval int64  `protobuf:"varint,5,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
}

func (m *TSSConfig) Reset()         { *m = TSSConfig{} }
func (m *TSSConfig) String() string { return proto.CompactTextString(m) }
func (*TSSConfig) ProtoMessage()    {}
func (*TSSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c263c34e33cc1e0, []int{1}
}
func (m *TSSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSConfig.Merge(m, src)
}
func (m *TSSConfig) XXX_Size() int {
	return m.Size()
}
func (m *TSSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TSSConfig proto.InternalMessageInfo

func (m *TSSConfig) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *TSSConfig) GetTotalShares() int32 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *TSSConfig) GetCurveType() string {
	if m != nil {
		return m.CurveType
	}
	return ""
}

func (m *TSSConfig) GetUseRefresh() bool {
	if m != nil {
		return m.UseRefresh
	}
	return false
}

func (m *TSSConfig) GetRefreshInterval() int64 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func init() {
	proto.RegisterType((*KeyShare)(nil), "selfchain.identity.KeyShare")
	proto.RegisterType((*TSSConfig)(nil), "selfchain.identity.TSSConfig")
}

func init() { proto.RegisterFile("selfchain/identity/tss.proto", fileDescriptor_0c263c34e33cc1e0) }

var fileDescriptor_0c263c34e33cc1e0 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0x41, 0xcf, 0xd2, 0x40,
	0x10, 0x65, 0x85, 0x22, 0x5d, 0x48, 0x24, 0x1b, 0x0e, 0x4d, 0x83, 0xa5, 0x72, 0xaa, 0x97, 0x36,
	0x51, 0xef, 0x46, 0x3c, 0x19, 0x6f, 0x0b, 0x27, 0x2f, 0x4d, 0xa1, 0xd3, 0x76, 0x93, 0xd2, 0x6d,
	0x76, 0xb7, 0x84, 0xfe, 0x0b, 0xfe, 0x8d, 0x67, 0x6f, 0x1e, 0x39, 0x7a, 0xd3, 0xc0, 0x1f, 0x31,
	0xdd, 0xb6, 0xe2, 0xf7, 0xdd, 0xe6, 0xbd, 0x37, 0x33, 0x79, 0x6f, 0x32, 0x78, 0x29, 0x21, 0x4f,
	0x0e, 0x59, 0xc4, 0x8a, 0x80, 0xc5, 0x50, 0x28, 0xa6, 0xea, 0x40, 0x49, 0xe9, 0x97, 0x82, 0x2b,
	0x4e, 0xc8, 0x3f, 0xd5, 0xef, 0x55, 0x7b, 0x91, 0xf2, 0x94, 0x6b, 0x39, 0x68, 0xaa, 0xb6, 0xd3,
	0x5e, 0xa5, 0x9c, 0xa7, 0x39, 0x04, 0x1a, 0xed, 0xab, 0x24, 0x50, 0xec, 0x08, 0x52, 0x45, 0xc7,
	0xb2, 0x6d, 0x58, 0xff, 0x40, 0x78, 0xf2, 0x15, 0xea, 0x6d, 0x16, 0x09, 0x20, 0x73, 0x3c, 0x8c,
	0x59, 0x6c, 0x21, 0x17, 0x79, 0x26, 0x6d, 0x4a, 0xb2, 0xc0, 0x86, 0x6c, 0x24, 0xeb, 0x85, 0x8b,
	0xbc, 0x19, 0x6d, 0x01, 0x59, 0x62, 0x53, 0x65, 0x02, 0x64, 0xc6, 0xf3, 0xd8, 0x1a, 0xba, 0xc8,
	0x33, 0xe8, 0x83, 0x68, 0x66, 0x58, 0x11, 0xc3, 0xd9, 0x1a, 0x69, 0xa5, 0x05, 0xc4, 0xc2, 0x2f,
	0x4f, 0x20, 0x24, 0xe3, 0x85, 0x65, 0xb8, 0xc8, 0x1b, 0xd2, 0x1e, 0x92, 0x8f, 0x18, 0x1f, 0x04,
	0x44, 0x0a, 0xe2, 0x30, 0x52, 0xd6, 0xd8, 0x45, 0xde, 0xf4, 0x9d, 0xed, 0xb7, 0xc6, 0xfd, 0xde,
	0xb8, 0xbf, 0xeb, 0x8d, 0x6f, 0x46, 0x97, 0xdf, 0x2b, 0x44, 0xcd, 0x6e, 0xe6, 0x93, 0x5a, 0x7f,
	0x47, 0xd8, 0xdc, 0x6d, 0xb7, 0x9f, 0x79, 0x91, 0xb0, 0xf4, 0xa9, 0x39, 0xf4, 0xdc, 0xdc, 0x1b,
	0x3c, 0x53, 0x5c, 0x45, 0x79, 0xa8, 0x93, 0x48, 0x9d, 0xcb, 0xa0, 0x53, 0xcd, 0xe9, 0x23, 0x48,
	0xf2, 0x1a, 0xe3, 0x43, 0x25, 0x4e, 0x10, 0xaa, 0xba, 0x04, 0x1d, 0xcf, 0xa4, 0xa6, 0x66, 0x76,
	0x75, 0x09, 0x64, 0x85, 0xa7, 0x95, 0x84, 0x50, 0x40, 0xd2, 0xec, 0xd4, 0x21, 0x27, 0x14, 0x57,
	0x12, 0x68, 0xcb, 0x90, 0xb7, 0x78, 0xde, 0x89, 0x21, 0x2b, 0x14, 0x88, 0x53, 0x94, 0x77, 0x91,
	0x5f, 0x75, 0xfc, 0x97, 0x8e, 0xde, 0x7c, 0xf8, 0x79, 0x73, 0xd0, 0xf5, 0xe6, 0xa0, 0x3f, 0x37,
	0x07, 0x5d, 0xee, 0xce, 0xe0, 0x7a, 0x77, 0x06, 0xbf, 0xee, 0xce, 0xe0, 0x9b, 0xfd, 0x78, 0x80,
	0xf3, 0x7f, 0x2f, 0x50, 0x97, 0x20, 0xf7, 0x63, 0x7d, 0x94, 0xf7, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xf2, 0x35, 0xb9, 0x93, 0x25, 0x02, 0x00, 0x00,
}

func (m *KeyShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTss(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x32
	}
	if m.Version != 0 {
		i = encodeVarintTss(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x28
	}
	if m.Index != 0 {
		i = encodeVarintTss(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if m.Threshold != 0 {
		i = encodeVarintTss(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Share) > 0 {
		i -= len(m.Share)
		copy(dAtA[i:], m.Share)
		i = encodeVarintTss(dAtA, i, uint64(len(m.Share)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTss(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TSSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefreshInterval != 0 {
		i = encodeVarintTss(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.UseRefresh {
		i--
		if m.UseRefresh {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.CurveType) > 0 {
		i -= len(m.CurveType)
		copy(dAtA[i:], m.CurveType)
		i = encodeVarintTss(dAtA, i, uint64(len(m.CurveType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TotalShares != 0 {
		i = encodeVarintTss(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x10
	}
	if m.Threshold != 0 {
		i = encodeVarintTss(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTss(dAtA []byte, offset int, v uint64) int {
	offset -= sovTss(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	l = len(m.Share)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	if m.Threshold != 0 {
		n += 1 + sovTss(uint64(m.Threshold))
	}
	if m.Index != 0 {
		n += 1 + sovTss(uint64(m.Index))
	}
	if m.Version != 0 {
		n += 1 + sovTss(uint64(m.Version))
	}
	if m.CreatedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovTss(uint64(l))
	}
	return n
}

func (m *TSSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Threshold != 0 {
		n += 1 + sovTss(uint64(m.Threshold))
	}
	if m.TotalShares != 0 {
		n += 1 + sovTss(uint64(m.TotalShares))
	}
	l = len(m.CurveType)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	if m.UseRefresh {
		n += 2
	}
	if m.RefreshInterval != 0 {
		n += 1 + sovTss(uint64(m.RefreshInterval))
	}
	return n
}

func sovTss(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTss(x uint64) (n int) {
	return sovTss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Share = append(m.Share[:0], dAtA[iNdEx:postIndex]...)
			if m.Share == nil {
				m.Share = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurveType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurveType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseRefresh", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseRefresh = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTss
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTss
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTss
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTss        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTss          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTss = fmt.Errorf("proto: unexpected end of group")
)
