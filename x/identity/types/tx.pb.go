// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterDID represents a message to register a new DID document
type MsgRegisterDID struct {
	Creator  string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Document DIDDocument `protobuf:"bytes,2,opt,name=document,proto3" json:"document"`
}

func (m *MsgRegisterDID) Reset()         { *m = MsgRegisterDID{} }
func (m *MsgRegisterDID) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDID) ProtoMessage()    {}
func (*MsgRegisterDID) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{0}
}
func (m *MsgRegisterDID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDID.Merge(m, src)
}
func (m *MsgRegisterDID) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDID) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDID.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDID proto.InternalMessageInfo

func (m *MsgRegisterDID) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterDID) GetDocument() DIDDocument {
	if m != nil {
		return m.Document
	}
	return DIDDocument{}
}

// MsgRegisterDIDResponse defines the response for registering a DID
type MsgRegisterDIDResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRegisterDIDResponse) Reset()         { *m = MsgRegisterDIDResponse{} }
func (m *MsgRegisterDIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDIDResponse) ProtoMessage()    {}
func (*MsgRegisterDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{1}
}
func (m *MsgRegisterDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDIDResponse.Merge(m, src)
}
func (m *MsgRegisterDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDIDResponse proto.InternalMessageInfo

func (m *MsgRegisterDIDResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// MsgUpdateDID represents a message to update an existing DID document
type MsgUpdateDID struct {
	Creator  string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Document DIDDocument `protobuf:"bytes,2,opt,name=document,proto3" json:"document"`
}

func (m *MsgUpdateDID) Reset()         { *m = MsgUpdateDID{} }
func (m *MsgUpdateDID) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDID) ProtoMessage()    {}
func (*MsgUpdateDID) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{2}
}
func (m *MsgUpdateDID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDID.Merge(m, src)
}
func (m *MsgUpdateDID) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDID) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDID.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDID proto.InternalMessageInfo

func (m *MsgUpdateDID) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateDID) GetDocument() DIDDocument {
	if m != nil {
		return m.Document
	}
	return DIDDocument{}
}

// MsgUpdateDIDResponse defines the response for updating a DID
type MsgUpdateDIDResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgUpdateDIDResponse) Reset()         { *m = MsgUpdateDIDResponse{} }
func (m *MsgUpdateDIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDIDResponse) ProtoMessage()    {}
func (*MsgUpdateDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{3}
}
func (m *MsgUpdateDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDIDResponse.Merge(m, src)
}
func (m *MsgUpdateDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDIDResponse proto.InternalMessageInfo

func (m *MsgUpdateDIDResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// MsgVerifyIdentity represents a message to verify an identity
type MsgVerifyIdentity struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Did        string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Provider   string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	OauthToken string `protobuf:"bytes,4,opt,name=oauth_token,json=oauthToken,proto3" json:"oauth_token,omitempty"`
}

func (m *MsgVerifyIdentity) Reset()         { *m = MsgVerifyIdentity{} }
func (m *MsgVerifyIdentity) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyIdentity) ProtoMessage()    {}
func (*MsgVerifyIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{4}
}
func (m *MsgVerifyIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyIdentity.Merge(m, src)
}
func (m *MsgVerifyIdentity) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyIdentity proto.InternalMessageInfo

func (m *MsgVerifyIdentity) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVerifyIdentity) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MsgVerifyIdentity) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgVerifyIdentity) GetOauthToken() string {
	if m != nil {
		return m.OauthToken
	}
	return ""
}

// MsgVerifyIdentityResponse defines the response for identity verification
type MsgVerifyIdentityResponse struct {
	VerificationId string `protobuf:"bytes,1,opt,name=verification_id,json=verificationId,proto3" json:"verification_id,omitempty"`
}

func (m *MsgVerifyIdentityResponse) Reset()         { *m = MsgVerifyIdentityResponse{} }
func (m *MsgVerifyIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyIdentityResponse) ProtoMessage()    {}
func (*MsgVerifyIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{5}
}
func (m *MsgVerifyIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyIdentityResponse.Merge(m, src)
}
func (m *MsgVerifyIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyIdentityResponse proto.InternalMessageInfo

func (m *MsgVerifyIdentityResponse) GetVerificationId() string {
	if m != nil {
		return m.VerificationId
	}
	return ""
}

// MsgIssueCredential represents a message to issue a new credential
type MsgIssueCredential struct {
	Creator        string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CredentialType string     `protobuf:"bytes,2,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
	SubjectDid     string     `protobuf:"bytes,3,opt,name=subject_did,json=subjectDid,proto3" json:"subject_did,omitempty"`
	Claims         []byte     `protobuf:"bytes,4,opt,name=claims,proto3" json:"claims,omitempty"`
	Expiry         *time.Time `protobuf:"bytes,5,opt,name=expiry,proto3,stdtime" json:"expiry,omitempty"`
}

func (m *MsgIssueCredential) Reset()         { *m = MsgIssueCredential{} }
func (m *MsgIssueCredential) String() string { return proto.CompactTextString(m) }
func (*MsgIssueCredential) ProtoMessage()    {}
func (*MsgIssueCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{6}
}
func (m *MsgIssueCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueCredential.Merge(m, src)
}
func (m *MsgIssueCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueCredential proto.InternalMessageInfo

func (m *MsgIssueCredential) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgIssueCredential) GetCredentialType() string {
	if m != nil {
		return m.CredentialType
	}
	return ""
}

func (m *MsgIssueCredential) GetSubjectDid() string {
	if m != nil {
		return m.SubjectDid
	}
	return ""
}

func (m *MsgIssueCredential) GetClaims() []byte {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *MsgIssueCredential) GetExpiry() *time.Time {
	if m != nil {
		return m.Expiry
	}
	return nil
}

// MsgIssueCredentialResponse defines the response for issuing a credential
type MsgIssueCredentialResponse struct {
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (m *MsgIssueCredentialResponse) Reset()         { *m = MsgIssueCredentialResponse{} }
func (m *MsgIssueCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueCredentialResponse) ProtoMessage()    {}
func (*MsgIssueCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{7}
}
func (m *MsgIssueCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueCredentialResponse.Merge(m, src)
}
func (m *MsgIssueCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueCredentialResponse proto.InternalMessageInfo

func (m *MsgIssueCredentialResponse) GetCredentialId() string {
	if m != nil {
		return m.CredentialId
	}
	return ""
}

// MsgRevokeCredential represents a message to revoke a credential
type MsgRevokeCredential struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CredentialId string `protobuf:"bytes,2,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (m *MsgRevokeCredential) Reset()         { *m = MsgRevokeCredential{} }
func (m *MsgRevokeCredential) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeCredential) ProtoMessage()    {}
func (*MsgRevokeCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{8}
}
func (m *MsgRevokeCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeCredential.Merge(m, src)
}
func (m *MsgRevokeCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeCredential proto.InternalMessageInfo

func (m *MsgRevokeCredential) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRevokeCredential) GetCredentialId() string {
	if m != nil {
		return m.CredentialId
	}
	return ""
}

// MsgRevokeCredentialResponse defines the response for revoking a credential
type MsgRevokeCredentialResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MsgRevokeCredentialResponse) Reset()         { *m = MsgRevokeCredentialResponse{} }
func (m *MsgRevokeCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeCredentialResponse) ProtoMessage()    {}
func (*MsgRevokeCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de5c9b9a7b4379e, []int{9}
}
func (m *MsgRevokeCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeCredentialResponse.Merge(m, src)
}
func (m *MsgRevokeCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeCredentialResponse proto.InternalMessageInfo

func (m *MsgRevokeCredentialResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*MsgRegisterDID)(nil), "selfchain.identity.MsgRegisterDID")
	proto.RegisterType((*MsgRegisterDIDResponse)(nil), "selfchain.identity.MsgRegisterDIDResponse")
	proto.RegisterType((*MsgUpdateDID)(nil), "selfchain.identity.MsgUpdateDID")
	proto.RegisterType((*MsgUpdateDIDResponse)(nil), "selfchain.identity.MsgUpdateDIDResponse")
	proto.RegisterType((*MsgVerifyIdentity)(nil), "selfchain.identity.MsgVerifyIdentity")
	proto.RegisterType((*MsgVerifyIdentityResponse)(nil), "selfchain.identity.MsgVerifyIdentityResponse")
	proto.RegisterType((*MsgIssueCredential)(nil), "selfchain.identity.MsgIssueCredential")
	proto.RegisterType((*MsgIssueCredentialResponse)(nil), "selfchain.identity.MsgIssueCredentialResponse")
	proto.RegisterType((*MsgRevokeCredential)(nil), "selfchain.identity.MsgRevokeCredential")
	proto.RegisterType((*MsgRevokeCredentialResponse)(nil), "selfchain.identity.MsgRevokeCredentialResponse")
}

func init() { proto.RegisterFile("selfchain/identity/tx.proto", fileDescriptor_5de5c9b9a7b4379e) }

var fileDescriptor_5de5c9b9a7b4379e = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0x8e, 0x13, 0x7e, 0x10, 0x06, 0x7e, 0x81, 0xba, 0x08, 0xb9, 0x46, 0x8a, 0x91, 0x2b, 0x20,
	0xaa, 0x54, 0x5b, 0xa2, 0x95, 0x7a, 0xe9, 0x05, 0xea, 0x8b, 0x0f, 0xb9, 0x58, 0x69, 0x2b, 0x55,
	0xaa, 0x22, 0xe3, 0xdd, 0x98, 0x2d, 0x89, 0xd7, 0xf2, 0xae, 0x11, 0x96, 0xfa, 0x10, 0x3c, 0x16,
	0xa7, 0x8a, 0x63, 0x4f, 0xb4, 0x82, 0xf7, 0xa8, 0x2a, 0x6f, 0xec, 0xcd, 0x7f, 0xc8, 0xa5, 0xb7,
	0x9d, 0x99, 0x6f, 0xbe, 0xf9, 0x66, 0x32, 0x13, 0xc3, 0x1e, 0xc3, 0xfd, 0x5e, 0x70, 0xee, 0x93,
	0xc8, 0x26, 0x08, 0x47, 0x9c, 0xf0, 0xcc, 0xe6, 0x57, 0x56, 0x9c, 0x50, 0x4e, 0x55, 0x55, 0x06,
	0xad, 0x32, 0xa8, 0xef, 0x84, 0x34, 0xa4, 0x22, 0x6c, 0xe7, 0xaf, 0x21, 0x52, 0x3f, 0x98, 0x43,
	0x83, 0x08, 0xea, 0x22, 0x1a, 0xa4, 0x03, 0x1c, 0xf1, 0x02, 0x66, 0x84, 0x94, 0x86, 0x7d, 0x6c,
	0x0b, 0xeb, 0x2c, 0xed, 0xd9, 0x9c, 0x0c, 0x30, 0xe3, 0xfe, 0x20, 0x1e, 0x02, 0xcc, 0x01, 0x34,
	0xda, 0x2c, 0xf4, 0x70, 0x48, 0x18, 0xc7, 0x89, 0xe3, 0x3a, 0xaa, 0x06, 0x6b, 0x41, 0x82, 0x7d,
	0x4e, 0x13, 0x4d, 0xd9, 0x57, 0x5a, 0xeb, 0x5e, 0x69, 0xaa, 0x27, 0x50, 0x2f, 0xe9, 0xb5, 0xea,
	0xbe, 0xd2, 0xda, 0x38, 0x36, 0xac, 0x59, 0xc1, 0x96, 0xe3, 0x3a, 0x4e, 0x01, 0x3b, 0x5d, 0xb9,
	0xb9, 0x33, 0x2a, 0x9e, 0x4c, 0x33, 0x5b, 0xb0, 0x3b, 0x59, 0xce, 0xc3, 0x2c, 0xa6, 0x11, 0xc3,
	0x6a, 0x03, 0xaa, 0x04, 0x15, 0x15, 0xab, 0x04, 0x99, 0x17, 0xb0, 0xd9, 0x66, 0xe1, 0xc7, 0x18,
	0xf9, 0x1c, 0xff, 0x73, 0x59, 0x87, 0xb0, 0x33, 0x5e, 0x6c, 0xa1, 0xa8, 0xef, 0xf0, 0xac, 0xcd,
	0xc2, 0x4f, 0x38, 0x21, 0xbd, 0xcc, 0x2d, 0x88, 0x1f, 0x51, 0xb6, 0x0d, 0x35, 0x44, 0x90, 0x10,
	0xb5, 0xee, 0xe5, 0x4f, 0x55, 0x87, 0x7a, 0x9c, 0xd0, 0x4b, 0x82, 0x70, 0xa2, 0xd5, 0x84, 0x5b,
	0xda, 0xaa, 0x01, 0x1b, 0xd4, 0x4f, 0xf9, 0x79, 0x97, 0xd3, 0x0b, 0x1c, 0x69, 0x2b, 0x22, 0x0c,
	0xc2, 0xd5, 0xc9, 0x3d, 0xa6, 0x03, 0x2f, 0x66, 0xaa, 0x4b, 0xa9, 0x47, 0xb0, 0x75, 0x99, 0x47,
	0x48, 0xe0, 0x73, 0x42, 0xa3, 0xae, 0xd4, 0xdd, 0x18, 0x77, 0xbb, 0xc8, 0xfc, 0xa1, 0x80, 0xda,
	0x66, 0xa1, 0xcb, 0x58, 0x8a, 0x3f, 0x24, 0x58, 0xf0, 0xf8, 0xfd, 0x47, 0xba, 0x38, 0x82, 0xad,
	0x40, 0xe2, 0xba, 0x3c, 0x8b, 0x71, 0xd1, 0x51, 0x63, 0xe4, 0xee, 0x64, 0x31, 0xce, 0x1b, 0x60,
	0xe9, 0xd9, 0x37, 0x1c, 0xf0, 0x6e, 0xde, 0xf6, 0xb0, 0x3f, 0x28, 0x5c, 0x0e, 0x41, 0xea, 0x2e,
	0xac, 0x06, 0x7d, 0x9f, 0x0c, 0x98, 0x68, 0x6e, 0xd3, 0x2b, 0x2c, 0xf5, 0x3d, 0xac, 0xe2, 0xab,
	0x98, 0x24, 0x99, 0xf6, 0x9f, 0xf8, 0xfd, 0x74, 0x6b, 0xb8, 0xb6, 0x56, 0xb9, 0xb6, 0x56, 0xa7,
	0x5c, 0xdb, 0xd3, 0xfa, 0xcd, 0x9d, 0xa1, 0x5c, 0xff, 0x32, 0x14, 0xaf, 0xc8, 0x31, 0x4f, 0x40,
	0x9f, 0xed, 0x47, 0xce, 0xe5, 0x25, 0xfc, 0x3f, 0xa6, 0x5e, 0x4e, 0x65, 0x73, 0xe4, 0x74, 0x91,
	0xd9, 0x81, 0xe7, 0x62, 0x2d, 0x2f, 0xe9, 0xc5, 0x72, 0x33, 0x99, 0x61, 0xad, 0xce, 0x61, 0x7d,
	0x07, 0x7b, 0x73, 0x58, 0xa5, 0x32, 0x0d, 0xd6, 0x58, 0x1a, 0x04, 0x98, 0x31, 0xc1, 0x5e, 0xf7,
	0x4a, 0xf3, 0xf8, 0x4f, 0x0d, 0x6a, 0x6d, 0x16, 0xaa, 0x5f, 0x61, 0x63, 0xfc, 0x32, 0xcd, 0x79,
	0x6b, 0x3d, 0x79, 0x4e, 0xfa, 0xab, 0xa7, 0x31, 0x52, 0xc0, 0x67, 0x58, 0x1f, 0xdd, 0xd7, 0xfe,
	0x82, 0x44, 0x89, 0xd0, 0x5b, 0x4f, 0x21, 0x24, 0x71, 0x0f, 0x1a, 0x53, 0x37, 0x72, 0xb0, 0x20,
	0x77, 0x12, 0xa6, 0xbf, 0x5e, 0x0a, 0x26, 0xeb, 0x10, 0xd8, 0x9a, 0x5e, 0xe3, 0xc3, 0x05, 0x0c,
	0x53, 0x38, 0xdd, 0x5a, 0x0e, 0x27, 0x4b, 0xf5, 0x61, 0x7b, 0x66, 0x3d, 0x8e, 0x16, 0xce, 0x7a,
	0x12, 0xa8, 0xdb, 0x4b, 0x02, 0xcb, 0x6a, 0xa7, 0x6f, 0x6f, 0xee, 0x9b, 0xca, 0xed, 0x7d, 0x53,
	0xf9, 0x7d, 0xdf, 0x54, 0xae, 0x1f, 0x9a, 0x95, 0xdb, 0x87, 0x66, 0xe5, 0xe7, 0x43, 0xb3, 0xf2,
	0x45, 0x1f, 0xfd, 0xef, 0x5f, 0x8d, 0x7d, 0x40, 0xb2, 0x18, 0xb3, 0xb3, 0x55, 0x71, 0x2e, 0x6f,
	0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x07, 0x69, 0x93, 0x63, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterDID registers a new DID document
	RegisterDID(ctx context.Context, in *MsgRegisterDID, opts ...grpc.CallOption) (*MsgRegisterDIDResponse, error)
	// UpdateDID updates an existing DID document
	UpdateDID(ctx context.Context, in *MsgUpdateDID, opts ...grpc.CallOption) (*MsgUpdateDIDResponse, error)
	// VerifyIdentity initiates the identity verification process
	VerifyIdentity(ctx context.Context, in *MsgVerifyIdentity, opts ...grpc.CallOption) (*MsgVerifyIdentityResponse, error)
	// IssueCredential issues a new verifiable credential
	IssueCredential(ctx context.Context, in *MsgIssueCredential, opts ...grpc.CallOption) (*MsgIssueCredentialResponse, error)
	// RevokeCredential revokes an existing credential
	RevokeCredential(ctx context.Context, in *MsgRevokeCredential, opts ...grpc.CallOption) (*MsgRevokeCredentialResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterDID(ctx context.Context, in *MsgRegisterDID, opts ...grpc.CallOption) (*MsgRegisterDIDResponse, error) {
	out := new(MsgRegisterDIDResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Msg/RegisterDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDID(ctx context.Context, in *MsgUpdateDID, opts ...grpc.CallOption) (*MsgUpdateDIDResponse, error) {
	out := new(MsgUpdateDIDResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Msg/UpdateDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifyIdentity(ctx context.Context, in *MsgVerifyIdentity, opts ...grpc.CallOption) (*MsgVerifyIdentityResponse, error) {
	out := new(MsgVerifyIdentityResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Msg/VerifyIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IssueCredential(ctx context.Context, in *MsgIssueCredential, opts ...grpc.CallOption) (*MsgIssueCredentialResponse, error) {
	out := new(MsgIssueCredentialResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Msg/IssueCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeCredential(ctx context.Context, in *MsgRevokeCredential, opts ...grpc.CallOption) (*MsgRevokeCredentialResponse, error) {
	out := new(MsgRevokeCredentialResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Msg/RevokeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterDID registers a new DID document
	RegisterDID(context.Context, *MsgRegisterDID) (*MsgRegisterDIDResponse, error)
	// UpdateDID updates an existing DID document
	UpdateDID(context.Context, *MsgUpdateDID) (*MsgUpdateDIDResponse, error)
	// VerifyIdentity initiates the identity verification process
	VerifyIdentity(context.Context, *MsgVerifyIdentity) (*MsgVerifyIdentityResponse, error)
	// IssueCredential issues a new verifiable credential
	IssueCredential(context.Context, *MsgIssueCredential) (*MsgIssueCredentialResponse, error)
	// RevokeCredential revokes an existing credential
	RevokeCredential(context.Context, *MsgRevokeCredential) (*MsgRevokeCredentialResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterDID(ctx context.Context, req *MsgRegisterDID) (*MsgRegisterDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDID not implemented")
}
func (*UnimplementedMsgServer) UpdateDID(ctx context.Context, req *MsgUpdateDID) (*MsgUpdateDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDID not implemented")
}
func (*UnimplementedMsgServer) VerifyIdentity(ctx context.Context, req *MsgVerifyIdentity) (*MsgVerifyIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyIdentity not implemented")
}
func (*UnimplementedMsgServer) IssueCredential(ctx context.Context, req *MsgIssueCredential) (*MsgIssueCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueCredential not implemented")
}
func (*UnimplementedMsgServer) RevokeCredential(ctx context.Context, req *MsgRevokeCredential) (*MsgRevokeCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCredential not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Msg/RegisterDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterDID(ctx, req.(*MsgRegisterDID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Msg/UpdateDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDID(ctx, req.(*MsgUpdateDID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifyIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifyIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifyIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Msg/VerifyIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifyIdentity(ctx, req.(*MsgVerifyIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IssueCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Msg/IssueCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueCredential(ctx, req.(*MsgIssueCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Msg/RevokeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeCredential(ctx, req.(*MsgRevokeCredential))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "selfchain.identity.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDID",
			Handler:    _Msg_RegisterDID_Handler,
		},
		{
			MethodName: "UpdateDID",
			Handler:    _Msg_UpdateDID_Handler,
		},
		{
			MethodName: "VerifyIdentity",
			Handler:    _Msg_VerifyIdentity_Handler,
		},
		{
			MethodName: "IssueCredential",
			Handler:    _Msg_IssueCredential_Handler,
		},
		{
			MethodName: "RevokeCredential",
			Handler:    _Msg_RevokeCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "selfchain/identity/tx.proto",
}

func (m *MsgRegisterDID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OauthToken) > 0 {
		i -= len(m.OauthToken)
		copy(dAtA[i:], m.OauthToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OauthToken)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationId) > 0 {
		i -= len(m.VerificationId)
		copy(dAtA[i:], m.VerificationId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Expiry, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiry):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTx(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Claims) > 0 {
		i -= len(m.Claims)
		copy(dAtA[i:], m.Claims)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Claims)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubjectDid) > 0 {
		i -= len(m.SubjectDid)
		copy(dAtA[i:], m.SubjectDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialType) > 0 {
		i -= len(m.CredentialType)
		copy(dAtA[i:], m.CredentialType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialId) > 0 {
		i -= len(m.CredentialId)
		copy(dAtA[i:], m.CredentialId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialId) > 0 {
		i -= len(m.CredentialId)
		copy(dAtA[i:], m.CredentialId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterDID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Document.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRegisterDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Document.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVerifyIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OauthToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVerifyIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerificationId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CredentialType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubjectDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Claims)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Expiry != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiry)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevokeCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CredentialId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevokeCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterDID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OauthToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OauthToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims[:0], dAtA[iNdEx:postIndex]...)
			if m.Claims == nil {
				m.Claims = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
