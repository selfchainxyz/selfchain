// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryDIDDocumentsRequest is request type for the Query/DIDDocuments method.
type QueryDIDDocumentsRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryDIDDocumentsRequest) Reset()         { *m = QueryDIDDocumentsRequest{} }
func (m *QueryDIDDocumentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDIDDocumentsRequest) ProtoMessage()    {}
func (*QueryDIDDocumentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{2}
}
func (m *QueryDIDDocumentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDIDDocumentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDIDDocumentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDIDDocumentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDIDDocumentsRequest.Merge(m, src)
}
func (m *QueryDIDDocumentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDIDDocumentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDIDDocumentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDIDDocumentsRequest proto.InternalMessageInfo

func (m *QueryDIDDocumentsRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

// QueryDIDDocumentsResponse is response type for the Query/DIDDocuments method.
type QueryDIDDocumentsResponse struct {
	Document *DIDDocument `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
}

func (m *QueryDIDDocumentsResponse) Reset()         { *m = QueryDIDDocumentsResponse{} }
func (m *QueryDIDDocumentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDIDDocumentsResponse) ProtoMessage()    {}
func (*QueryDIDDocumentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{3}
}
func (m *QueryDIDDocumentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDIDDocumentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDIDDocumentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDIDDocumentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDIDDocumentsResponse.Merge(m, src)
}
func (m *QueryDIDDocumentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDIDDocumentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDIDDocumentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDIDDocumentsResponse proto.InternalMessageInfo

func (m *QueryDIDDocumentsResponse) GetDocument() *DIDDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

// QueryCredentialRequest is request type for the Query/Credential method.
type QueryCredentialRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryCredentialRequest) Reset()         { *m = QueryCredentialRequest{} }
func (m *QueryCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialRequest) ProtoMessage()    {}
func (*QueryCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{4}
}
func (m *QueryCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialRequest.Merge(m, src)
}
func (m *QueryCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialRequest proto.InternalMessageInfo

func (m *QueryCredentialRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryCredentialResponse is response type for the Query/Credential method.
type QueryCredentialResponse struct {
	Credential *Credential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (m *QueryCredentialResponse) Reset()         { *m = QueryCredentialResponse{} }
func (m *QueryCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialResponse) ProtoMessage()    {}
func (*QueryCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{5}
}
func (m *QueryCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialResponse.Merge(m, src)
}
func (m *QueryCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialResponse proto.InternalMessageInfo

func (m *QueryCredentialResponse) GetCredential() *Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

// QueryCredentialsByDIDRequest is request type for the Query/CredentialsByDID method.
type QueryCredentialsByDIDRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryCredentialsByDIDRequest) Reset()         { *m = QueryCredentialsByDIDRequest{} }
func (m *QueryCredentialsByDIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialsByDIDRequest) ProtoMessage()    {}
func (*QueryCredentialsByDIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{6}
}
func (m *QueryCredentialsByDIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialsByDIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialsByDIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialsByDIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialsByDIDRequest.Merge(m, src)
}
func (m *QueryCredentialsByDIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialsByDIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialsByDIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialsByDIDRequest proto.InternalMessageInfo

func (m *QueryCredentialsByDIDRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

// QueryCredentialsByDIDResponse is response type for the Query/CredentialsByDID method.
type QueryCredentialsByDIDResponse struct {
	Credentials []*Credential `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (m *QueryCredentialsByDIDResponse) Reset()         { *m = QueryCredentialsByDIDResponse{} }
func (m *QueryCredentialsByDIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialsByDIDResponse) ProtoMessage()    {}
func (*QueryCredentialsByDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{7}
}
func (m *QueryCredentialsByDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialsByDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialsByDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialsByDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialsByDIDResponse.Merge(m, src)
}
func (m *QueryCredentialsByDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialsByDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialsByDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialsByDIDResponse proto.InternalMessageInfo

func (m *QueryCredentialsByDIDResponse) GetCredentials() []*Credential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// QuerySocialIdentitiesRequest is request type for the Query/SocialIdentities method.
type QuerySocialIdentitiesRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QuerySocialIdentitiesRequest) Reset()         { *m = QuerySocialIdentitiesRequest{} }
func (m *QuerySocialIdentitiesRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySocialIdentitiesRequest) ProtoMessage()    {}
func (*QuerySocialIdentitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{8}
}
func (m *QuerySocialIdentitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySocialIdentitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySocialIdentitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySocialIdentitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySocialIdentitiesRequest.Merge(m, src)
}
func (m *QuerySocialIdentitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySocialIdentitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySocialIdentitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySocialIdentitiesRequest proto.InternalMessageInfo

func (m *QuerySocialIdentitiesRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

// QuerySocialIdentitiesResponse is response type for the Query/SocialIdentities method.
type QuerySocialIdentitiesResponse struct {
	Identities []*SocialIdentity `protobuf:"bytes,1,rep,name=identities,proto3" json:"identities,omitempty"`
}

func (m *QuerySocialIdentitiesResponse) Reset()         { *m = QuerySocialIdentitiesResponse{} }
func (m *QuerySocialIdentitiesResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySocialIdentitiesResponse) ProtoMessage()    {}
func (*QuerySocialIdentitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{9}
}
func (m *QuerySocialIdentitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySocialIdentitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySocialIdentitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySocialIdentitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySocialIdentitiesResponse.Merge(m, src)
}
func (m *QuerySocialIdentitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySocialIdentitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySocialIdentitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySocialIdentitiesResponse proto.InternalMessageInfo

func (m *QuerySocialIdentitiesResponse) GetIdentities() []*SocialIdentity {
	if m != nil {
		return m.Identities
	}
	return nil
}

// QuerySocialIdentityBySocialIDRequest is request type for the Query/SocialIdentityBySocialID method.
type QuerySocialIdentityBySocialIDRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	SocialId string `protobuf:"bytes,2,opt,name=social_id,json=socialId,proto3" json:"social_id,omitempty"`
}

func (m *QuerySocialIdentityBySocialIDRequest) Reset()         { *m = QuerySocialIdentityBySocialIDRequest{} }
func (m *QuerySocialIdentityBySocialIDRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySocialIdentityBySocialIDRequest) ProtoMessage()    {}
func (*QuerySocialIdentityBySocialIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{10}
}
func (m *QuerySocialIdentityBySocialIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySocialIdentityBySocialIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySocialIdentityBySocialIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySocialIdentityBySocialIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySocialIdentityBySocialIDRequest.Merge(m, src)
}
func (m *QuerySocialIdentityBySocialIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySocialIdentityBySocialIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySocialIdentityBySocialIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySocialIdentityBySocialIDRequest proto.InternalMessageInfo

func (m *QuerySocialIdentityBySocialIDRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *QuerySocialIdentityBySocialIDRequest) GetSocialId() string {
	if m != nil {
		return m.SocialId
	}
	return ""
}

// QuerySocialIdentityBySocialIDResponse is response type for the Query/SocialIdentityBySocialID method.
type QuerySocialIdentityBySocialIDResponse struct {
	Identity *SocialIdentity `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *QuerySocialIdentityBySocialIDResponse) Reset()         { *m = QuerySocialIdentityBySocialIDResponse{} }
func (m *QuerySocialIdentityBySocialIDResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySocialIdentityBySocialIDResponse) ProtoMessage()    {}
func (*QuerySocialIdentityBySocialIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{11}
}
func (m *QuerySocialIdentityBySocialIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySocialIdentityBySocialIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySocialIdentityBySocialIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySocialIdentityBySocialIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySocialIdentityBySocialIDResponse.Merge(m, src)
}
func (m *QuerySocialIdentityBySocialIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySocialIdentityBySocialIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySocialIdentityBySocialIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySocialIdentityBySocialIDResponse proto.InternalMessageInfo

func (m *QuerySocialIdentityBySocialIDResponse) GetIdentity() *SocialIdentity {
	if m != nil {
		return m.Identity
	}
	return nil
}

// QuerySocialIdentityRequest is request type for the Query/SocialIdentity RPC method
type QuerySocialIdentityRequest struct {
	Did      string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QuerySocialIdentityRequest) Reset()         { *m = QuerySocialIdentityRequest{} }
func (m *QuerySocialIdentityRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySocialIdentityRequest) ProtoMessage()    {}
func (*QuerySocialIdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{12}
}
func (m *QuerySocialIdentityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySocialIdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySocialIdentityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySocialIdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySocialIdentityRequest.Merge(m, src)
}
func (m *QuerySocialIdentityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySocialIdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySocialIdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySocialIdentityRequest proto.InternalMessageInfo

func (m *QuerySocialIdentityRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *QuerySocialIdentityRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

// QuerySocialIdentityResponse is response type for the Query/SocialIdentity RPC method
type QuerySocialIdentityResponse struct {
	SocialId string `protobuf:"bytes,1,opt,name=social_id,json=socialId,proto3" json:"social_id,omitempty"`
}

func (m *QuerySocialIdentityResponse) Reset()         { *m = QuerySocialIdentityResponse{} }
func (m *QuerySocialIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySocialIdentityResponse) ProtoMessage()    {}
func (*QuerySocialIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{13}
}
func (m *QuerySocialIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySocialIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySocialIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySocialIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySocialIdentityResponse.Merge(m, src)
}
func (m *QuerySocialIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySocialIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySocialIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySocialIdentityResponse proto.InternalMessageInfo

func (m *QuerySocialIdentityResponse) GetSocialId() string {
	if m != nil {
		return m.SocialId
	}
	return ""
}

// QueryLinkedDIDRequest is request type for the Query/LinkedDID RPC method
type QueryLinkedDIDRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	SocialId string `protobuf:"bytes,2,opt,name=social_id,json=socialId,proto3" json:"social_id,omitempty"`
}

func (m *QueryLinkedDIDRequest) Reset()         { *m = QueryLinkedDIDRequest{} }
func (m *QueryLinkedDIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLinkedDIDRequest) ProtoMessage()    {}
func (*QueryLinkedDIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{14}
}
func (m *QueryLinkedDIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLinkedDIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLinkedDIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLinkedDIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLinkedDIDRequest.Merge(m, src)
}
func (m *QueryLinkedDIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLinkedDIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLinkedDIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLinkedDIDRequest proto.InternalMessageInfo

func (m *QueryLinkedDIDRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *QueryLinkedDIDRequest) GetSocialId() string {
	if m != nil {
		return m.SocialId
	}
	return ""
}

// QueryLinkedDIDResponse is response type for the Query/LinkedDID RPC method
type QueryLinkedDIDResponse struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryLinkedDIDResponse) Reset()         { *m = QueryLinkedDIDResponse{} }
func (m *QueryLinkedDIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLinkedDIDResponse) ProtoMessage()    {}
func (*QueryLinkedDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{15}
}
func (m *QueryLinkedDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLinkedDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLinkedDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLinkedDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLinkedDIDResponse.Merge(m, src)
}
func (m *QueryLinkedDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLinkedDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLinkedDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLinkedDIDResponse proto.InternalMessageInfo

func (m *QueryLinkedDIDResponse) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

// QueryMFAConfigRequest is request type for the Query/MFAConfig method.
type QueryMFAConfigRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryMFAConfigRequest) Reset()         { *m = QueryMFAConfigRequest{} }
func (m *QueryMFAConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMFAConfigRequest) ProtoMessage()    {}
func (*QueryMFAConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{16}
}
func (m *QueryMFAConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMFAConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMFAConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMFAConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMFAConfigRequest.Merge(m, src)
}
func (m *QueryMFAConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMFAConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMFAConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMFAConfigRequest proto.InternalMessageInfo

func (m *QueryMFAConfigRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

// QueryMFAConfigResponse is response type for the Query/MFAConfig method.
type QueryMFAConfigResponse struct {
	Config *MFAConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *QueryMFAConfigResponse) Reset()         { *m = QueryMFAConfigResponse{} }
func (m *QueryMFAConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMFAConfigResponse) ProtoMessage()    {}
func (*QueryMFAConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{17}
}
func (m *QueryMFAConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMFAConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMFAConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMFAConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMFAConfigResponse.Merge(m, src)
}
func (m *QueryMFAConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMFAConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMFAConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMFAConfigResponse proto.InternalMessageInfo

func (m *QueryMFAConfigResponse) GetConfig() *MFAConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// QueryMFAChallengeRequest is request type for the Query/MFAChallenge method.
type QueryMFAChallengeRequest struct {
	Did    string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
}

func (m *QueryMFAChallengeRequest) Reset()         { *m = QueryMFAChallengeRequest{} }
func (m *QueryMFAChallengeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMFAChallengeRequest) ProtoMessage()    {}
func (*QueryMFAChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{18}
}
func (m *QueryMFAChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMFAChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMFAChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMFAChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMFAChallengeRequest.Merge(m, src)
}
func (m *QueryMFAChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMFAChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMFAChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMFAChallengeRequest proto.InternalMessageInfo

func (m *QueryMFAChallengeRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *QueryMFAChallengeRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// QueryMFAChallengeResponse is response type for the Query/MFAChallenge method.
type QueryMFAChallengeResponse struct {
	Challenge *MFAChallenge `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (m *QueryMFAChallengeResponse) Reset()         { *m = QueryMFAChallengeResponse{} }
func (m *QueryMFAChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMFAChallengeResponse) ProtoMessage()    {}
func (*QueryMFAChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{19}
}
func (m *QueryMFAChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMFAChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMFAChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMFAChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMFAChallengeResponse.Merge(m, src)
}
func (m *QueryMFAChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMFAChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMFAChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMFAChallengeResponse proto.InternalMessageInfo

func (m *QueryMFAChallengeResponse) GetChallenge() *MFAChallenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "selfchain.identity.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "selfchain.identity.QueryParamsResponse")
	proto.RegisterType((*QueryDIDDocumentsRequest)(nil), "selfchain.identity.QueryDIDDocumentsRequest")
	proto.RegisterType((*QueryDIDDocumentsResponse)(nil), "selfchain.identity.QueryDIDDocumentsResponse")
	proto.RegisterType((*QueryCredentialRequest)(nil), "selfchain.identity.QueryCredentialRequest")
	proto.RegisterType((*QueryCredentialResponse)(nil), "selfchain.identity.QueryCredentialResponse")
	proto.RegisterType((*QueryCredentialsByDIDRequest)(nil), "selfchain.identity.QueryCredentialsByDIDRequest")
	proto.RegisterType((*QueryCredentialsByDIDResponse)(nil), "selfchain.identity.QueryCredentialsByDIDResponse")
	proto.RegisterType((*QuerySocialIdentitiesRequest)(nil), "selfchain.identity.QuerySocialIdentitiesRequest")
	proto.RegisterType((*QuerySocialIdentitiesResponse)(nil), "selfchain.identity.QuerySocialIdentitiesResponse")
	proto.RegisterType((*QuerySocialIdentityBySocialIDRequest)(nil), "selfchain.identity.QuerySocialIdentityBySocialIDRequest")
	proto.RegisterType((*QuerySocialIdentityBySocialIDResponse)(nil), "selfchain.identity.QuerySocialIdentityBySocialIDResponse")
	proto.RegisterType((*QuerySocialIdentityRequest)(nil), "selfchain.identity.QuerySocialIdentityRequest")
	proto.RegisterType((*QuerySocialIdentityResponse)(nil), "selfchain.identity.QuerySocialIdentityResponse")
	proto.RegisterType((*QueryLinkedDIDRequest)(nil), "selfchain.identity.QueryLinkedDIDRequest")
	proto.RegisterType((*QueryLinkedDIDResponse)(nil), "selfchain.identity.QueryLinkedDIDResponse")
	proto.RegisterType((*QueryMFAConfigRequest)(nil), "selfchain.identity.QueryMFAConfigRequest")
	proto.RegisterType((*QueryMFAConfigResponse)(nil), "selfchain.identity.QueryMFAConfigResponse")
	proto.RegisterType((*QueryMFAChallengeRequest)(nil), "selfchain.identity.QueryMFAChallengeRequest")
	proto.RegisterType((*QueryMFAChallengeResponse)(nil), "selfchain.identity.QueryMFAChallengeResponse")
}

func init() { proto.RegisterFile("selfchain/identity/query.proto", fileDescriptor_7023bccf898bb2a2) }

var fileDescriptor_7023bccf898bb2a2 = []byte{
	// 978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0x2e, 0x58, 0xf1, 0x6b, 0x54, 0x45, 0x43, 0x29, 0x61, 0x9b, 0x3a, 0xd5, 0xb4,
	0x69, 0x9a, 0x5f, 0x9e, 0x24, 0x6d, 0x21, 0x94, 0x82, 0xc0, 0xb5, 0x90, 0x8a, 0x40, 0x2d, 0xe6,
	0xc2, 0x8f, 0x83, 0xb5, 0xf1, 0x4e, 0x9c, 0x11, 0xf6, 0x8e, 0xeb, 0xdd, 0x54, 0x58, 0x91, 0x2f,
	0xfc, 0x05, 0x15, 0x5c, 0xb9, 0x70, 0x80, 0x13, 0x12, 0xff, 0x46, 0x8f, 0x95, 0x72, 0xe1, 0x84,
	0x50, 0xc2, 0x3f, 0xc1, 0x0d, 0x79, 0xf6, 0xed, 0x78, 0xd7, 0x3b, 0xbb, 0x5e, 0x10, 0x37, 0xef,
	0xce, 0xf7, 0xbd, 0xf7, 0x79, 0x6f, 0xb6, 0xdf, 0xd7, 0x40, 0xd5, 0xe7, 0xdd, 0xc3, 0xf6, 0x91,
	0x23, 0x3c, 0x26, 0x5c, 0xee, 0x05, 0x22, 0x18, 0xb2, 0xa7, 0xc7, 0x7c, 0x30, 0xac, 0xf5, 0x07,
	0x32, 0x90, 0x84, 0xe8, 0xf3, 0x5a, 0x74, 0x6e, 0x5f, 0xee, 0xc8, 0x8e, 0x54, 0xc7, 0x6c, 0xfc,
	0x2b, 0x54, 0xda, 0xcb, 0x1d, 0x29, 0x3b, 0x5d, 0xce, 0x9c, 0xbe, 0x60, 0x8e, 0xe7, 0xc9, 0xc0,
	0x09, 0x84, 0xf4, 0x7c, 0x3c, 0xdd, 0x68, 0x4b, 0xbf, 0x27, 0x7d, 0x76, 0xe0, 0xf8, 0x3c, 0x2c,
	0xc0, 0x9e, 0xed, 0x1e, 0xf0, 0xc0, 0xd9, 0x65, 0x7d, 0xa7, 0x23, 0x3c, 0x25, 0x46, 0xed, 0x8a,
	0x81, 0xa9, 0xef, 0x0c, 0x9c, 0x5e, 0x94, 0x6c, 0xd5, 0x20, 0x70, 0x85, 0xdb, 0x72, 0x65, 0xfb,
	0xb8, 0xc7, 0xbd, 0x00, 0x65, 0x37, 0x0c, 0xb2, 0xf6, 0x80, 0xab, 0x9f, 0x4e, 0x17, 0x45, 0xa6,
	0x01, 0x48, 0xe7, 0x38, 0x38, 0x8a, 0xda, 0x32, 0x9c, 0xf7, 0x0e, 0x9d, 0xf0, 0x94, 0x5e, 0x06,
	0xf2, 0xd9, 0xb8, 0x99, 0x27, 0x0a, 0xaf, 0xc9, 0x9f, 0x1e, 0x73, 0x3f, 0xa0, 0x8f, 0xe1, 0xb5,
	0xc4, 0x5b, 0xbf, 0x2f, 0x3d, 0x9f, 0x93, 0x7d, 0x28, 0x87, 0x6d, 0x2c, 0x59, 0xd7, 0xad, 0xdb,
	0x17, 0xf7, 0xec, 0x5a, 0x7a, 0xb8, 0xb5, 0x30, 0xa6, 0xfe, 0xca, 0x8b, 0x3f, 0x56, 0xe6, 0x9a,
	0xa8, 0xa7, 0x5b, 0xb0, 0xa4, 0x12, 0x36, 0x1e, 0x35, 0x1a, 0xd8, 0x63, 0x54, 0x8c, 0x2c, 0xc2,
	0x05, 0x57, 0xb8, 0x2a, 0x65, 0xa5, 0x39, 0xfe, 0x49, 0xbf, 0x80, 0x37, 0x0d, 0x6a, 0x84, 0x78,
	0x17, 0xe6, 0xa3, 0x31, 0x21, 0xc6, 0x8a, 0x09, 0x23, 0x16, 0xdb, 0xd4, 0x01, 0xf4, 0x36, 0x5c,
	0x51, 0x99, 0x1f, 0xea, 0x29, 0x46, 0x14, 0x97, 0xa0, 0xa4, 0x21, 0x4a, 0xc2, 0xa5, 0x5f, 0xc2,
	0x1b, 0x29, 0x25, 0x12, 0xbc, 0x0f, 0x30, 0xb9, 0x05, 0x64, 0xa8, 0x9a, 0x18, 0x62, 0xb1, 0xb1,
	0x08, 0xba, 0x03, 0xcb, 0x53, 0xa9, 0xfd, 0xfa, 0xb8, 0xd7, 0xec, 0x81, 0x38, 0x70, 0x2d, 0x23,
	0x02, 0x91, 0x3e, 0x80, 0x8b, 0x93, 0x02, 0xe3, 0xeb, 0xb9, 0x50, 0x80, 0x29, 0x1e, 0xa2, 0xa1,
	0x3e, 0x97, 0x6d, 0xe1, 0x74, 0x1f, 0x85, 0x72, 0xc1, 0x73, 0x6e, 0xa9, 0x8d, 0x50, 0xe9, 0x08,
	0x84, 0xaa, 0x03, 0x08, 0xfd, 0x16, 0x99, 0xa8, 0x89, 0x29, 0x91, 0x61, 0xd8, 0x8c, 0x45, 0xd1,
	0x16, 0xdc, 0x4c, 0x17, 0x19, 0xd6, 0xa3, 0x67, 0x3d, 0x33, 0x1b, 0xe6, 0xfb, 0x03, 0xf9, 0x4c,
	0xb8, 0x7c, 0x80, 0x8c, 0xfa, 0x99, 0x5c, 0x85, 0x8a, 0xaf, 0xe4, 0x2d, 0xe1, 0x2e, 0x95, 0xc2,
	0x43, 0x1f, 0xf3, 0xd1, 0x0e, 0xac, 0xce, 0x28, 0xa0, 0x6f, 0x7d, 0x3e, 0x02, 0xc6, 0x3b, 0x2f,
	0xd2, 0x8b, 0x8e, 0xa1, 0x1f, 0x83, 0x6d, 0x28, 0x94, 0x39, 0xde, 0x44, 0x47, 0xa5, 0x64, 0x47,
	0xf4, 0x3e, 0x5c, 0x35, 0xe6, 0x42, 0xd4, 0x44, 0xc3, 0xd6, 0x54, 0xc3, 0x4f, 0xe0, 0x75, 0x15,
	0xfb, 0x89, 0xf0, 0xbe, 0xe1, 0x6e, 0xe3, 0x7f, 0x18, 0xe1, 0x06, 0xfe, 0xa3, 0x8a, 0x65, 0x44,
	0x90, 0xf4, 0x47, 0xb3, 0x8e, 0xd5, 0x3f, 0xfd, 0xe8, 0xc3, 0x87, 0xd2, 0x3b, 0x14, 0x9d, 0xec,
	0xef, 0xeb, 0x31, 0xa6, 0x8d, 0x49, 0x31, 0xed, 0x3d, 0x28, 0xb7, 0xd5, 0x1b, 0xbc, 0x88, 0x6b,
	0xa6, 0x8b, 0x98, 0x84, 0xa1, 0x98, 0x36, 0xd0, 0x84, 0xc6, 0x27, 0x47, 0x4e, 0xb7, 0xcb, 0xbd,
	0x0e, 0xcf, 0x9e, 0xff, 0x15, 0x28, 0xf7, 0x78, 0x70, 0x24, 0xa3, 0x7e, 0xf1, 0x89, 0x7e, 0x8d,
	0xe6, 0x94, 0xcc, 0xa2, 0x3f, 0x92, 0x4a, 0x3b, 0x7a, 0x89, 0x70, 0xd7, 0xb3, 0xe0, 0x74, 0xf0,
	0x24, 0x64, 0xef, 0xef, 0x05, 0x78, 0x55, 0x65, 0x27, 0x23, 0x28, 0x87, 0x4e, 0x4a, 0x6e, 0x99,
	0x12, 0xa4, 0x4d, 0xdb, 0x5e, 0x9b, 0xa9, 0x0b, 0x21, 0x29, 0xfd, 0xee, 0xf4, 0xaf, 0x1f, 0x4a,
	0xcb, 0xc4, 0x66, 0x99, 0x7b, 0x8a, 0xfc, 0x68, 0xc1, 0x42, 0xdc, 0x7e, 0xc9, 0x56, 0x66, 0x76,
	0x83, 0xa7, 0xdb, 0xdb, 0x05, 0xd5, 0x48, 0xc4, 0x14, 0xd1, 0x3a, 0x59, 0x63, 0x33, 0x16, 0xa3,
	0xcf, 0x4e, 0x5c, 0xe1, 0x8e, 0xc8, 0xf7, 0x16, 0xc0, 0xc4, 0xc9, 0xc8, 0x46, 0x66, 0xb9, 0x94,
	0xd1, 0xdb, 0x9b, 0x85, 0xb4, 0x08, 0xb6, 0xa9, 0xc0, 0x56, 0xc9, 0x0d, 0x96, 0xbb, 0x8a, 0xd9,
	0xc9, 0x18, 0xea, 0x17, 0x0b, 0x16, 0xa7, 0x1d, 0x9a, 0xec, 0x14, 0x28, 0x97, 0xb0, 0x7f, 0x7b,
	0xf7, 0x5f, 0x44, 0x20, 0xe6, 0xb6, 0xc2, 0x5c, 0x23, 0xab, 0xf9, 0x98, 0xd1, 0xf4, 0x7e, 0xb5,
	0x60, 0x71, 0xda, 0xb5, 0x73, 0x40, 0x33, 0x56, 0x42, 0x0e, 0x68, 0xd6, 0x4a, 0xa0, 0x77, 0x14,
	0xe8, 0x36, 0xd9, 0x34, 0x81, 0x6a, 0x87, 0x89, 0xc2, 0x10, 0xf7, 0xd4, 0x82, 0xa5, 0x2c, 0x7b,
	0x26, 0xfb, 0xc5, 0x20, 0xd2, 0x2b, 0xc3, 0x7e, 0xe7, 0x3f, 0x44, 0x62, 0x1b, 0x75, 0xd5, 0xc6,
	0x03, 0x72, 0x7f, 0x76, 0x1b, 0x43, 0x76, 0x12, 0xb9, 0xe8, 0x88, 0x9d, 0xe8, 0xb3, 0x11, 0xf9,
	0xcd, 0x82, 0x4b, 0xc9, 0x42, 0xa4, 0x56, 0x90, 0x28, 0xea, 0x80, 0x15, 0xd6, 0x23, 0xf7, 0x03,
	0xc5, 0xfd, 0x16, 0xb9, 0x5b, 0x88, 0x7b, 0x3c, 0xfc, 0x18, 0x3d, 0xf9, 0xc9, 0x82, 0x8a, 0xf6,
	0x78, 0xb2, 0x9e, 0x59, 0x7c, 0x7a, 0xb3, 0xd8, 0x1b, 0x45, 0xa4, 0x88, 0xf8, 0x9e, 0x42, 0x7c,
	0x9b, 0xdc, 0x33, 0x21, 0x76, 0x95, 0xbc, 0xe5, 0x0a, 0x37, 0x6b, 0xaa, 0xcf, 0x2d, 0xa8, 0x68,
	0xe7, 0xcf, 0x61, 0x9c, 0xde, 0x3f, 0x39, 0x8c, 0xa9, 0xfd, 0x43, 0xb7, 0x14, 0xe3, 0x2d, 0x72,
	0x93, 0x99, 0xff, 0x6f, 0xdd, 0x0a, 0x17, 0x0e, 0x7e, 0xbe, 0x3f, 0x5b, 0xb0, 0x10, 0xf7, 0xfb,
	0x1c, 0x2b, 0x35, 0x6c, 0xa6, 0x1c, 0x2b, 0x35, 0x6d, 0x20, 0xba, 0xaf, 0xd8, 0xf6, 0xc8, 0x4e,
	0x26, 0x5b, 0x14, 0x12, 0x5d, 0x70, 0xb8, 0xd7, 0x46, 0xf5, 0xbb, 0x2f, 0xce, 0xaa, 0xd6, 0xcb,
	0xb3, 0xaa, 0xf5, 0xe7, 0x59, 0xd5, 0x7a, 0x7e, 0x5e, 0x9d, 0x7b, 0x79, 0x5e, 0x9d, 0xfb, 0xfd,
	0xbc, 0x3a, 0xf7, 0x95, 0x3d, 0x49, 0xf5, 0xed, 0x24, 0x59, 0x30, 0xec, 0x73, 0xff, 0xa0, 0xac,
	0xfe, 0x8e, 0xb8, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x51, 0x11, 0xa2, 0x8d, 0x88, 0x0d,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of DIDDocuments items.
	DIDDocuments(ctx context.Context, in *QueryDIDDocumentsRequest, opts ...grpc.CallOption) (*QueryDIDDocumentsResponse, error)
	// Queries a credential by ID
	Credential(ctx context.Context, in *QueryCredentialRequest, opts ...grpc.CallOption) (*QueryCredentialResponse, error)
	// Queries credentials by DID
	CredentialsByDID(ctx context.Context, in *QueryCredentialsByDIDRequest, opts ...grpc.CallOption) (*QueryCredentialsByDIDResponse, error)
	// Queries a list of SocialIdentities items.
	SocialIdentities(ctx context.Context, in *QuerySocialIdentitiesRequest, opts ...grpc.CallOption) (*QuerySocialIdentitiesResponse, error)
	// Queries a social identity by provider and social ID.
	SocialIdentityBySocialID(ctx context.Context, in *QuerySocialIdentityBySocialIDRequest, opts ...grpc.CallOption) (*QuerySocialIdentityBySocialIDResponse, error)
	// SocialIdentity queries a social identity by DID and provider
	SocialIdentity(ctx context.Context, in *QuerySocialIdentityRequest, opts ...grpc.CallOption) (*QuerySocialIdentityResponse, error)
	// LinkedDID queries a DID linked to a social identity
	LinkedDID(ctx context.Context, in *QueryLinkedDIDRequest, opts ...grpc.CallOption) (*QueryLinkedDIDResponse, error)
	// Queries MFA configuration.
	MFAConfig(ctx context.Context, in *QueryMFAConfigRequest, opts ...grpc.CallOption) (*QueryMFAConfigResponse, error)
	// Queries MFA challenge.
	MFAChallenge(ctx context.Context, in *QueryMFAChallengeRequest, opts ...grpc.CallOption) (*QueryMFAChallengeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DIDDocuments(ctx context.Context, in *QueryDIDDocumentsRequest, opts ...grpc.CallOption) (*QueryDIDDocumentsResponse, error) {
	out := new(QueryDIDDocumentsResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/DIDDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Credential(ctx context.Context, in *QueryCredentialRequest, opts ...grpc.CallOption) (*QueryCredentialResponse, error) {
	out := new(QueryCredentialResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/Credential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CredentialsByDID(ctx context.Context, in *QueryCredentialsByDIDRequest, opts ...grpc.CallOption) (*QueryCredentialsByDIDResponse, error) {
	out := new(QueryCredentialsByDIDResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/CredentialsByDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SocialIdentities(ctx context.Context, in *QuerySocialIdentitiesRequest, opts ...grpc.CallOption) (*QuerySocialIdentitiesResponse, error) {
	out := new(QuerySocialIdentitiesResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/SocialIdentities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SocialIdentityBySocialID(ctx context.Context, in *QuerySocialIdentityBySocialIDRequest, opts ...grpc.CallOption) (*QuerySocialIdentityBySocialIDResponse, error) {
	out := new(QuerySocialIdentityBySocialIDResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/SocialIdentityBySocialID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SocialIdentity(ctx context.Context, in *QuerySocialIdentityRequest, opts ...grpc.CallOption) (*QuerySocialIdentityResponse, error) {
	out := new(QuerySocialIdentityResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/SocialIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LinkedDID(ctx context.Context, in *QueryLinkedDIDRequest, opts ...grpc.CallOption) (*QueryLinkedDIDResponse, error) {
	out := new(QueryLinkedDIDResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/LinkedDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MFAConfig(ctx context.Context, in *QueryMFAConfigRequest, opts ...grpc.CallOption) (*QueryMFAConfigResponse, error) {
	out := new(QueryMFAConfigResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/MFAConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MFAChallenge(ctx context.Context, in *QueryMFAChallengeRequest, opts ...grpc.CallOption) (*QueryMFAChallengeResponse, error) {
	out := new(QueryMFAChallengeResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/MFAChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of DIDDocuments items.
	DIDDocuments(context.Context, *QueryDIDDocumentsRequest) (*QueryDIDDocumentsResponse, error)
	// Queries a credential by ID
	Credential(context.Context, *QueryCredentialRequest) (*QueryCredentialResponse, error)
	// Queries credentials by DID
	CredentialsByDID(context.Context, *QueryCredentialsByDIDRequest) (*QueryCredentialsByDIDResponse, error)
	// Queries a list of SocialIdentities items.
	SocialIdentities(context.Context, *QuerySocialIdentitiesRequest) (*QuerySocialIdentitiesResponse, error)
	// Queries a social identity by provider and social ID.
	SocialIdentityBySocialID(context.Context, *QuerySocialIdentityBySocialIDRequest) (*QuerySocialIdentityBySocialIDResponse, error)
	// SocialIdentity queries a social identity by DID and provider
	SocialIdentity(context.Context, *QuerySocialIdentityRequest) (*QuerySocialIdentityResponse, error)
	// LinkedDID queries a DID linked to a social identity
	LinkedDID(context.Context, *QueryLinkedDIDRequest) (*QueryLinkedDIDResponse, error)
	// Queries MFA configuration.
	MFAConfig(context.Context, *QueryMFAConfigRequest) (*QueryMFAConfigResponse, error)
	// Queries MFA challenge.
	MFAChallenge(context.Context, *QueryMFAChallengeRequest) (*QueryMFAChallengeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DIDDocuments(ctx context.Context, req *QueryDIDDocumentsRequest) (*QueryDIDDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DIDDocuments not implemented")
}
func (*UnimplementedQueryServer) Credential(ctx context.Context, req *QueryCredentialRequest) (*QueryCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credential not implemented")
}
func (*UnimplementedQueryServer) CredentialsByDID(ctx context.Context, req *QueryCredentialsByDIDRequest) (*QueryCredentialsByDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialsByDID not implemented")
}
func (*UnimplementedQueryServer) SocialIdentities(ctx context.Context, req *QuerySocialIdentitiesRequest) (*QuerySocialIdentitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialIdentities not implemented")
}
func (*UnimplementedQueryServer) SocialIdentityBySocialID(ctx context.Context, req *QuerySocialIdentityBySocialIDRequest) (*QuerySocialIdentityBySocialIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialIdentityBySocialID not implemented")
}
func (*UnimplementedQueryServer) SocialIdentity(ctx context.Context, req *QuerySocialIdentityRequest) (*QuerySocialIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialIdentity not implemented")
}
func (*UnimplementedQueryServer) LinkedDID(ctx context.Context, req *QueryLinkedDIDRequest) (*QueryLinkedDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkedDID not implemented")
}
func (*UnimplementedQueryServer) MFAConfig(ctx context.Context, req *QueryMFAConfigRequest) (*QueryMFAConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MFAConfig not implemented")
}
func (*UnimplementedQueryServer) MFAChallenge(ctx context.Context, req *QueryMFAChallengeRequest) (*QueryMFAChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MFAChallenge not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DIDDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDIDDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DIDDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/DIDDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DIDDocuments(ctx, req.(*QueryDIDDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Credential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Credential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/Credential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Credential(ctx, req.(*QueryCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CredentialsByDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialsByDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialsByDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/CredentialsByDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialsByDID(ctx, req.(*QueryCredentialsByDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SocialIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySocialIdentitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SocialIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/SocialIdentities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SocialIdentities(ctx, req.(*QuerySocialIdentitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SocialIdentityBySocialID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySocialIdentityBySocialIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SocialIdentityBySocialID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/SocialIdentityBySocialID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SocialIdentityBySocialID(ctx, req.(*QuerySocialIdentityBySocialIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SocialIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySocialIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SocialIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/SocialIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SocialIdentity(ctx, req.(*QuerySocialIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LinkedDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLinkedDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LinkedDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/LinkedDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LinkedDID(ctx, req.(*QueryLinkedDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MFAConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMFAConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MFAConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/MFAConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MFAConfig(ctx, req.(*QueryMFAConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MFAChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMFAChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MFAChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/MFAChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MFAChallenge(ctx, req.(*QueryMFAChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "selfchain.identity.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DIDDocuments",
			Handler:    _Query_DIDDocuments_Handler,
		},
		{
			MethodName: "Credential",
			Handler:    _Query_Credential_Handler,
		},
		{
			MethodName: "CredentialsByDID",
			Handler:    _Query_CredentialsByDID_Handler,
		},
		{
			MethodName: "SocialIdentities",
			Handler:    _Query_SocialIdentities_Handler,
		},
		{
			MethodName: "SocialIdentityBySocialID",
			Handler:    _Query_SocialIdentityBySocialID_Handler,
		},
		{
			MethodName: "SocialIdentity",
			Handler:    _Query_SocialIdentity_Handler,
		},
		{
			MethodName: "LinkedDID",
			Handler:    _Query_LinkedDID_Handler,
		},
		{
			MethodName: "MFAConfig",
			Handler:    _Query_MFAConfig_Handler,
		},
		{
			MethodName: "MFAChallenge",
			Handler:    _Query_MFAChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "selfchain/identity/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDIDDocumentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDIDDocumentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDIDDocumentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDIDDocumentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDIDDocumentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDIDDocumentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Credential != nil {
		{
			size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialsByDIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialsByDIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialsByDIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialsByDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialsByDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialsByDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Credentials) > 0 {
		for iNdEx := len(m.Credentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySocialIdentitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySocialIdentitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySocialIdentitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySocialIdentitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySocialIdentitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySocialIdentitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identities) > 0 {
		for iNdEx := len(m.Identities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Identities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySocialIdentityBySocialIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySocialIdentityBySocialIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySocialIdentityBySocialIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SocialId) > 0 {
		i -= len(m.SocialId)
		copy(dAtA[i:], m.SocialId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SocialId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySocialIdentityBySocialIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySocialIdentityBySocialIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySocialIdentityBySocialIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Identity != nil {
		{
			size, err := m.Identity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySocialIdentityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySocialIdentityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySocialIdentityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySocialIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySocialIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySocialIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SocialId) > 0 {
		i -= len(m.SocialId)
		copy(dAtA[i:], m.SocialId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SocialId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLinkedDIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLinkedDIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLinkedDIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SocialId) > 0 {
		i -= len(m.SocialId)
		copy(dAtA[i:], m.SocialId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SocialId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLinkedDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLinkedDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLinkedDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMFAConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMFAConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMFAConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMFAConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMFAConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMFAConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMFAChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMFAChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMFAChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMFAChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMFAChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMFAChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDIDDocumentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDIDDocumentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialsByDIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialsByDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Credentials) > 0 {
		for _, e := range m.Credentials {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySocialIdentitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySocialIdentitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identities) > 0 {
		for _, e := range m.Identities {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySocialIdentityBySocialIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SocialId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySocialIdentityBySocialIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identity != nil {
		l = m.Identity.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySocialIdentityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySocialIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SocialId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLinkedDIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SocialId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLinkedDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMFAConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMFAConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMFAChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMFAChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDIDDocumentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDIDDocumentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDIDDocumentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDIDDocumentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDIDDocumentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDIDDocumentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &DIDDocument{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credential == nil {
				m.Credential = &Credential{}
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialsByDIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialsByDIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialsByDIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialsByDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialsByDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialsByDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials, &Credential{})
			if err := m.Credentials[len(m.Credentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySocialIdentitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySocialIdentitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySocialIdentitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySocialIdentitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySocialIdentitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySocialIdentitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identities = append(m.Identities, &SocialIdentity{})
			if err := m.Identities[len(m.Identities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySocialIdentityBySocialIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySocialIdentityBySocialIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySocialIdentityBySocialIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySocialIdentityBySocialIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySocialIdentityBySocialIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySocialIdentityBySocialIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identity == nil {
				m.Identity = &SocialIdentity{}
			}
			if err := m.Identity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySocialIdentityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySocialIdentityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySocialIdentityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySocialIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySocialIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySocialIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLinkedDIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLinkedDIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLinkedDIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLinkedDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLinkedDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLinkedDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMFAConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMFAConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMFAConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMFAConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMFAConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMFAConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &MFAConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMFAChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMFAChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMFAChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMFAChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMFAChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMFAChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &MFAChallenge{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
