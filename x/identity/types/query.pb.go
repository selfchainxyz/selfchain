// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryDIDDocumentRequest is request type for the Query/DIDDocument method.
type QueryDIDDocumentRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryDIDDocumentRequest) Reset()         { *m = QueryDIDDocumentRequest{} }
func (m *QueryDIDDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDIDDocumentRequest) ProtoMessage()    {}
func (*QueryDIDDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{2}
}
func (m *QueryDIDDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDIDDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDIDDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDIDDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDIDDocumentRequest.Merge(m, src)
}
func (m *QueryDIDDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDIDDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDIDDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDIDDocumentRequest proto.InternalMessageInfo

func (m *QueryDIDDocumentRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

// QueryDIDDocumentResponse is response type for the Query/DIDDocument method.
type QueryDIDDocumentResponse struct {
	Document DIDDocument `protobuf:"bytes,1,opt,name=document,proto3" json:"document"`
}

func (m *QueryDIDDocumentResponse) Reset()         { *m = QueryDIDDocumentResponse{} }
func (m *QueryDIDDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDIDDocumentResponse) ProtoMessage()    {}
func (*QueryDIDDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{3}
}
func (m *QueryDIDDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDIDDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDIDDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDIDDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDIDDocumentResponse.Merge(m, src)
}
func (m *QueryDIDDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDIDDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDIDDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDIDDocumentResponse proto.InternalMessageInfo

func (m *QueryDIDDocumentResponse) GetDocument() DIDDocument {
	if m != nil {
		return m.Document
	}
	return DIDDocument{}
}

// QueryCredentialRequest is request type for the Query/Credential method.
type QueryCredentialRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryCredentialRequest) Reset()         { *m = QueryCredentialRequest{} }
func (m *QueryCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialRequest) ProtoMessage()    {}
func (*QueryCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{4}
}
func (m *QueryCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialRequest.Merge(m, src)
}
func (m *QueryCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialRequest proto.InternalMessageInfo

func (m *QueryCredentialRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryCredentialResponse is response type for the Query/Credential method.
type QueryCredentialResponse struct {
	Credential Credential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential"`
}

func (m *QueryCredentialResponse) Reset()         { *m = QueryCredentialResponse{} }
func (m *QueryCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialResponse) ProtoMessage()    {}
func (*QueryCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{5}
}
func (m *QueryCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialResponse.Merge(m, src)
}
func (m *QueryCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialResponse proto.InternalMessageInfo

func (m *QueryCredentialResponse) GetCredential() Credential {
	if m != nil {
		return m.Credential
	}
	return Credential{}
}

// QueryCredentialsBySubjectRequest is request type for the Query/CredentialsBySubject method.
type QueryCredentialsBySubjectRequest struct {
	SubjectDid string             `protobuf:"bytes,1,opt,name=subject_did,json=subjectDid,proto3" json:"subject_did,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCredentialsBySubjectRequest) Reset()         { *m = QueryCredentialsBySubjectRequest{} }
func (m *QueryCredentialsBySubjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialsBySubjectRequest) ProtoMessage()    {}
func (*QueryCredentialsBySubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{6}
}
func (m *QueryCredentialsBySubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialsBySubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialsBySubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialsBySubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialsBySubjectRequest.Merge(m, src)
}
func (m *QueryCredentialsBySubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialsBySubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialsBySubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialsBySubjectRequest proto.InternalMessageInfo

func (m *QueryCredentialsBySubjectRequest) GetSubjectDid() string {
	if m != nil {
		return m.SubjectDid
	}
	return ""
}

func (m *QueryCredentialsBySubjectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCredentialsBySubjectResponse is response type for the Query/CredentialsBySubject method.
type QueryCredentialsBySubjectResponse struct {
	Credentials []Credential        `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCredentialsBySubjectResponse) Reset()         { *m = QueryCredentialsBySubjectResponse{} }
func (m *QueryCredentialsBySubjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialsBySubjectResponse) ProtoMessage()    {}
func (*QueryCredentialsBySubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{7}
}
func (m *QueryCredentialsBySubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialsBySubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialsBySubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialsBySubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialsBySubjectResponse.Merge(m, src)
}
func (m *QueryCredentialsBySubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialsBySubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialsBySubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialsBySubjectResponse proto.InternalMessageInfo

func (m *QueryCredentialsBySubjectResponse) GetCredentials() []Credential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *QueryCredentialsBySubjectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVerificationStatusRequest is request type for the Query/VerificationStatus method.
type QueryVerificationStatusRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryVerificationStatusRequest) Reset()         { *m = QueryVerificationStatusRequest{} }
func (m *QueryVerificationStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationStatusRequest) ProtoMessage()    {}
func (*QueryVerificationStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{8}
}
func (m *QueryVerificationStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationStatusRequest.Merge(m, src)
}
func (m *QueryVerificationStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationStatusRequest proto.InternalMessageInfo

func (m *QueryVerificationStatusRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

// QueryVerificationStatusResponse is response type for the Query/VerificationStatus method.
type QueryVerificationStatusResponse struct {
	Status VerificationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
}

func (m *QueryVerificationStatusResponse) Reset()         { *m = QueryVerificationStatusResponse{} }
func (m *QueryVerificationStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationStatusResponse) ProtoMessage()    {}
func (*QueryVerificationStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{9}
}
func (m *QueryVerificationStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationStatusResponse.Merge(m, src)
}
func (m *QueryVerificationStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationStatusResponse proto.InternalMessageInfo

func (m *QueryVerificationStatusResponse) GetStatus() VerificationStatus {
	if m != nil {
		return m.Status
	}
	return VerificationStatus{}
}

// VerificationStatus represents the status of identity verification
type VerificationStatus struct {
	Did        string     `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Provider   string     `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Verified   bool       `protobuf:"varint,3,opt,name=verified,proto3" json:"verified,omitempty"`
	VerifiedAt time.Time  `protobuf:"bytes,4,opt,name=verified_at,json=verifiedAt,proto3,stdtime" json:"verified_at"`
	ExpiresAt  *time.Time `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at,omitempty"`
}

func (m *VerificationStatus) Reset()         { *m = VerificationStatus{} }
func (m *VerificationStatus) String() string { return proto.CompactTextString(m) }
func (*VerificationStatus) ProtoMessage()    {}
func (*VerificationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7023bccf898bb2a2, []int{10}
}
func (m *VerificationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationStatus.Merge(m, src)
}
func (m *VerificationStatus) XXX_Size() int {
	return m.Size()
}
func (m *VerificationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationStatus proto.InternalMessageInfo

func (m *VerificationStatus) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *VerificationStatus) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *VerificationStatus) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *VerificationStatus) GetVerifiedAt() time.Time {
	if m != nil {
		return m.VerifiedAt
	}
	return time.Time{}
}

func (m *VerificationStatus) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "selfchain.identity.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "selfchain.identity.QueryParamsResponse")
	proto.RegisterType((*QueryDIDDocumentRequest)(nil), "selfchain.identity.QueryDIDDocumentRequest")
	proto.RegisterType((*QueryDIDDocumentResponse)(nil), "selfchain.identity.QueryDIDDocumentResponse")
	proto.RegisterType((*QueryCredentialRequest)(nil), "selfchain.identity.QueryCredentialRequest")
	proto.RegisterType((*QueryCredentialResponse)(nil), "selfchain.identity.QueryCredentialResponse")
	proto.RegisterType((*QueryCredentialsBySubjectRequest)(nil), "selfchain.identity.QueryCredentialsBySubjectRequest")
	proto.RegisterType((*QueryCredentialsBySubjectResponse)(nil), "selfchain.identity.QueryCredentialsBySubjectResponse")
	proto.RegisterType((*QueryVerificationStatusRequest)(nil), "selfchain.identity.QueryVerificationStatusRequest")
	proto.RegisterType((*QueryVerificationStatusResponse)(nil), "selfchain.identity.QueryVerificationStatusResponse")
	proto.RegisterType((*VerificationStatus)(nil), "selfchain.identity.VerificationStatus")
}

func init() { proto.RegisterFile("selfchain/identity/query.proto", fileDescriptor_7023bccf898bb2a2) }

var fileDescriptor_7023bccf898bb2a2 = []byte{
	// 785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x6e, 0xd3, 0x4a,
	0x14, 0xc6, 0xe3, 0xb4, 0x8d, 0xd2, 0x13, 0xe9, 0xea, 0x6a, 0x6e, 0x75, 0x6f, 0x64, 0xf5, 0x3a,
	0xc5, 0x55, 0xdb, 0xa8, 0x01, 0x8f, 0x9a, 0xb6, 0x12, 0x3b, 0xd4, 0x10, 0x8a, 0x58, 0x51, 0x52,
	0xc4, 0x02, 0x09, 0x45, 0x4e, 0x3c, 0x0d, 0x83, 0x1a, 0xdb, 0xf5, 0x4c, 0xa2, 0x46, 0x55, 0x37,
	0x6c, 0x59, 0x50, 0xc1, 0x8e, 0x77, 0x60, 0xc7, 0x8a, 0x27, 0xe8, 0xb2, 0x12, 0x1b, 0x56, 0x80,
	0x5a, 0xc4, 0x73, 0x20, 0x8f, 0xc7, 0x7f, 0x8a, 0x9d, 0x36, 0xdd, 0x4d, 0x66, 0xbe, 0xef, 0xcc,
	0x6f, 0x8e, 0xcf, 0x39, 0x01, 0x8d, 0x91, 0xfd, 0xbd, 0xee, 0x4b, 0x93, 0xda, 0x98, 0x5a, 0xc4,
	0xe6, 0x94, 0x8f, 0xf0, 0xc1, 0x80, 0x78, 0x23, 0xc3, 0xf5, 0x1c, 0xee, 0x20, 0x14, 0x9d, 0x1b,
	0xe1, 0xb9, 0x3a, 0xd7, 0x73, 0x7a, 0x8e, 0x38, 0xc6, 0xfe, 0x2a, 0x50, 0xaa, 0xf3, 0x3d, 0xc7,
	0xe9, 0xed, 0x13, 0x6c, 0xba, 0x14, 0x9b, 0xb6, 0xed, 0x70, 0x93, 0x53, 0xc7, 0x66, 0xf2, 0x74,
	0xb5, 0xeb, 0xb0, 0xbe, 0xc3, 0x70, 0xc7, 0x64, 0x24, 0xb8, 0x00, 0x0f, 0xd7, 0x3a, 0x84, 0x9b,
	0x6b, 0xd8, 0x35, 0x7b, 0xd4, 0x16, 0x62, 0xa9, 0xad, 0x64, 0x30, 0xb9, 0xa6, 0x67, 0xf6, 0xc3,
	0x60, 0x4b, 0x19, 0x02, 0x8b, 0x5a, 0x6d, 0xcb, 0xe9, 0x0e, 0xfa, 0xc4, 0xe6, 0x52, 0xb6, 0x98,
	0x21, 0xeb, 0x7a, 0x44, 0x2c, 0xcd, 0xfd, 0xf0, 0x32, 0x89, 0x2d, 0x7e, 0x75, 0x06, 0x7b, 0x98,
	0xd3, 0x3e, 0x61, 0xdc, 0xec, 0xbb, 0x81, 0x40, 0x9f, 0x03, 0xf4, 0xc4, 0xe7, 0xdd, 0x11, 0x04,
	0x2d, 0x72, 0x30, 0x20, 0x8c, 0xeb, 0x8f, 0xe1, 0x9f, 0x4b, 0xbb, 0xcc, 0x75, 0x6c, 0x46, 0xd0,
	0x5d, 0x28, 0x04, 0xa4, 0x65, 0x65, 0x41, 0xa9, 0x96, 0xea, 0xaa, 0x91, 0xce, 0x9f, 0x11, 0x78,
	0x1a, 0xd3, 0xa7, 0xdf, 0x2a, 0xb9, 0x96, 0xd4, 0xeb, 0x35, 0xf8, 0x4f, 0x04, 0x6c, 0x3e, 0x6a,
	0x36, 0xe5, 0x33, 0xe4, 0x5d, 0xe8, 0x6f, 0x98, 0xb2, 0xa8, 0x25, 0x22, 0xce, 0xb6, 0xfc, 0xa5,
	0xfe, 0x02, 0xca, 0x69, 0xb1, 0x44, 0xd8, 0x82, 0x62, 0x98, 0x07, 0x09, 0x51, 0xc9, 0x82, 0x48,
	0x58, 0x25, 0x49, 0x64, 0xd3, 0xab, 0xf0, 0xaf, 0x08, 0x7f, 0x3f, 0x4a, 0x56, 0x88, 0xf2, 0x17,
	0xe4, 0x23, 0x92, 0x3c, 0xb5, 0xf4, 0xb6, 0xa4, 0x4e, 0x2a, 0x25, 0x47, 0x13, 0x20, 0x4e, 0xb6,
	0x24, 0xd1, 0xb2, 0x48, 0x62, 0xaf, 0x04, 0x49, 0xf8, 0xf4, 0x37, 0x0a, 0x2c, 0xfc, 0x71, 0x03,
	0x6b, 0x8c, 0x76, 0x07, 0x9d, 0x57, 0xa4, 0x1b, 0x25, 0xa8, 0x02, 0x25, 0x16, 0xec, 0xb4, 0xe3,
	0x44, 0x81, 0xdc, 0x6a, 0x52, 0x0b, 0x6d, 0x03, 0xc4, 0x55, 0x56, 0xce, 0x0b, 0x96, 0x65, 0x23,
	0x28, 0x49, 0xc3, 0x2f, 0x49, 0x23, 0xa8, 0x79, 0x59, 0x92, 0xc6, 0x8e, 0xd9, 0x23, 0x32, 0x78,
	0x2b, 0xe1, 0xd4, 0x3f, 0x29, 0x70, 0xeb, 0x0a, 0x1a, 0xf9, 0xf2, 0x6d, 0x28, 0xc5, 0x2f, 0xf0,
	0x2b, 0x61, 0x6a, 0xe2, 0xa7, 0x27, 0x8d, 0xe8, 0x61, 0x06, 0xf5, 0xca, 0xb5, 0xd4, 0x01, 0xc4,
	0x25, 0xec, 0x3a, 0x68, 0x82, 0xfa, 0x19, 0xf1, 0xe8, 0x1e, 0xed, 0x8a, 0xcd, 0x5d, 0x6e, 0xf2,
	0x01, 0x1b, 0x5f, 0x62, 0x3d, 0xa8, 0x8c, 0xf5, 0x44, 0x5f, 0xb8, 0xc0, 0xc4, 0x8e, 0xfc, 0xba,
	0xcb, 0x59, 0x4f, 0x4c, 0xfb, 0xc3, 0xc2, 0x0f, 0xbc, 0xfa, 0x2f, 0x05, 0x50, 0x5a, 0x94, 0x26,
	0x42, 0x2a, 0x14, 0x5d, 0xcf, 0x19, 0x52, 0x8b, 0x78, 0x22, 0x19, 0xb3, 0xad, 0xe8, 0xb7, 0x7f,
	0x36, 0x14, 0x31, 0x88, 0x55, 0x9e, 0x5a, 0x50, 0xaa, 0xc5, 0x56, 0xf4, 0x1b, 0x3d, 0x80, 0x52,
	0xb8, 0x6e, 0x9b, 0xbc, 0x3c, 0x2d, 0x1b, 0x33, 0xe8, 0x7b, 0x23, 0xec, 0x7b, 0xe3, 0x69, 0xd8,
	0xf7, 0x8d, 0xa2, 0xcf, 0x77, 0xf2, 0xbd, 0xa2, 0xb4, 0x20, 0x34, 0x6e, 0x71, 0x74, 0x0f, 0x80,
	0x1c, 0xba, 0xd4, 0x23, 0xcc, 0x8f, 0x32, 0x73, 0x6d, 0x94, 0x69, 0x11, 0x61, 0x56, 0x7a, 0xb6,
	0x78, 0xfd, 0x43, 0x01, 0x66, 0x44, 0x4a, 0xd1, 0x31, 0x14, 0x82, 0x19, 0x80, 0x32, 0x53, 0x96,
	0x1e, 0x37, 0xea, 0xca, 0xb5, 0xba, 0xe0, 0x9b, 0xe8, 0xfa, 0xeb, 0x2f, 0x3f, 0xdf, 0xe7, 0xe7,
	0x91, 0x8a, 0xc7, 0x0e, 0x51, 0xf4, 0x56, 0x81, 0x52, 0xa2, 0xfd, 0x51, 0x6d, 0x6c, 0xf0, 0xf4,
	0x30, 0x52, 0x6f, 0x4f, 0x26, 0x96, 0x38, 0x4b, 0x02, 0xa7, 0x82, 0xfe, 0xc7, 0xd9, 0x23, 0x1b,
	0x1f, 0x59, 0xd4, 0x3a, 0x46, 0xef, 0x14, 0x80, 0xb8, 0x17, 0xd0, 0xea, 0xd8, 0x3b, 0x52, 0x13,
	0x49, 0xad, 0x4d, 0xa4, 0x95, 0x38, 0x35, 0x81, 0xb3, 0x84, 0x16, 0xf1, 0x95, 0x7f, 0x0d, 0xf8,
	0xc8, 0x87, 0xfa, 0xac, 0xc0, 0x5c, 0x56, 0x9f, 0xa3, 0x8d, 0x09, 0xae, 0x4c, 0x0d, 0x29, 0x75,
	0xf3, 0x86, 0x2e, 0x89, 0xbc, 0x29, 0x90, 0x31, 0xba, 0x73, 0x35, 0x32, 0xc3, 0x47, 0x89, 0x11,
	0x78, 0x8c, 0x3e, 0x66, 0x77, 0x55, 0x7d, 0x2c, 0xc4, 0xd8, 0xd9, 0xa0, 0xae, 0xdf, 0xc8, 0x23,
	0xb1, 0x0d, 0x81, 0x5d, 0x45, 0xcb, 0x59, 0xd8, 0xc3, 0x84, 0x2f, 0xa8, 0x80, 0xc6, 0xc6, 0xe9,
	0xb9, 0xa6, 0x9c, 0x9d, 0x6b, 0xca, 0x8f, 0x73, 0x4d, 0x39, 0xb9, 0xd0, 0x72, 0x67, 0x17, 0x5a,
	0xee, 0xeb, 0x85, 0x96, 0x7b, 0xae, 0xc6, 0x01, 0x0e, 0xe3, 0x10, 0x7c, 0xe4, 0x12, 0xd6, 0x29,
	0x88, 0xbe, 0x5b, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x16, 0x4e, 0xa3, 0x83, 0xc6, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DIDDocument queries a DID document by ID.
	DIDDocument(ctx context.Context, in *QueryDIDDocumentRequest, opts ...grpc.CallOption) (*QueryDIDDocumentResponse, error)
	// Credential queries a credential by ID.
	Credential(ctx context.Context, in *QueryCredentialRequest, opts ...grpc.CallOption) (*QueryCredentialResponse, error)
	// CredentialsBySubject queries all credentials for a subject DID.
	CredentialsBySubject(ctx context.Context, in *QueryCredentialsBySubjectRequest, opts ...grpc.CallOption) (*QueryCredentialsBySubjectResponse, error)
	// VerificationStatus queries the verification status for a DID.
	VerificationStatus(ctx context.Context, in *QueryVerificationStatusRequest, opts ...grpc.CallOption) (*QueryVerificationStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DIDDocument(ctx context.Context, in *QueryDIDDocumentRequest, opts ...grpc.CallOption) (*QueryDIDDocumentResponse, error) {
	out := new(QueryDIDDocumentResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/DIDDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Credential(ctx context.Context, in *QueryCredentialRequest, opts ...grpc.CallOption) (*QueryCredentialResponse, error) {
	out := new(QueryCredentialResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/Credential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CredentialsBySubject(ctx context.Context, in *QueryCredentialsBySubjectRequest, opts ...grpc.CallOption) (*QueryCredentialsBySubjectResponse, error) {
	out := new(QueryCredentialsBySubjectResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/CredentialsBySubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerificationStatus(ctx context.Context, in *QueryVerificationStatusRequest, opts ...grpc.CallOption) (*QueryVerificationStatusResponse, error) {
	out := new(QueryVerificationStatusResponse)
	err := c.cc.Invoke(ctx, "/selfchain.identity.Query/VerificationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DIDDocument queries a DID document by ID.
	DIDDocument(context.Context, *QueryDIDDocumentRequest) (*QueryDIDDocumentResponse, error)
	// Credential queries a credential by ID.
	Credential(context.Context, *QueryCredentialRequest) (*QueryCredentialResponse, error)
	// CredentialsBySubject queries all credentials for a subject DID.
	CredentialsBySubject(context.Context, *QueryCredentialsBySubjectRequest) (*QueryCredentialsBySubjectResponse, error)
	// VerificationStatus queries the verification status for a DID.
	VerificationStatus(context.Context, *QueryVerificationStatusRequest) (*QueryVerificationStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DIDDocument(ctx context.Context, req *QueryDIDDocumentRequest) (*QueryDIDDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DIDDocument not implemented")
}
func (*UnimplementedQueryServer) Credential(ctx context.Context, req *QueryCredentialRequest) (*QueryCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credential not implemented")
}
func (*UnimplementedQueryServer) CredentialsBySubject(ctx context.Context, req *QueryCredentialsBySubjectRequest) (*QueryCredentialsBySubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialsBySubject not implemented")
}
func (*UnimplementedQueryServer) VerificationStatus(ctx context.Context, req *QueryVerificationStatusRequest) (*QueryVerificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationStatus not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DIDDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDIDDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DIDDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/DIDDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DIDDocument(ctx, req.(*QueryDIDDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Credential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Credential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/Credential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Credential(ctx, req.(*QueryCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CredentialsBySubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialsBySubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialsBySubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/CredentialsBySubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialsBySubject(ctx, req.(*QueryCredentialsBySubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selfchain.identity.Query/VerificationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerificationStatus(ctx, req.(*QueryVerificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "selfchain.identity.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DIDDocument",
			Handler:    _Query_DIDDocument_Handler,
		},
		{
			MethodName: "Credential",
			Handler:    _Query_Credential_Handler,
		},
		{
			MethodName: "CredentialsBySubject",
			Handler:    _Query_CredentialsBySubject_Handler,
		},
		{
			MethodName: "VerificationStatus",
			Handler:    _Query_VerificationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "selfchain/identity/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDIDDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDIDDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDIDDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDIDDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDIDDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDIDDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCredentialsBySubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialsBySubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialsBySubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubjectDid) > 0 {
		i -= len(m.SubjectDid)
		copy(dAtA[i:], m.SubjectDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialsBySubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialsBySubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialsBySubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Credentials) > 0 {
		for iNdEx := len(m.Credentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VerificationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != nil {
		n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintQuery(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x2a
	}
	n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.VerifiedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VerifiedAt):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintQuery(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x22
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDIDDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDIDDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Document.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Credential.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCredentialsBySubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubjectDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialsBySubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Credentials) > 0 {
		for _, e := range m.Credentials {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Status.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *VerificationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VerifiedAt)
	n += 1 + l + sovQuery(uint64(l))
	if m.ExpiresAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDIDDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDIDDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDIDDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDIDDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDIDDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDIDDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialsBySubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialsBySubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialsBySubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialsBySubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialsBySubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialsBySubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials, Credential{})
			if err := m.Credentials[len(m.Credentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerificationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.VerifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
