// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/audit.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SecuritySeverity represents the severity level of security events
type SecuritySeverity int32

const (
	SecuritySeverity_SEVERITY_UNSPECIFIED SecuritySeverity = 0
	SecuritySeverity_SEVERITY_INFO        SecuritySeverity = 1
	SecuritySeverity_SEVERITY_WARNING     SecuritySeverity = 2
	SecuritySeverity_SEVERITY_ERROR       SecuritySeverity = 3
	SecuritySeverity_SEVERITY_CRITICAL    SecuritySeverity = 4
)

var SecuritySeverity_name = map[int32]string{
	0: "SEVERITY_UNSPECIFIED",
	1: "SEVERITY_INFO",
	2: "SEVERITY_WARNING",
	3: "SEVERITY_ERROR",
	4: "SEVERITY_CRITICAL",
}

var SecuritySeverity_value = map[string]int32{
	"SEVERITY_UNSPECIFIED": 0,
	"SEVERITY_INFO":        1,
	"SEVERITY_WARNING":     2,
	"SEVERITY_ERROR":       3,
	"SEVERITY_CRITICAL":    4,
}

func (x SecuritySeverity) String() string {
	return proto.EnumName(SecuritySeverity_name, int32(x))
}

func (SecuritySeverity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf71e5bff63a11ce, []int{0}
}

// AuditLogType represents the type of audit log entry
type AuditLogType int32

const (
	AuditLogType_AUDIT_LOG_TYPE_UNSPECIFIED              AuditLogType = 0
	AuditLogType_AUDIT_LOG_TYPE_CREDENTIAL_CREATED       AuditLogType = 1
	AuditLogType_AUDIT_LOG_TYPE_CREDENTIAL_UPDATED       AuditLogType = 2
	AuditLogType_AUDIT_LOG_TYPE_CREDENTIAL_DELETED       AuditLogType = 3
	AuditLogType_AUDIT_LOG_TYPE_CREDENTIAL_REVOKED       AuditLogType = 4
	AuditLogType_AUDIT_LOG_TYPE_CREDENTIAL_VERIFIED      AuditLogType = 5
	AuditLogType_AUDIT_LOG_TYPE_DID_CREATED              AuditLogType = 6
	AuditLogType_AUDIT_LOG_TYPE_DID_UPDATED              AuditLogType = 7
	AuditLogType_AUDIT_LOG_TYPE_DID_DELETED              AuditLogType = 8
	AuditLogType_AUDIT_LOG_TYPE_MFA_CONFIGURED           AuditLogType = 9
	AuditLogType_AUDIT_LOG_TYPE_MFA_UPDATED              AuditLogType = 10
	AuditLogType_AUDIT_LOG_TYPE_MFA_DISABLED             AuditLogType = 11
	AuditLogType_AUDIT_LOG_TYPE_SOCIAL_IDENTITY_LINKED   AuditLogType = 12
	AuditLogType_AUDIT_LOG_TYPE_SOCIAL_IDENTITY_UNLINKED AuditLogType = 13
)

var AuditLogType_name = map[int32]string{
	0:  "AUDIT_LOG_TYPE_UNSPECIFIED",
	1:  "AUDIT_LOG_TYPE_CREDENTIAL_CREATED",
	2:  "AUDIT_LOG_TYPE_CREDENTIAL_UPDATED",
	3:  "AUDIT_LOG_TYPE_CREDENTIAL_DELETED",
	4:  "AUDIT_LOG_TYPE_CREDENTIAL_REVOKED",
	5:  "AUDIT_LOG_TYPE_CREDENTIAL_VERIFIED",
	6:  "AUDIT_LOG_TYPE_DID_CREATED",
	7:  "AUDIT_LOG_TYPE_DID_UPDATED",
	8:  "AUDIT_LOG_TYPE_DID_DELETED",
	9:  "AUDIT_LOG_TYPE_MFA_CONFIGURED",
	10: "AUDIT_LOG_TYPE_MFA_UPDATED",
	11: "AUDIT_LOG_TYPE_MFA_DISABLED",
	12: "AUDIT_LOG_TYPE_SOCIAL_IDENTITY_LINKED",
	13: "AUDIT_LOG_TYPE_SOCIAL_IDENTITY_UNLINKED",
}

var AuditLogType_value = map[string]int32{
	"AUDIT_LOG_TYPE_UNSPECIFIED":              0,
	"AUDIT_LOG_TYPE_CREDENTIAL_CREATED":       1,
	"AUDIT_LOG_TYPE_CREDENTIAL_UPDATED":       2,
	"AUDIT_LOG_TYPE_CREDENTIAL_DELETED":       3,
	"AUDIT_LOG_TYPE_CREDENTIAL_REVOKED":       4,
	"AUDIT_LOG_TYPE_CREDENTIAL_VERIFIED":      5,
	"AUDIT_LOG_TYPE_DID_CREATED":              6,
	"AUDIT_LOG_TYPE_DID_UPDATED":              7,
	"AUDIT_LOG_TYPE_DID_DELETED":              8,
	"AUDIT_LOG_TYPE_MFA_CONFIGURED":           9,
	"AUDIT_LOG_TYPE_MFA_UPDATED":              10,
	"AUDIT_LOG_TYPE_MFA_DISABLED":             11,
	"AUDIT_LOG_TYPE_SOCIAL_IDENTITY_LINKED":   12,
	"AUDIT_LOG_TYPE_SOCIAL_IDENTITY_UNLINKED": 13,
}

func (x AuditLogType) String() string {
	return proto.EnumName(AuditLogType_name, int32(x))
}

func (AuditLogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf71e5bff63a11ce, []int{1}
}

// AuditLogEntry represents an audit log entry
type AuditLogEntry struct {
	Id        string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      AuditLogType      `protobuf:"varint,2,opt,name=type,proto3,enum=selfchain.identity.AuditLogType" json:"type,omitempty"`
	Did       string            `protobuf:"bytes,3,opt,name=did,proto3" json:"did,omitempty"`
	Action    string            `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Actor     string            `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp int64             `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Severity  SecuritySeverity  `protobuf:"varint,8,opt,name=severity,proto3,enum=selfchain.identity.SecuritySeverity" json:"severity,omitempty"`
	IP        string            `protobuf:"bytes,9,opt,name=IP,proto3" json:"ip"`
	UserAgent string            `protobuf:"bytes,10,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
}

func (m *AuditLogEntry) Reset()         { *m = AuditLogEntry{} }
func (m *AuditLogEntry) String() string { return proto.CompactTextString(m) }
func (*AuditLogEntry) ProtoMessage()    {}
func (*AuditLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf71e5bff63a11ce, []int{0}
}
func (m *AuditLogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditLogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditLogEntry.Merge(m, src)
}
func (m *AuditLogEntry) XXX_Size() int {
	return m.Size()
}
func (m *AuditLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AuditLogEntry proto.InternalMessageInfo

func (m *AuditLogEntry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuditLogEntry) GetType() AuditLogType {
	if m != nil {
		return m.Type
	}
	return AuditLogType_AUDIT_LOG_TYPE_UNSPECIFIED
}

func (m *AuditLogEntry) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *AuditLogEntry) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *AuditLogEntry) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *AuditLogEntry) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AuditLogEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AuditLogEntry) GetSeverity() SecuritySeverity {
	if m != nil {
		return m.Severity
	}
	return SecuritySeverity_SEVERITY_UNSPECIFIED
}

func (m *AuditLogEntry) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *AuditLogEntry) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func init() {
	proto.RegisterEnum("selfchain.identity.SecuritySeverity", SecuritySeverity_name, SecuritySeverity_value)
	proto.RegisterEnum("selfchain.identity.AuditLogType", AuditLogType_name, AuditLogType_value)
	proto.RegisterType((*AuditLogEntry)(nil), "selfchain.identity.AuditLogEntry")
	proto.RegisterMapType((map[string]string)(nil), "selfchain.identity.AuditLogEntry.MetadataEntry")
}

func init() { proto.RegisterFile("selfchain/identity/audit.proto", fileDescriptor_cf71e5bff63a11ce) }

var fileDescriptor_cf71e5bff63a11ce = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xc1, 0x6e, 0xda, 0x4a,
	0x14, 0xc5, 0x36, 0x21, 0x70, 0x13, 0x22, 0x67, 0xc4, 0x8b, 0x2c, 0xde, 0x8b, 0x43, 0xa2, 0x97,
	0x96, 0xa6, 0x12, 0x48, 0x69, 0x16, 0x55, 0xbb, 0xa9, 0x83, 0x87, 0x68, 0x14, 0xc7, 0xa0, 0xc1,
	0xa4, 0x4a, 0x37, 0xc8, 0xc1, 0x13, 0x6a, 0x35, 0xc1, 0x08, 0x86, 0xa8, 0xec, 0xfa, 0x05, 0x55,
	0xbf, 0xa6, 0xdf, 0xd0, 0x65, 0x96, 0x5d, 0x55, 0x55, 0xb2, 0xeb, 0x57, 0x54, 0x33, 0x80, 0xd3,
	0x52, 0x42, 0x77, 0x73, 0xcf, 0x39, 0xbe, 0xf7, 0x9c, 0x6b, 0xe9, 0x82, 0x39, 0x60, 0x97, 0x17,
	0xed, 0xb7, 0x7e, 0xd8, 0x2d, 0x87, 0x01, 0xeb, 0xf2, 0x90, 0x8f, 0xca, 0xfe, 0x30, 0x08, 0x79,
	0xa9, 0xd7, 0x8f, 0x78, 0x84, 0x50, 0xcc, 0x97, 0xa6, 0x7c, 0x3e, 0xd7, 0x89, 0x3a, 0x91, 0xa4,
	0xcb, 0xe2, 0x35, 0x56, 0xe6, 0xb7, 0x3a, 0x51, 0xd4, 0xb9, 0x64, 0x65, 0x59, 0x9d, 0x0f, 0x2f,
	0xca, 0x3c, 0xbc, 0x62, 0x03, 0xee, 0x5f, 0xf5, 0xc6, 0x82, 0x9d, 0xcf, 0x1a, 0x64, 0x2d, 0xd1,
	0xda, 0x89, 0x3a, 0xb8, 0xcb, 0xfb, 0x23, 0xb4, 0x06, 0x6a, 0x18, 0x18, 0x4a, 0x41, 0x29, 0x66,
	0xa8, 0x1a, 0x06, 0xe8, 0x00, 0x92, 0x7c, 0xd4, 0x63, 0x86, 0x5a, 0x50, 0x8a, 0x6b, 0xfb, 0x85,
	0xd2, 0x9f, 0xb3, 0x4b, 0xd3, 0x06, 0xde, 0xa8, 0xc7, 0xa8, 0x54, 0x23, 0x1d, 0xb4, 0x20, 0x0c,
	0x0c, 0x4d, 0xb6, 0x11, 0x4f, 0xb4, 0x01, 0x29, 0xbf, 0xcd, 0xc3, 0xa8, 0x6b, 0x24, 0x25, 0x38,
	0xa9, 0x50, 0x0e, 0x96, 0xfc, 0x36, 0x8f, 0xfa, 0xc6, 0x92, 0x84, 0xc7, 0x05, 0x3a, 0x86, 0xf4,
	0x15, 0xe3, 0x7e, 0xe0, 0x73, 0xdf, 0x48, 0x15, 0xb4, 0xe2, 0xca, 0x7e, 0x79, 0xd1, 0x64, 0x69,
	0xbd, 0x74, 0x32, 0xf9, 0x42, 0x56, 0x34, 0x6e, 0x80, 0xfe, 0x83, 0x4c, 0x9c, 0xdb, 0x58, 0x2e,
	0x28, 0x45, 0x8d, 0xde, 0x03, 0xe8, 0x15, 0xa4, 0x07, 0xec, 0x9a, 0xf5, 0x43, 0x3e, 0x32, 0xd2,
	0x32, 0xe4, 0xff, 0xf3, 0x46, 0x35, 0x58, 0x7b, 0x28, 0x34, 0x8d, 0x89, 0x96, 0xc6, 0x5f, 0xa1,
	0x0d, 0x50, 0x49, 0xdd, 0xc8, 0x08, 0xff, 0x87, 0xa9, 0x1f, 0xdf, 0xb6, 0xd4, 0xb0, 0x47, 0x55,
	0x52, 0x47, 0x9b, 0x00, 0xc3, 0x01, 0xeb, 0xb7, 0xfc, 0x0e, 0xeb, 0x72, 0x03, 0x64, 0xbe, 0x8c,
	0x40, 0x2c, 0x01, 0xe4, 0x5f, 0x42, 0xf6, 0x37, 0xc7, 0x62, 0x69, 0xef, 0xd8, 0x68, 0xb2, 0x7b,
	0xf1, 0x14, 0xcb, 0xb9, 0xf6, 0x2f, 0x87, 0xe3, 0xed, 0x67, 0xe8, 0xb8, 0x78, 0xa1, 0x3e, 0x57,
	0xf6, 0x3e, 0x28, 0xa0, 0xcf, 0x5a, 0x42, 0x06, 0xe4, 0x1a, 0xf8, 0x14, 0x53, 0xe2, 0x9d, 0xb5,
	0x9a, 0x6e, 0xa3, 0x8e, 0x2b, 0xa4, 0x4a, 0xb0, 0xad, 0x27, 0xd0, 0x3a, 0x64, 0x63, 0x86, 0xb8,
	0xd5, 0x9a, 0xae, 0xa0, 0x1c, 0xe8, 0x31, 0xf4, 0xda, 0xa2, 0x2e, 0x71, 0x8f, 0x74, 0x15, 0x21,
	0x58, 0x8b, 0x51, 0x4c, 0x69, 0x8d, 0xea, 0x1a, 0xfa, 0x07, 0xd6, 0x63, 0xac, 0x42, 0x89, 0x47,
	0x2a, 0x96, 0xa3, 0x27, 0xf7, 0x3e, 0x26, 0x61, 0xf5, 0xd7, 0x5f, 0x8f, 0x4c, 0xc8, 0x5b, 0x4d,
	0x9b, 0x78, 0x2d, 0xa7, 0x76, 0xd4, 0xf2, 0xce, 0xea, 0x78, 0xc6, 0xc4, 0x2e, 0x6c, 0xcf, 0xf0,
	0x15, 0x8a, 0x6d, 0xec, 0x7a, 0xc4, 0x72, 0xc4, 0xd3, 0xf2, 0xb0, 0xad, 0x2b, 0x8b, 0x65, 0xcd,
	0xba, 0x2d, 0x65, 0xea, 0x62, 0x99, 0x8d, 0x1d, 0x2c, 0x64, 0xda, 0x62, 0x19, 0xc5, 0xa7, 0xb5,
	0x63, 0x6c, 0xeb, 0x49, 0xf4, 0x08, 0x76, 0x1e, 0x96, 0x89, 0xec, 0x32, 0xc3, 0xd2, 0x9c, 0x8c,
	0x36, 0xb1, 0x63, 0xf3, 0xa9, 0x07, 0xf8, 0xa9, 0xeb, 0xe5, 0x07, 0xf8, 0xa9, 0xdd, 0x34, 0xda,
	0x86, 0xcd, 0x19, 0xfe, 0xa4, 0x6a, 0xb5, 0x2a, 0x35, 0xb7, 0x4a, 0x8e, 0x9a, 0x14, 0xdb, 0x7a,
	0x66, 0x4e, 0x0b, 0x21, 0x99, 0x8e, 0x00, 0xb4, 0x05, 0xff, 0xce, 0xe1, 0x6d, 0xd2, 0xb0, 0x0e,
	0x1d, 0x6c, 0xeb, 0x2b, 0xe8, 0x09, 0xec, 0xce, 0x08, 0x1a, 0xb5, 0x8a, 0xc8, 0x49, 0x64, 0x60,
	0xef, 0xac, 0xe5, 0x10, 0x57, 0xac, 0x65, 0x15, 0x3d, 0x85, 0xc7, 0x7f, 0x91, 0x36, 0xdd, 0x89,
	0x38, 0x7b, 0x78, 0xf0, 0xe5, 0xd6, 0x54, 0x6e, 0x6e, 0x4d, 0xe5, 0xfb, 0xad, 0xa9, 0x7c, 0xba,
	0x33, 0x13, 0x37, 0x77, 0x66, 0xe2, 0xeb, 0x9d, 0x99, 0x78, 0x93, 0xbf, 0xbf, 0x68, 0xef, 0xef,
	0x6f, 0x9a, 0xb8, 0x14, 0x83, 0xf3, 0x94, 0xbc, 0x44, 0xcf, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x13, 0xaf, 0x3f, 0x9a, 0xf6, 0x04, 0x00, 0x00,
}

func (m *AuditLogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditLogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditLogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Severity != 0 {
		i = encodeVarintAudit(dAtA, i, uint64(m.Severity))
		i--
		dAtA[i] = 0x40
	}
	if m.Timestamp != 0 {
		i = encodeVarintAudit(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAudit(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAudit(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAudit(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintAudit(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAudit(dAtA []byte, offset int, v uint64) int {
	offset -= sovAudit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuditLogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAudit(uint64(m.Type))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAudit(uint64(len(k))) + 1 + len(v) + sovAudit(uint64(len(v)))
			n += mapEntrySize + 1 + sovAudit(uint64(mapEntrySize))
		}
	}
	if m.Timestamp != 0 {
		n += 1 + sovAudit(uint64(m.Timestamp))
	}
	if m.Severity != 0 {
		n += 1 + sovAudit(uint64(m.Severity))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	return n
}

func sovAudit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAudit(x uint64) (n int) {
	return sovAudit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuditLogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditLogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditLogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AuditLogType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAudit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAudit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAudit
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAudit
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAudit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAudit
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAudit
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAudit(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAudit
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= SecuritySeverity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAudit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAudit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAudit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAudit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAudit = fmt.Errorf("proto: unexpected end of group")
)
