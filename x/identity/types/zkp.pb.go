// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selfchain/identity/zkp.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ZKProof represents a zero-knowledge proof
type ZKProof struct {
	// Type of the proof (e.g., "Schnorr", "ElGamal", etc.)
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The proof data in bytes
	ProofData []byte `protobuf:"bytes,2,opt,name=proof_data,json=proofData,proto3" json:"proof_data,omitempty"`
	// Hash of the original claims
	ClaimsHash string `protobuf:"bytes,3,opt,name=claims_hash,json=claimsHash,proto3" json:"claims_hash,omitempty"`
	// List of disclosed claim indices
	DisclosedIndices []uint32 `protobuf:"varint,4,rep,packed,name=disclosed_indices,json=disclosedIndices,proto3" json:"disclosed_indices,omitempty"`
	// Timestamp when the proof was created
	Created int64 `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	// The verification key or method to be used
	VerificationKey string `protobuf:"bytes,6,opt,name=verification_key,json=verificationKey,proto3" json:"verification_key,omitempty"`
	// Additional metadata for the proof
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ZKProof) Reset()         { *m = ZKProof{} }
func (m *ZKProof) String() string { return proto.CompactTextString(m) }
func (*ZKProof) ProtoMessage()    {}
func (*ZKProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bb7dd5ecca1a83e, []int{0}
}
func (m *ZKProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZKProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZKProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKProof.Merge(m, src)
}
func (m *ZKProof) XXX_Size() int {
	return m.Size()
}
func (m *ZKProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKProof.DiscardUnknown(m)
}

var xxx_messageInfo_ZKProof proto.InternalMessageInfo

func (m *ZKProof) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ZKProof) GetProofData() []byte {
	if m != nil {
		return m.ProofData
	}
	return nil
}

func (m *ZKProof) GetClaimsHash() string {
	if m != nil {
		return m.ClaimsHash
	}
	return ""
}

func (m *ZKProof) GetDisclosedIndices() []uint32 {
	if m != nil {
		return m.DisclosedIndices
	}
	return nil
}

func (m *ZKProof) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ZKProof) GetVerificationKey() string {
	if m != nil {
		return m.VerificationKey
	}
	return ""
}

func (m *ZKProof) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// ZKPresentationProof extends CredentialProof with ZKP capabilities
type ZKPresentationProof struct {
	// Standard credential proof fields
	Type               string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Created            int64  `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	VerificationMethod string `protobuf:"bytes,3,opt,name=verification_method,json=verificationMethod,proto3" json:"verification_method,omitempty"`
	ProofPurpose       string `protobuf:"bytes,4,opt,name=proof_purpose,json=proofPurpose,proto3" json:"proof_purpose,omitempty"`
	// Zero-knowledge proof
	ZkProof *ZKProof `protobuf:"bytes,5,opt,name=zk_proof,json=zkProof,proto3" json:"zk_proof,omitempty"`
	// Challenge-response for freshness
	Challenge string `protobuf:"bytes,6,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Response  string `protobuf:"bytes,7,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *ZKPresentationProof) Reset()         { *m = ZKPresentationProof{} }
func (m *ZKPresentationProof) String() string { return proto.CompactTextString(m) }
func (*ZKPresentationProof) ProtoMessage()    {}
func (*ZKPresentationProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bb7dd5ecca1a83e, []int{1}
}
func (m *ZKPresentationProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKPresentationProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZKPresentationProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZKPresentationProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKPresentationProof.Merge(m, src)
}
func (m *ZKPresentationProof) XXX_Size() int {
	return m.Size()
}
func (m *ZKPresentationProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKPresentationProof.DiscardUnknown(m)
}

var xxx_messageInfo_ZKPresentationProof proto.InternalMessageInfo

func (m *ZKPresentationProof) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ZKPresentationProof) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ZKPresentationProof) GetVerificationMethod() string {
	if m != nil {
		return m.VerificationMethod
	}
	return ""
}

func (m *ZKPresentationProof) GetProofPurpose() string {
	if m != nil {
		return m.ProofPurpose
	}
	return ""
}

func (m *ZKPresentationProof) GetZkProof() *ZKProof {
	if m != nil {
		return m.ZkProof
	}
	return nil
}

func (m *ZKPresentationProof) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

func (m *ZKPresentationProof) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*ZKProof)(nil), "selfchain.identity.ZKProof")
	proto.RegisterMapType((map[string]string)(nil), "selfchain.identity.ZKProof.MetadataEntry")
	proto.RegisterType((*ZKPresentationProof)(nil), "selfchain.identity.ZKPresentationProof")
}

func init() { proto.RegisterFile("selfchain/identity/zkp.proto", fileDescriptor_3bb7dd5ecca1a83e) }

var fileDescriptor_3bb7dd5ecca1a83e = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6b, 0xdb, 0x4c,
	0x10, 0xc6, 0x2d, 0xcb, 0x89, 0xec, 0x71, 0xcc, 0xeb, 0x77, 0x93, 0x83, 0x50, 0x53, 0x45, 0xa4,
	0x17, 0x85, 0x82, 0x04, 0x69, 0x29, 0xa5, 0xbd, 0x95, 0x06, 0x5a, 0x42, 0x20, 0xe8, 0x98, 0x8b,
	0xd8, 0x48, 0x63, 0x69, 0xb1, 0xa4, 0x15, 0xda, 0x75, 0xa8, 0xfc, 0x15, 0x7a, 0xe9, 0xc7, 0xea,
	0x31, 0xd0, 0x4b, 0x8f, 0xc5, 0xfe, 0x22, 0x45, 0x2b, 0xc5, 0x7f, 0x28, 0xed, 0x6d, 0xe6, 0x79,
	0x66, 0x35, 0x33, 0x3f, 0x0d, 0x9c, 0x0a, 0xcc, 0x66, 0x51, 0x4a, 0x59, 0xe1, 0xb3, 0x18, 0x0b,
	0xc9, 0x64, 0xed, 0x2f, 0xe7, 0xa5, 0x57, 0x56, 0x5c, 0x72, 0x42, 0x36, 0xae, 0xf7, 0xe4, 0x5a,
	0x27, 0x09, 0x4f, 0xb8, 0xb2, 0xfd, 0x26, 0x6a, 0x2b, 0xad, 0xb3, 0x84, 0xf3, 0x24, 0x43, 0x5f,
	0x65, 0xf7, 0x8b, 0x99, 0x2f, 0x59, 0x8e, 0x42, 0xd2, 0xbc, 0xfb, 0xd4, 0xf9, 0x8f, 0x3e, 0x18,
	0x77, 0xd7, 0xb7, 0x15, 0xe7, 0x33, 0x42, 0x60, 0x20, 0xeb, 0x12, 0x4d, 0xcd, 0xd1, 0xdc, 0x51,
	0xa0, 0x62, 0xf2, 0x1c, 0xa0, 0x6c, 0xcc, 0x30, 0xa6, 0x92, 0x9a, 0x7d, 0x47, 0x73, 0x8f, 0x82,
	0x91, 0x52, 0x3e, 0x52, 0x49, 0xc9, 0x19, 0x8c, 0xa3, 0x8c, 0xb2, 0x5c, 0x84, 0x29, 0x15, 0xa9,
	0xa9, 0xab, 0x97, 0xd0, 0x4a, 0x9f, 0xa8, 0x48, 0xc9, 0x4b, 0xf8, 0x3f, 0x66, 0x22, 0xca, 0xb8,
	0xc0, 0x38, 0x64, 0x45, 0xcc, 0x22, 0x14, 0xe6, 0xc0, 0xd1, 0xdd, 0x49, 0x30, 0xdd, 0x18, 0x9f,
	0x5b, 0x9d, 0x98, 0x60, 0x44, 0x15, 0x52, 0x89, 0xb1, 0x79, 0xe0, 0x68, 0xae, 0x1e, 0x3c, 0xa5,
	0xe4, 0x02, 0xa6, 0x0f, 0x58, 0xb1, 0x19, 0x8b, 0xa8, 0x64, 0xbc, 0x08, 0xe7, 0x58, 0x9b, 0x87,
	0xaa, 0xd9, 0x7f, 0xbb, 0xfa, 0x35, 0xd6, 0xe4, 0x0a, 0x86, 0x39, 0x4a, 0xaa, 0xe6, 0x35, 0x1c,
	0xdd, 0x1d, 0x5f, 0x5e, 0x78, 0x7f, 0xf2, 0xf2, 0xba, 0xa5, 0xbd, 0x9b, 0xae, 0xf6, 0xaa, 0x90,
	0x55, 0x1d, 0x6c, 0x9e, 0x5a, 0xef, 0x61, 0xb2, 0x67, 0x91, 0x29, 0xe8, 0x4d, 0xd7, 0x16, 0x4e,
	0x13, 0x92, 0x13, 0x38, 0x78, 0xa0, 0xd9, 0x02, 0x15, 0x96, 0x51, 0xd0, 0x26, 0xef, 0xfa, 0x6f,
	0xb5, 0xf3, 0xaf, 0x7d, 0x38, 0x6e, 0x1a, 0xa0, 0xc0, 0x42, 0xaa, 0xc9, 0xfe, 0x4e, 0x78, 0x67,
	0xe9, 0xfe, 0xfe, 0xd2, 0x3e, 0x1c, 0xef, 0x2d, 0x9d, 0xa3, 0x4c, 0x79, 0xdc, 0x41, 0x26, 0xbb,
	0xd6, 0x8d, 0x72, 0xc8, 0x0b, 0x98, 0xb4, 0x3f, 0xab, 0x5c, 0x54, 0x25, 0x17, 0x68, 0x0e, 0x54,
	0xe9, 0x91, 0x12, 0x6f, 0x5b, 0x8d, 0xbc, 0x81, 0xe1, 0x72, 0x1e, 0x2a, 0x49, 0x51, 0x1e, 0x5f,
	0x3e, 0xfb, 0x07, 0x9f, 0xc0, 0x58, 0xce, 0xdb, 0xd9, 0x4f, 0x61, 0x14, 0xa5, 0x34, 0xcb, 0xb0,
	0x48, 0xb0, 0x63, 0xbf, 0x15, 0x88, 0x05, 0xc3, 0x0a, 0x45, 0xc9, 0x0b, 0x81, 0xa6, 0xa1, 0xcc,
	0x4d, 0xfe, 0xe1, 0xf5, 0xf7, 0x95, 0xad, 0x3d, 0xae, 0x6c, 0xed, 0xd7, 0xca, 0xd6, 0xbe, 0xad,
	0xed, 0xde, 0xe3, 0xda, 0xee, 0xfd, 0x5c, 0xdb, 0xbd, 0x3b, 0x6b, 0x7b, 0xe6, 0x5f, 0xb6, 0x87,
	0xde, 0x60, 0x11, 0xf7, 0x87, 0xea, 0x40, 0x5f, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x23, 0xcd,
	0xf0, 0x78, 0x0b, 0x03, 0x00, 0x00,
}

func (m *ZKProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintZkp(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintZkp(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintZkp(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.VerificationKey) > 0 {
		i -= len(m.VerificationKey)
		copy(dAtA[i:], m.VerificationKey)
		i = encodeVarintZkp(dAtA, i, uint64(len(m.VerificationKey)))
		i--
		dAtA[i] = 0x32
	}
	if m.Created != 0 {
		i = encodeVarintZkp(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DisclosedIndices) > 0 {
		dAtA2 := make([]byte, len(m.DisclosedIndices)*10)
		var j1 int
		for _, num := range m.DisclosedIndices {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintZkp(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimsHash) > 0 {
		i -= len(m.ClaimsHash)
		copy(dAtA[i:], m.ClaimsHash)
		i = encodeVarintZkp(dAtA, i, uint64(len(m.ClaimsHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProofData) > 0 {
		i -= len(m.ProofData)
		copy(dAtA[i:], m.ProofData)
		i = encodeVarintZkp(dAtA, i, uint64(len(m.ProofData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintZkp(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZKPresentationProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKPresentationProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKPresentationProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintZkp(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Challenge) > 0 {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintZkp(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0x32
	}
	if m.ZkProof != nil {
		{
			size, err := m.ZkProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZkp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProofPurpose) > 0 {
		i -= len(m.ProofPurpose)
		copy(dAtA[i:], m.ProofPurpose)
		i = encodeVarintZkp(dAtA, i, uint64(len(m.ProofPurpose)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VerificationMethod) > 0 {
		i -= len(m.VerificationMethod)
		copy(dAtA[i:], m.VerificationMethod)
		i = encodeVarintZkp(dAtA, i, uint64(len(m.VerificationMethod)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Created != 0 {
		i = encodeVarintZkp(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintZkp(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZkp(dAtA []byte, offset int, v uint64) int {
	offset -= sovZkp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ZKProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovZkp(uint64(l))
	}
	l = len(m.ProofData)
	if l > 0 {
		n += 1 + l + sovZkp(uint64(l))
	}
	l = len(m.ClaimsHash)
	if l > 0 {
		n += 1 + l + sovZkp(uint64(l))
	}
	if len(m.DisclosedIndices) > 0 {
		l = 0
		for _, e := range m.DisclosedIndices {
			l += sovZkp(uint64(e))
		}
		n += 1 + sovZkp(uint64(l)) + l
	}
	if m.Created != 0 {
		n += 1 + sovZkp(uint64(m.Created))
	}
	l = len(m.VerificationKey)
	if l > 0 {
		n += 1 + l + sovZkp(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovZkp(uint64(len(k))) + 1 + len(v) + sovZkp(uint64(len(v)))
			n += mapEntrySize + 1 + sovZkp(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ZKPresentationProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovZkp(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovZkp(uint64(m.Created))
	}
	l = len(m.VerificationMethod)
	if l > 0 {
		n += 1 + l + sovZkp(uint64(l))
	}
	l = len(m.ProofPurpose)
	if l > 0 {
		n += 1 + l + sovZkp(uint64(l))
	}
	if m.ZkProof != nil {
		l = m.ZkProof.Size()
		n += 1 + l + sovZkp(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovZkp(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovZkp(uint64(l))
	}
	return n
}

func sovZkp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZkp(x uint64) (n int) {
	return sovZkp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZKProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofData = append(m.ProofData[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofData == nil {
				m.ProofData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZkp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DisclosedIndices = append(m.DisclosedIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZkp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZkp
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZkp
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DisclosedIndices) == 0 {
					m.DisclosedIndices = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZkp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DisclosedIndices = append(m.DisclosedIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DisclosedIndices", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZkp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZkp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthZkp
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthZkp
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZkp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthZkp
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthZkp
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipZkp(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthZkp
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZkp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKPresentationProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKPresentationProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKPresentationProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofPurpose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofPurpose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZkProof == nil {
				m.ZkProof = &ZKProof{}
			}
			if err := m.ZkProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZkp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZkp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZkp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZkp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZkp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZkp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZkp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZkp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZkp = fmt.Errorf("proto: unexpected end of group")
)
